<?xml version="1.0" encoding="UTF-8"?>
<Peach xmlns="http://phed.org/2008/Peach" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://phed.org/2008/Peach ../peach.xsd" version="1.0"
	author="Hanifi Gunes" description="Path Example">

	<!--

	This example illustrates usage of Choice + Path + Include/Exclude + Stop all together
	
	Syntax:
	
	  python peach.py samples\path-include-bug.xml
	  
	  
	  Output:
	  For the first test One Two part will be fuzzed and Three will not
	  and at the second test all will be fuzzed except One element
	  
	Authors:
	  Hanifi Gunes 
	
	-->

	<!-- Import defaults for Peach instance -->
	<Include ns="default" src="file:defaults.xml" />

	<!-- Create a simple data template containing a single string -->
	<DataModel name="OneTemplate">
		<String name="String0" value="One " />
	</DataModel>
	
	<DataModel name="TwoTemplate">
		<String name="String1" value="Two  " />
	</DataModel>
	
	<DataModel name="ThreeTemplate">
		<String name="String0" value="Three " />
	</DataModel>
	
	<DataModel name="FourTemplate">
		<String name="String0" value="Four " />
	</DataModel>
	
	<StateModel name="StateMachine" initialState="State1">
		<State name="State1">
			<Action name="Action0" type="output">
				<DataModel ref="OneTemplate"/>
			</Action>
			<Action name="Action1" type="output">
				<DataModel ref="TwoTemplate"/>
			</Action>
			<Choice>
				<Action type="changeState" ref="State2"/>
				<Action type="changeState" ref="State3"/>
			</Choice>
		</State>
		
		<State name="State2">
			<Action type="output">
				<DataModel ref="ThreeTemplate"/>
			</Action>
			<Action type="changeState" ref="State3"/>
		</State>
		
		<State name="State3">
			<Action type="output">
				<DataModel ref="FourTemplate"/>
			</Action>
		</State>
	</StateModel>

	<Test name="FirstTest">
		<Exclude/>
		
		<StateModel ref="StateMachine">
			<Path ref="State1">
				<Include/>
			</Path>
			<Path ref="State2"/>
			<Stop/>
		</StateModel>
		<!-- Display test cases to the console -->
		<Publisher class="stdout.Stdout" />
	</Test>
	
	
	<Test name="SecondTest">
		<Exclude/>
		
		<StateModel ref="StateMachine">
			<Path ref="State1">
				<Include ref="Action1"/>
			</Path>
			<Path ref="State2">
				<Include/>
			</Path>
			<Path ref="State3">
				<Include/>
			</Path>
		</StateModel>
		<!-- Display test cases to the console -->
		<Publisher class="stdout.Stdout" />
	</Test>
	
	<!-- Configure a single run -->
	<Run name="DefaultRun" description="Stdout Run">

		<Test ref="FirstTest" />
		<Test ref="SecondTest" />

	</Run>

</Peach>
<!-- end -->
