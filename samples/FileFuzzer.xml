<?xml version="1.0" encoding="utf-8"?>
<Peach xmlns="http://phed.org/2008/Peach" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://phed.org/2008/Peach ../peach.xsd" version="1.0"
	author="Michael Eddington">
	
	<!--
		
		Example of the WindowsDebugger monitor.  This example will launch a 
		program with an attached debugger and log stack traces on faults.  The
		included example program will fault on test 47.
		
		Syntax:
		
		python peach.py -a
		
		python peach.py samples\Debugger.xml
		
		Output:
		
		You will see the tests scroll along.  Once test 47 has occured you can check
		the c:\peach\logfiles folder for a log of this test that will include a Debugger.txt
		faul output.
		
		Authors:
		
		Michael Eddington (mike@phed.org)
		
		$Id: Debugger.xml 807 2008-03-25 08:34:38Z meddingt $
		
	-->
	
	<!-- Import defaults for Peach instance -->
	<Include ns="default" src="file:defaults.xml" />
	
	<!-- Define our file format DDL -->
	<DataModel name="TestTemplate">
		<String value="Hello World!" />
	</DataModel>
	
	<!-- Define a simple state machine that will write the file and 
		then launch a program using the FileWriterLauncher publisher -->
	<StateModel name="State" initialState="Initial">
		<State name="Initial">
			<!-- Write out contents of file -->
			<Action name="WriteFile" type="output">
				<DataModel ref="TestTemplate" />
			</Action>
			
			<!-- Close file -->
			<Action type="close" />
			
			<!-- Launch the file consumer -->
			<Action type="call" method="notepad.exe"/>
			
		</State>
	</StateModel>
	
	<!-- Setup a local agent that will monitor for faults -->
	<Agent name="LocalAgent">
		<Monitor class="debugger.WindowsDebugEngine">
			
			<!-- The command line to run.  Notice the filename provided matched up 
				to what is provided below in the Publisher configuration -->
			<Param name="CommandLine" value="c:\windows\system32\notepad.exe fuzzfile.bin" />
			
			<!-- This parameter will cause the debugger to wait for an action-call in
				the state model with a method="notepad.exe" before running
				program.  -->
			<Param name="StartOnCall" value="notepad.exe" />
			
		</Monitor>
		
		<!-- Enable heap debugging on our process as well. -->
 		<Monitor class="process.PageHeap">
			<Param name="Executable" value="notepad.exe"/>
		</Monitor>
	</Agent>
	
	<Test name="TheTest">
		<Agent ref="LocalAgent" />
		
		<StateModel ref="State"/>
		
		<!-- Configure our publisher with correct filename to write too -->
		<Publisher class="file.FileWriterLauncher">
			<Param name="fileName" value="fuzzfile.bin" />
			<Param name="debugger" value="true"/>
		</Publisher>
	</Test>
	
	<Run name="DefaultRun">
		<Test ref="TheTest" />
		
		<!-- Configure a logger to store collected information -->
		<Logger class="logger.Filesystem">
			<Param name="path" value="c:\peach\logtest" />
		</Logger>
	</Run>
	
</Peach>
<!-- end -->
