// mszip.cpp : Defines the entry point for the console application.
//

#include <Python.h>
#define VERSION "0.1"
#define MODULE "MsZip"

static PyObject*	moduleError = NULL;
static PyObject*	DataElement = NULL;
static PyObject*	Relation = NULL;
static PyObject*	Block = NULL;
static PyObject*	Template = NULL;

static char *moduleDoc = "MsZip";

#include <stdio.h>
#include <stdlib.h>

//#include "mszip.h"
#include "mszip2.h"

//------------------------------------------------------------
//-----------       Created with 010 Editor        -----------
//------         www.sweetscape.com/010editor/          ------
//
// File    : C:\test.bin
// Address : 0 (0x0)
// Size    : 512 (0x200)
//------------------------------------------------------------
unsigned char hexData[512] = {
    0xfd, 0x01, 0x43, 0x4B, 0x53, 0x66, 0x80, 0x00,
    0x46, 0x28, 0xDD, 0xC9, 0xC2, 0x80, 0x02, 0x8A,
    0xD8, 0x66, 0x9F, 0x03, 0xCB, 0xCB, 0x41, 0x05,
    0x58, 0x5D, 0xA0, 0x8C, 0x78, 0xBE, 0x5F, 0x9B,
    0x78, 0x81, 0x74, 0x5E, 0x69, 0x6E, 0x52, 0x6A,
    0x51, 0x71, 0x7C, 0x55, 0x6A, 0x51, 0x3E, 0x03,
    0xAB, 0x39, 0x54, 0xB6, 0x27, 0x30, 0xFC, 0x30,
    0x0F, 0x92, 0x6C, 0x7E, 0x5E, 0x2A, 0x42, 0x52,
    0xB5, 0x2F, 0x69, 0x16, 0xB2, 0x64, 0x49, 0x39,
    0x50, 0xA7, 0x13, 0x54, 0xD2, 0x3A, 0xC1, 0x36,
    0x89, 0x0F, 0x59, 0x32, 0xA3, 0x28, 0x15, 0xA8,
    0xD7, 0x17, 0x2A, 0xDD, 0xEE, 0x94, 0xEB, 0x8C,
    0x6C, 0x6D, 0x5A, 0x7E, 0x69, 0x11, 0xC2, 0x51,
    0x27, 0xF8, 0x1E, 0x99, 0xA0, 0xC8, 0x66, 0x96,
    0x01, 0xF5, 0xDA, 0x40, 0x65, 0x67, 0x7F, 0xD2,
    0x33, 0x42, 0xB6, 0xB7, 0x38, 0xB3, 0x82, 0x81,
    0xD5, 0x07, 0x2A, 0xC9, 0x79, 0x5A, 0x6E, 0x15,
    0xB2, 0xBD, 0xC5, 0xA9, 0x65, 0xA9, 0x79, 0x08,
    0x93, 0xB5, 0xCC, 0x17, 0x3B, 0x22, 0x4B, 0xA7,
    0x66, 0xA6, 0x67, 0x94, 0x20, 0x5C, 0xDD, 0x73,
    0xC9, 0x47, 0x18, 0xD9, 0xE2, 0xBC, 0x4C, 0x90,
    0x87, 0x6D, 0xA1, 0xB2, 0x61, 0x7B, 0xFE, 0x0A,
    0xA1, 0x78, 0x18, 0x64, 0x72, 0x28, 0x54, 0xF2,
    0xE1, 0x67, 0x0F, 0x46, 0x7E, 0x64, 0x93, 0x73,
    0x20, 0x36, 0x87, 0x41, 0xE5, 0x13, 0x9B, 0xAB,
    0x57, 0xF0, 0xA3, 0x84, 0x56, 0x6A, 0x0E, 0xC8,
    0x57, 0x81, 0x50, 0xF9, 0xE6, 0x72, 0x1B, 0x49,
    0x34, 0xF9, 0xBC, 0x92, 0x4A, 0x06, 0xD6, 0x28,
    0xA8, 0xFC, 0xA1, 0x79, 0xFE, 0xEC, 0x28, 0xF2,
    0x19, 0x99, 0x45, 0x20, 0xF9, 0x44, 0xA8, 0x3C,
    0xCB, 0xAA, 0x04, 0x45, 0x7E, 0xB4, 0x10, 0x05,
    0xC9, 0x27, 0x41, 0xE5, 0x6B, 0x77, 0x89, 0xCF,
    0xE6, 0x43, 0x09, 0xD3, 0x34, 0x90, 0x74, 0x2C,
    0x54, 0x3A, 0xD2, 0x46, 0xB3, 0x8E, 0x0F, 0x35,
    0x50, 0x41, 0xD2, 0xA9, 0xB0, 0x18, 0x31, 0xFA,
    0xCD, 0x25, 0x80, 0x1E, 0xAC, 0x20, 0x05, 0x29,
    0x50, 0x05, 0x1F, 0xF5, 0x0F, 0x7B, 0xF0, 0xA3,
    0x07, 0x2C, 0x92, 0xFC, 0xE5, 0x9E, 0x05, 0xF7,
    0xF8, 0xD1, 0x42, 0x16, 0x24, 0x0F, 0x0B, 0x3E,
    0xA1, 0x8F, 0x1B, 0x16, 0x22, 0x5B, 0x90, 0x51,
    0x9A, 0x97, 0x52, 0x94, 0x9A, 0x82, 0x30, 0xA0,
    0x23, 0xB2, 0xDA, 0x5C, 0x18, 0x35, 0xB5, 0xC1,
    0xD5, 0xE4, 0x42, 0xD5, 0xAC, 0xBF, 0xF8, 0x82,
    0x47, 0x14, 0x3D, 0xD1, 0xC1, 0x55, 0x95, 0x42,
    0x55, 0xC9, 0xAA, 0xC8, 0x88, 0x8B, 0xA0, 0x85,
    0x14, 0x5C, 0x51, 0x0E, 0x54, 0x91, 0x9F, 0xEA,
    0x51, 0x76, 0x11, 0xB4, 0x24, 0x08, 0x57, 0x94,
    0x01, 0x55, 0xF4, 0xE4, 0xC7, 0xC1, 0x1A, 0x61,
    0xD4, 0x40, 0x83, 0xAB, 0x29, 0x86, 0xAA, 0x79,
    0xBF, 0xA4, 0xE3, 0x81, 0x28, 0x7A, 0xC8, 0x61,
    0xB8, 0xBC, 0x66, 0x66, 0xA8, 0xAD, 0x28, 0x7A,
    0xF0, 0xC1, 0x55, 0x65, 0x43, 0x55, 0x99, 0x79,
    0x6A, 0x9F, 0x12, 0x41, 0x0B, 0x44, 0xB8, 0xA2,
    0x70, 0xA8, 0xA2, 0x9D, 0xB9, 0x15, 0xD3, 0x05,
    0x51, 0x02, 0x21, 0xBF, 0xB4, 0x38, 0x31, 0x0F,
    0xA8, 0x22, 0x13, 0xAA, 0x62, 0xC3, 0x5D, 0xCE,
    0x0E, 0x11, 0xD4, 0x74, 0x8C, 0x50, 0x54, 0x07,
    0x55, 0x64, 0x72, 0x4F, 0x4E, 0x0E, 0x39, 0x42,
    0x72, 0x33, 0x73, 0x72, 0x32, 0xF3, 0xF3, 0x10,
    0x8E, 0x99, 0xAE, 0x3D, 0xC9, 0x04, 0x59, 0x41,
    0x12, 0x4C, 0x01, 0xA7, 0x30, 0x44, 0xC1, 0xBA,
    0x43, 0x41, 0x1F, 0xD8, 0x80, 0x74, 0x72, 0x7E,
    0x69, 0x5E, 0x09, 0x30, 0x83, 0x40, 0xCB, 0x9E,
    0xFA, 0xA5, 0x6B, 0x2F, 0x31, 0x00, 0x00, 0x00 
};

DWORD DebugTraceLevel = 0;

/**
 * Out should be 1M or more
 */
int MsZipDecompress(PUCHAR in, DWORD inLen, PUCHAR out, PDWORD outLen)
{
	unsigned short	blockLen;
	PUCHAR			curpos;
	DWORD			chunkLen;
	PUCHAR			outpos;

	outpos = out;
	blockLen = 0;
	curpos = in;

	while(curpos+blockLen < in+inLen)
	{
		if(curpos+sizeof(unsigned short) >= in+inLen)
		{
			fprintf(stderr, "Found end!\n");
			break;
		}

		blockLen = *(unsigned short*)curpos;
		curpos += sizeof(unsigned short);

		if(blockLen == 0)
			break;

		CMSZipCodec zip;

		chunkLen = 32*1024;

		if(outpos+chunkLen > out+(*outLen))
			return 0;

		if(zip.Uncompress(curpos, blockLen, outpos, &chunkLen) != CS_SUCCESS)
			return 0;

		outpos += chunkLen;
		curpos += blockLen;

		fprintf(stderr, "Chunk uncompressed, blockLen: %d ; chunkLen: %d\n", blockLen, chunkLen);
	}

	*outLen = outpos - out;

	return -1;
}

/**
 * Need to chunk by 32k
 * Out should be 1M or more
 */
int MsZipCompress(PUCHAR in, DWORD inLen, PUCHAR out, PDWORD outLen)
{
	unsigned short	blockLen;
	PUCHAR			curpos;
	DWORD			chunkLen;
	unsigned char*	chunk;
	PUCHAR			outpos;

	outpos = out;
	blockLen = 0;
	curpos = in;
	chunk = (unsigned char*)malloc(32*1024);

	while(curpos < in+inLen)
	{
		if(curpos - in >= (32*1024))
			blockLen = 32*1024;
		else
			blockLen = curpos - in;

		if(blockLen == 0)
			break;

		// Store 2 byte block length
		*(PUSHORT)outpos = (USHORT)blockLen;
		outpos += sizeof(USHORT);

		chunkLen = 32*1024;

		CMSZipCodec zip;
		if(zip.Compress(curpos, blockLen, outpos, &chunkLen) != CS_SUCCESS)
			return 0;

		outpos += chunkLen;
		curpos += blockLen;

		fprintf(stderr, "Chunk compressed, blockLen: %d ; chunkLen: %d\n", blockLen, chunkLen);
	}

	// Stick a NULL at the end
	*outpos = 0;
	outpos += 1;

	*outLen = outpos - out;

	return -1;
}

/*int main(int argc, char* argv[])
{
	unsigned char*	outbuff = (PUCHAR)malloc(1024*1024);
	DWORD	outLen = 1024*1024;
	MsZipDecompress(hexData, 510, outbuff, &outLen);

	return 0;
}
*/

static PyObject* decompress(PyObject* self, PyObject* args)
{
	PyObject	*data=NULL;
	PyObject	*ret = NULL;
	PVOID		buff;
	Py_ssize_t	buffLen;

	unsigned char*	outbuff = (PUCHAR)malloc(10*1048576);
	DWORD	outLen = 10*1048576;

	PyArg_ParseTuple(args, "O", &data);

	if(!PyObject_CheckReadBuffer(data))
	{
		fprintf(stderr, "Error, data argument to compress is not a buffer\n");
		Py_RETURN_NONE;
	}

	PyObject_AsReadBuffer(data, &buff, &buffLen);
	MsZipDecompress(buff, buffLen, outbuff, &outLen);

	ret = PyString_FromStringAndSize(outbuff, outLen);
	free(outbuff);

	return ret;
}

static PyObject* compress(PyObject* self, PyObject* args)
{
	PyObject	*data=NULL;
	PyObject	*ret = NULL;
	PVOID		buff;
	Py_ssize_t	buffLen;

	unsigned char*	outbuff = (PUCHAR)malloc(10*1048576);
	DWORD	outLen = 10*1048576;

	PyArg_ParseTuple(args, "O", &data);

	if(!PyObject_CheckReadBuffer(data))
	{
		fprintf(stderr, "Error, data argument to compress is not a buffer\n");
		Py_RETURN_NONE;
	}

	PyObject_AsReadBuffer(data, &buff, &buffLen);
	MsZipCompress(buff, buffLen, outbuff, &outLen);

	ret = PyString_FromStringAndSize(outbuff, outLen);
	free(outbuff);

	return ret;
}

static struct PyMethodDef moduleMethods[] = {
	{"compress",			compress,			METH_VARARGS, ""},
	{"decompress",			decompress,			METH_VARARGS, ""},
	{NULL,	NULL}
};

void initcPeach()
{
	PyObject *m, *d, *v, *_version;

	/* Create the module and add the functions */
	m = Py_InitModule(MODULE, moduleMethods);

	/* Add some symbolic constants to the module */
	d = PyModule_GetDict(m);
	_version = PyString_FromString(VERSION);
	PyDict_SetItemString(d, "_version", _version );

	/*add in the docstring*/
	v = Py_BuildValue("s", moduleDoc);
	PyDict_SetItemString(d, "__doc__", v);
	Py_XDECREF(v);

	Py_XDECREF(m);
}

// end
