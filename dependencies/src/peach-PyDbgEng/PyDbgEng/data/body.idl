typedef struct _WINDBG_EXTENSION_APIS32* PWINDBG_EXTENSION_APIS32;
typedef struct _WINDBG_EXTENSION_APIS64* PWINDBG_EXTENSION_APIS64;
typedef struct _MEMORY_BASIC_INFORMATION64* PMEMORY_BASIC_INFORMATION64;
typedef struct _DEBUG_OFFSET_REGION
{
    unsigned __int64 Base;
    unsigned __int64 Size;
} DEBUG_OFFSET_REGION, *PDEBUG_OFFSET_REGION;
///////////////////////////////////////////////////////////
[
	object,
	uuid(f2df5f53-071f-47bd-9de6-5734c3fed689),
	helpstring("IDebugAdvanced")
]
interface IDebugAdvanced : IUnknown {
	HRESULT GetThreadContext([out]  PVOID Context,[in] unsigned long ContextSize );
	HRESULT SetThreadContext([in]  PVOID Context,[in] unsigned long ContextSize );
};

typedef struct _DEBUG_READ_USER_MINIDUMP_STREAM
{
   unsigned long StreamType;
   unsigned long Flags;
   unsigned __int64 Offset;
   PVOID Buffer;
   unsigned long BufferSize;
   unsigned long BufferUsed;
} DEBUG_READ_USER_MINIDUMP_STREAM, *PDEBUG_READ_USER_MINIDUMP_STREAM;
enum {DEBUG_GET_TEXT_COMPLETIONS_NO_DOT_COMMANDS       = 0x00000001};
enum {DEBUG_GET_TEXT_COMPLETIONS_NO_EXTENSION_COMMANDS = 0x00000002};
enum {DEBUG_GET_TEXT_COMPLETIONS_NO_SYMBOLS            = 0x00000004};
typedef struct _DEBUG_GET_TEXT_COMPLETIONS_IN
{
    unsigned long Flags;
    unsigned long MatchCountLimit;
    unsigned __int64 Reserved[3];
    // Input text string follows.
} DEBUG_GET_TEXT_COMPLETIONS_IN, *PDEBUG_GET_TEXT_COMPLETIONS_IN;
enum {DEBUG_GET_TEXT_COMPLETIONS_IS_DOT_COMMAND       = 0x00000001};
enum {DEBUG_GET_TEXT_COMPLETIONS_IS_EXTENSION_COMMAND = 0x00000002};
enum {DEBUG_GET_TEXT_COMPLETIONS_IS_SYMBOL            = 0x00000004};
typedef struct _DEBUG_GET_TEXT_COMPLETIONS_OUT
{
    unsigned long Flags;
    // Char index in input string where completions start.
    unsigned long ReplaceIndex;
    unsigned long MatchCount;
    unsigned long Reserved1;
    unsigned __int64 Reserved2[2];
    // Completions follow.
    // Completion data is zero-terminated strings ended
    // by a final zero double-terminator.
} DEBUG_GET_TEXT_COMPLETIONS_OUT, *PDEBUG_GET_TEXT_COMPLETIONS_OUT;
typedef struct _DEBUG_CACHED_SYMBOL_INFO
{
    unsigned __int64 ModBase;
    unsigned __int64 Arg1;
    unsigned __int64 Arg2;
    unsigned long Id;
    unsigned long Arg3;
} DEBUG_CACHED_SYMBOL_INFO, *PDEBUG_CACHED_SYMBOL_INFO;
enum {DEBUG_REQUEST_SOURCE_PATH_HAS_SOURCE_SERVER = 0};
enum {DEBUG_REQUEST_TARGET_EXCEPTION_CONTEXT = 1};
enum {DEBUG_REQUEST_TARGET_EXCEPTION_THREAD = 2};
enum {DEBUG_REQUEST_TARGET_EXCEPTION_RECORD = 3};
enum {DEBUG_REQUEST_GET_ADDITIONAL_CREATE_OPTIONS = 4};
enum {DEBUG_REQUEST_SET_ADDITIONAL_CREATE_OPTIONS = 5};
enum {DEBUG_REQUEST_GET_WIN32_MAJOR_MINOR_VERSIONS = 6};
enum {DEBUG_REQUEST_READ_USER_MINIDUMP_STREAM = 7};
enum {DEBUG_REQUEST_TARGET_CAN_DETACH = 8};
enum {DEBUG_REQUEST_SET_LOCAL_IMPLICIT_COMMAND_LINE = 9};
enum {DEBUG_REQUEST_GET_CAPTURED_EVENT_CODE_OFFSET = 10};
enum {DEBUG_REQUEST_READ_CAPTURED_EVENT_CODE_STREAM = 11};
enum {DEBUG_REQUEST_EXT_TYPED_DATA_ANSI = 12};
enum {DEBUG_REQUEST_GET_EXTENSION_SEARCH_PATH_WIDE = 13};
enum {DEBUG_REQUEST_GET_TEXT_COMPLETIONS_WIDE = 14};
enum {DEBUG_REQUEST_GET_CACHED_SYMBOL_INFO = 15};
enum {DEBUG_REQUEST_ADD_CACHED_SYMBOL_INFO = 16};
enum {DEBUG_REQUEST_REMOVE_CACHED_SYMBOL_INFO = 17};
enum {DEBUG_REQUEST_GET_TEXT_COMPLETIONS_ANSI = 18};
enum {DEBUG_REQUEST_CURRENT_OUTPUT_CALLBACKS_ARE_DML_AWARE = 19};
enum {DEBUG_SRCFILE_SYMBOL_TOKEN = 0};
enum {DEBUG_SRCFILE_SYMBOL_TOKEN_SOURCE_COMMAND_WIDE = 1};
enum {DEBUG_SYMINFO_BREAKPOINT_SOURCE_LINE = 0};
enum {DEBUG_SYMINFO_IMAGEHLP_MODULEW64 = 1};
enum {DEBUG_SYMINFO_GET_SYMBOL_NAME_BY_OFFSET_AND_TAG_WIDE = 2};
enum {DEBUG_SYMINFO_GET_MODULE_SYMBOL_NAMES_AND_OFFSETS = 3};
enum {DEBUG_SYSOBJINFO_THREAD_BASIC_INFORMATION = 0};
enum {DEBUG_SYSOBJINFO_THREAD_NAME_WIDE = 1};
enum {DEBUG_SYSOBJINFO_CURRENT_PROCESS_COOKIE = 2};
enum {DEBUG_TBINFO_EXIT_STATUS    = 0x00000001};
enum {DEBUG_TBINFO_PRIORITY_CLASS = 0x00000002};
enum {DEBUG_TBINFO_PRIORITY       = 0x00000004};
enum {DEBUG_TBINFO_TIMES          = 0x00000008};
enum {DEBUG_TBINFO_START_OFFSET   = 0x00000010};
enum {DEBUG_TBINFO_AFFINITY       = 0x00000020};
enum {DEBUG_TBINFO_ALL            = 0x0000003f};
typedef struct _DEBUG_THREAD_BASIC_INFORMATION
{
    // Valid members have a DEBUG_TBINFO bit set in Valid.
    unsigned long Valid;
    unsigned long ExitStatus;
    unsigned long PriorityClass;
    unsigned long Priority;
    unsigned __int64 CreateTime;
    unsigned __int64 ExitTime;
    unsigned __int64 KernelTime;
    unsigned __int64 UserTime;
    unsigned __int64 StartOffset;
    unsigned __int64 Affinity;
} DEBUG_THREAD_BASIC_INFORMATION, *PDEBUG_THREAD_BASIC_INFORMATION;
///////////////////////////////////////////////////////////
[
	object,
	uuid(716d14c9-119b-4ba5-af1f-0890e672416a),
	helpstring("IDebugAdvanced2")
]
interface IDebugAdvanced2 : IUnknown {
	HRESULT GetThreadContext([out]  PVOID Context,[in] unsigned long ContextSize );
	HRESULT SetThreadContext([in]  PVOID Context,[in] unsigned long ContextSize );
	HRESULT Request([in]  unsigned long Request,[in,optional] PVOID InBuffer,[in,optional] unsigned long InBufferSize,[out,optional] PVOID OutBuffer,[in,optional] unsigned long OutBufferSize,[out,optional] unsigned long* OutSize );
	HRESULT GetSourceFileInformation([in]  unsigned long Which,[in] char* SourceFile,[in] unsigned __int64 Arg64,[in] unsigned long Arg32,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* InfoSize );
	HRESULT FindSourceFileAndToken([in]  unsigned long StartElement,[in] unsigned __int64 ModAddr,[in] const char* File,[in] unsigned long Flags,[in,optional] PVOID FileToken,[in,optional] unsigned long FileTokenSize,[out,optional] unsigned long* FoundElement,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FoundSize );
	HRESULT GetSymbolInformation([in]  unsigned long Which,[in] unsigned __int64 Arg64,[in] unsigned long Arg32,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* InfoSize,[out,optional] char* StringBuffer,[in,optional] unsigned long StringBufferSize,[out,optional] unsigned long* StringSize );
	HRESULT GetSystemObjectInformation([in]  unsigned long Which,[in] unsigned __int64 Arg64,[in] unsigned long Arg32,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* InfoSize );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(cba4abb4-84c4-444d-87ca-a04e13286739),
	helpstring("IDebugAdvanced3")
]
interface IDebugAdvanced3 : IUnknown {
	HRESULT GetThreadContext([out]  PVOID Context,[in] unsigned long ContextSize );
	HRESULT SetThreadContext([in]  PVOID Context,[in] unsigned long ContextSize );
	HRESULT Request([in]  unsigned long Request,[in,optional] PVOID InBuffer,[in,optional] unsigned long InBufferSize,[out,optional] PVOID OutBuffer,[in,optional] unsigned long OutBufferSize,[out,optional] unsigned long* OutSize );
	HRESULT GetSourceFileInformation([in]  unsigned long Which,[in] char* SourceFile,[in] unsigned __int64 Arg64,[in] unsigned long Arg32,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* InfoSize );
	HRESULT FindSourceFileAndToken([in]  unsigned long StartElement,[in] unsigned __int64 ModAddr,[in] const char* File,[in] unsigned long Flags,[in,optional] PVOID FileToken,[in,optional] unsigned long FileTokenSize,[out,optional] unsigned long* FoundElement,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FoundSize );
	HRESULT GetSymbolInformation([in]  unsigned long Which,[in] unsigned __int64 Arg64,[in] unsigned long Arg32,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* InfoSize,[out,optional] char* StringBuffer,[in,optional] unsigned long StringBufferSize,[out,optional] unsigned long* StringSize );
	HRESULT GetSystemObjectInformation([in]  unsigned long Which,[in] unsigned __int64 Arg64,[in] unsigned long Arg32,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* InfoSize );
	HRESULT GetSourceFileInformationWide([in]  unsigned long Which,[in] wchar_t* SourceFile,[in] unsigned __int64 Arg64,[in] unsigned long Arg32,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* InfoSize );
	HRESULT FindSourceFileAndTokenWide([in]  unsigned long StartElement,[in] unsigned __int64 ModAddr,[in] const wchar_t* File,[in] unsigned long Flags,[in,optional] PVOID FileToken,[in,optional] unsigned long FileTokenSize,[out,optional] unsigned long* FoundElement,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FoundSize );
	HRESULT GetSymbolInformationWide([in]  unsigned long Which,[in] unsigned __int64 Arg64,[in] unsigned long Arg32,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* InfoSize,[out,optional] wchar_t* StringBuffer,[in,optional] unsigned long StringBufferSize,[out,optional] unsigned long* StringSize );
};

enum {DEBUG_BREAKPOINT_CODE = 0};
enum {DEBUG_BREAKPOINT_DATA = 1};
enum {DEBUG_BREAKPOINT_TIME = 2};
enum {DEBUG_BREAKPOINT_GO_ONLY    = 0x00000001};
enum {DEBUG_BREAKPOINT_DEFERRED   = 0x00000002};
enum {DEBUG_BREAKPOINT_ENABLED    = 0x00000004};
enum {DEBUG_BREAKPOINT_ADDER_ONLY = 0x00000008};
enum {DEBUG_BREAKPOINT_ONE_SHOT   = 0x00000010};
enum {DEBUG_BREAK_READ    = 0x00000001};
enum {DEBUG_BREAK_WRITE   = 0x00000002};
enum {DEBUG_BREAK_EXECUTE = 0x00000004};
enum {DEBUG_BREAK_IO      = 0x00000008};
typedef struct _DEBUG_BREAKPOINT_PARAMETERS
{
    unsigned __int64 Offset;
    unsigned long Id;
    unsigned long BreakType;
    unsigned long ProcType;
    unsigned long Flags;
    unsigned long DataSize;
    unsigned long DataAccessType;
    unsigned long PassCount;
    unsigned long CurrentPassCount;
    unsigned long MatchThread;
    unsigned long CommandSize;
    unsigned long OffsetExpressionSize;
} DEBUG_BREAKPOINT_PARAMETERS, *PDEBUG_BREAKPOINT_PARAMETERS;
///////////////////////////////////////////////////////////
[
	object,
	uuid(5bd9d474-5975-423a-b88b-65a8e7110e65),
	helpstring("IDebugBreakpoint")
]
interface IDebugBreakpoint : IUnknown {
	HRESULT GetId([out]  unsigned long* Id );
	HRESULT GetType([out]  unsigned long* BreakType,[out] unsigned long* ProcType );
	HRESULT GetAdder([out]  IDebugClient** Adder );
	HRESULT GetFlags([out]  unsigned long* Flags );
	HRESULT AddFlags([in]  unsigned long Flags );
	HRESULT RemoveFlags([in]  unsigned long Flags );
	HRESULT SetFlags([in]  unsigned long Flags );
	HRESULT GetOffset([out]  unsigned __int64* Offset );
	HRESULT SetOffset([in]  unsigned __int64 Offset );
	HRESULT GetDataParameters([out]  unsigned long* Size,[out] unsigned long* AccessType );
	HRESULT SetDataParameters([in]  unsigned long Size,[in] unsigned long AccessType );
	HRESULT GetPassCount([out]  unsigned long* Count );
	HRESULT SetPassCount([in]  unsigned long Count );
	HRESULT GetCurrentPassCount([out]  unsigned long* Count );
	HRESULT GetMatchThreadId([out]  unsigned long* Id );
	HRESULT SetMatchThreadId([in]  unsigned long Thread );
	HRESULT GetCommand([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetCommand([in]  const char* Command );
	HRESULT GetOffsetExpression([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ExpressionSize );
	HRESULT SetOffsetExpression([in]  const char* Expression );
	HRESULT GetParameters([out]  PDEBUG_BREAKPOINT_PARAMETERS Params );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(1b278d20-79f2-426e-a3f9-c1ddf375d48e),
	helpstring("IDebugBreakpoint2")
]
interface IDebugBreakpoint2 : IUnknown {
	HRESULT GetId([out]  unsigned long* Id );
	HRESULT GetType([out]  unsigned long* BreakType,[out] unsigned long* ProcType );
	HRESULT GetAdder([out]  IDebugClient** Adder );
	HRESULT GetFlags([out]  unsigned long* Flags );
	HRESULT AddFlags([in]  unsigned long Flags );
	HRESULT RemoveFlags([in]  unsigned long Flags );
	HRESULT SetFlags([in]  unsigned long Flags );
	HRESULT GetOffset([out]  unsigned __int64* Offset );
	HRESULT SetOffset([in]  unsigned __int64 Offset );
	HRESULT GetDataParameters([out]  unsigned long* Size,[out] unsigned long* AccessType );
	HRESULT SetDataParameters([in]  unsigned long Size,[in] unsigned long AccessType );
	HRESULT GetPassCount([out]  unsigned long* Count );
	HRESULT SetPassCount([in]  unsigned long Count );
	HRESULT GetCurrentPassCount([out]  unsigned long* Count );
	HRESULT GetMatchThreadId([out]  unsigned long* Id );
	HRESULT SetMatchThreadId([in]  unsigned long Thread );
	HRESULT GetCommand([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetCommand([in]  const char* Command );
	HRESULT GetOffsetExpression([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ExpressionSize );
	HRESULT SetOffsetExpression([in]  const char* Expression );
	HRESULT GetParameters([out]  PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT GetCommandWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetCommandWide([in]  const wchar_t* Command );
	HRESULT GetOffsetExpressionWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ExpressionSize );
	HRESULT SetOffsetExpressionWide([in]  const wchar_t* Expression );
};

enum {DEBUG_ATTACH_KERNEL_CONNECTION = 0x00000000};
enum {DEBUG_ATTACH_LOCAL_KERNEL      = 0x00000001};
enum {DEBUG_ATTACH_EXDI_DRIVER       = 0x00000002};
enum {DEBUG_GET_PROC_DEFAULT      = 0x00000000};
enum {DEBUG_GET_PROC_FULL_MATCH   = 0x00000001};
enum {DEBUG_GET_PROC_ONLY_MATCH   = 0x00000002};
enum {DEBUG_GET_PROC_SERVICE_NAME = 0x00000004};
enum {DEBUG_PROC_DESC_DEFAULT         = 0x00000000};
enum {DEBUG_PROC_DESC_NO_PATHS        = 0x00000001};
enum {DEBUG_PROC_DESC_NO_SERVICES     = 0x00000002};
enum {DEBUG_PROC_DESC_NO_MTS_PACKAGES = 0x00000004};
enum {DEBUG_PROC_DESC_NO_COMMAND_LINE = 0x00000008};
enum {DEBUG_PROC_DESC_NO_SESSION_ID   = 0x00000010};
enum {DEBUG_PROC_DESC_NO_USER_NAME    = 0x00000020};
enum {DEBUG_ATTACH_DEFAULT                   = 0x00000000};
enum {DEBUG_ATTACH_NONINVASIVE               = 0x00000001};
enum {DEBUG_ATTACH_EXISTING                  = 0x00000002};
enum {DEBUG_ATTACH_NONINVASIVE_NO_SUSPEND    = 0x00000004};
enum {DEBUG_ATTACH_INVASIVE_NO_INITIAL_BREAK = 0x00000008};
enum {DEBUG_ATTACH_INVASIVE_RESUME_PROCESS   = 0x00000010};
enum {DEBUG_ATTACH_NONINVASIVE_ALLOW_PARTIAL = 0x00000020};
enum {DEBUG_ECREATE_PROCESS_DEFAULT                   = 0x00000000};
enum {DEBUG_ECREATE_PROCESS_INHERIT_HANDLES           = 0x00000001};
enum {DEBUG_ECREATE_PROCESS_USE_VERIFIER_FLAGS        = 0x00000002};
enum {DEBUG_ECREATE_PROCESS_USE_IMPLICIT_COMMAND_LINE = 0x00000004};
typedef struct _DEBUG_CREATE_PROCESS_OPTIONS
{
    // Win32 create flags.
    unsigned long CreateFlags;
    // DEBUG_ECREATE_PROCESS_* flags.
    unsigned long EngCreateFlags;
    // Application Verifier flags,
    // if DEBUG_ECREATE_PROCESS_USE_VERIFIER_FLAGS is set.
    unsigned long VerifierFlags;
    // Must be zero.
    unsigned long Reserved;
} DEBUG_CREATE_PROCESS_OPTIONS, *PDEBUG_CREATE_PROCESS_OPTIONS;
enum {DEBUG_PROCESS_DETACH_ON_EXIT    = 0x00000001};
enum {DEBUG_PROCESS_ONLY_THIS_PROCESS = 0x00000002};
enum {DEBUG_CONNECT_SESSION_DEFAULT     = 0x00000000};
enum {DEBUG_CONNECT_SESSION_NO_VERSION  = 0x00000001};
enum {DEBUG_CONNECT_SESSION_NO_ANNOUNCE = 0x00000002};
enum {DEBUG_SERVERS_DEBUGGER = 0x00000001};
enum {DEBUG_SERVERS_PROCESS  = 0x00000002};
enum {DEBUG_SERVERS_ALL      = 0x00000003};
enum {DEBUG_END_PASSIVE          = 0x00000000};
enum {DEBUG_END_ACTIVE_TERMINATE = 0x00000001};
enum {DEBUG_END_ACTIVE_DETACH    = 0x00000002};
enum {DEBUG_END_REENTRANT        = 0x00000003};
enum {DEBUG_END_DISCONNECT       = 0x00000004};
enum {DEBUG_OUTPUT_NORMAL            = 0x00000001};
enum {DEBUG_OUTPUT_ERROR             = 0x00000002};
enum {DEBUG_OUTPUT_WARNING           = 0x00000004};
enum {DEBUG_OUTPUT_VERBOSE           = 0x00000008};
enum {DEBUG_OUTPUT_PROMPT            = 0x00000010};
enum {DEBUG_OUTPUT_PROMPT_REGISTERS  = 0x00000020};
enum {DEBUG_OUTPUT_EXTENSION_WARNING = 0x00000040};
enum {DEBUG_OUTPUT_DEBUGGEE          = 0x00000080};
enum {DEBUG_OUTPUT_DEBUGGEE_PROMPT   = 0x00000100};
enum {DEBUG_OUTPUT_SYMBOLS           = 0x00000200};
enum {DEBUG_IOUTPUT_KD_PROTOCOL      = 0x80000000};
enum {DEBUG_IOUTPUT_REMOTING         = 0x40000000};
enum {DEBUG_IOUTPUT_BREAKPOINT       = 0x20000000};
enum {DEBUG_IOUTPUT_EVENT            = 0x10000000};
enum {DEBUG_OUTPUT_IDENTITY_DEFAULT = 0x00000000};
///////////////////////////////////////////////////////////
[
	object,
	uuid(27fe5639-8407-4f47-8364-ee118fb08ac8),
	helpstring("IDebugClient")
]
interface IDebugClient : IUnknown {
	HRESULT AttachKernel([in]  unsigned long Flags,[in,optional] const char* ConnectOptions );
	HRESULT GetKernelConnectionOptions([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptions([in]  const char* Options );
	HRESULT StartProcessServer([in]  unsigned long Flags,[in] const char* Options,[in,optional] PVOID Reserved );
	HRESULT ConnectProcessServer([in]  const char* RemoteOptions,[out] unsigned __int64* Server );
	HRESULT DisconnectProcessServer([in]  unsigned __int64 Server );
	HRESULT GetRunningProcessSystemIds([in]  unsigned __int64 Server,[out,optional] unsigned long* Ids,[in,optional] unsigned long Count,[out,optional] unsigned long* ActualCount );
	HRESULT GetRunningProcessSystemIdByExecutableName([in]  unsigned __int64 Server,[in] const char* ExeName,[in] unsigned long Flags,[out] unsigned long* Id );
	HRESULT GetRunningProcessDescription([in]  unsigned __int64 Server,[in] unsigned long SystemId,[in] unsigned long Flags,[out,optional] char* ExeName,[in,optional] unsigned long ExeNameSize,[out,optional] unsigned long* ActualExeNameSize,[out,optional] char* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* ActualDescriptionSize );
	HRESULT AttachProcess([in]  unsigned __int64 Server,[in] unsigned long ProcessId,[in] unsigned long AttachFlags );
	HRESULT CreateProcess([in]  unsigned __int64 Server,[in] char* CommandLine,[in] unsigned long CreateFlags );
	HRESULT CreateProcessAndAttach([in]  unsigned __int64 Server,[in,optional] char* CommandLine,[in,optional] unsigned long CreateFlags,[in,optional] unsigned long ProcessId,[in,optional] unsigned long AttachFlags );
	HRESULT GetProcessOptions([out]  unsigned long* Options );
	HRESULT AddProcessOptions([in]  unsigned long Options );
	HRESULT RemoveProcessOptions([in]  unsigned long Options );
	HRESULT SetProcessOptions([in]  unsigned long Options );
	HRESULT OpenDumpFile([in]  const char* DumpFile );
	HRESULT WriteDumpFile([in]  const char* DumpFile,[in] unsigned long Qualifier );
	HRESULT ConnectSession([in]  unsigned long Flags,[in] unsigned long HistoryLimit );
	HRESULT StartServer([in]  const char* Options );
	HRESULT OutputServers([in]  unsigned long OutputControl,[in] const char* Machine,[in] unsigned long Flags );
	HRESULT TerminateProcesses(  );
	HRESULT DetachProcesses(  );
	HRESULT EndSession([in]  unsigned long Flags );
	HRESULT GetExitCode([out]  unsigned long* Code );
	HRESULT DispatchCallbacks([in]  unsigned long Timeout );
	HRESULT ExitDispatch([in]  IDebugClient* Client );
	HRESULT CreateClient([out]  IDebugClient** Client );
	HRESULT GetInputCallbacks([out]  IDebugInputCallbacks** Callbacks );
	HRESULT SetInputCallbacks([in,optional]  IDebugInputCallbacks* Callbacks );
	HRESULT GetOutputCallbacks([out]  IDebugOutputCallbacks** Callbacks );
	HRESULT SetOutputCallbacks([in,optional]  IDebugOutputCallbacks* Callbacks );
	HRESULT GetOutputMask([out]  unsigned long* Mask );
	HRESULT SetOutputMask([in]  unsigned long Mask );
	HRESULT GetOtherOutputMask([in]  IDebugClient* Client,[out] unsigned long* Mask );
	HRESULT SetOtherOutputMask([in]  IDebugClient* Client,[in] unsigned long Mask );
	HRESULT GetOutputWidth([out]  unsigned long* Columns );
	HRESULT SetOutputWidth([in]  unsigned long Columns );
	HRESULT GetOutputLinePrefix([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefix([in,optional]  const char* Prefix );
	HRESULT GetIdentity([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* IdentitySize );
	HRESULT OutputIdentity([in]  unsigned long OutputControl,[in] unsigned long Flags,[in] const char* Format );
	HRESULT GetEventCallbacks([out]  IDebugEventCallbacks** Callbacks );
	HRESULT SetEventCallbacks([in,optional]  IDebugEventCallbacks* Callbacks );
	HRESULT FlushCallbacks(  );
};

enum {DEBUG_FORMAT_DEFAULT             = 0x00000000};
enum {DEBUG_FORMAT_WRITE_CAB           = 0x20000000};
enum {DEBUG_FORMAT_CAB_SECONDARY_FILES = 0x40000000};
enum {DEBUG_FORMAT_NO_OVERWRITE        = 0x80000000};
enum {DEBUG_FORMAT_USER_SMALL_FULL_MEMORY               = 0x00000001};
enum {DEBUG_FORMAT_USER_SMALL_HANDLE_DATA               = 0x00000002};
enum {DEBUG_FORMAT_USER_SMALL_UNLOADED_MODULES          = 0x00000004};
enum {DEBUG_FORMAT_USER_SMALL_INDIRECT_MEMORY           = 0x00000008};
enum {DEBUG_FORMAT_USER_SMALL_DATA_SEGMENTS             = 0x00000010};
enum {DEBUG_FORMAT_USER_SMALL_FILTER_MEMORY             = 0x00000020};
enum {DEBUG_FORMAT_USER_SMALL_FILTER_PATHS              = 0x00000040};
enum {DEBUG_FORMAT_USER_SMALL_PROCESS_THREAD_DATA       = 0x00000080};
enum {DEBUG_FORMAT_USER_SMALL_PRIVATE_READ_WRITE_MEMORY = 0x00000100};
enum {DEBUG_FORMAT_USER_SMALL_NO_OPTIONAL_DATA          = 0x00000200};
enum {DEBUG_FORMAT_USER_SMALL_FULL_MEMORY_INFO          = 0x00000400};
enum {DEBUG_FORMAT_USER_SMALL_THREAD_INFO               = 0x00000800};
enum {DEBUG_FORMAT_USER_SMALL_CODE_SEGMENTS             = 0x00001000};
enum {DEBUG_FORMAT_USER_SMALL_NO_AUXILIARY_STATE        = 0x00002000};
enum {DEBUG_FORMAT_USER_SMALL_FULL_AUXILIARY_STATE      = 0x00004000};
enum {DEBUG_DUMP_FILE_BASE           = 0xffffffff};
enum {DEBUG_DUMP_FILE_PAGE_FILE_DUMP = 0x00000000};
///////////////////////////////////////////////////////////
[
	object,
	uuid(edbed635-372e-4dab-bbfe-ed0d2f63be81),
	helpstring("IDebugClient2")
]
interface IDebugClient2 : IUnknown {
	HRESULT AttachKernel([in]  unsigned long Flags,[in,optional] const char* ConnectOptions );
	HRESULT GetKernelConnectionOptions([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptions([in]  const char* Options );
	HRESULT StartProcessServer([in]  unsigned long Flags,[in] const char* Options,[in,optional] PVOID Reserved );
	HRESULT ConnectProcessServer([in]  const char* RemoteOptions,[out] unsigned __int64* Server );
	HRESULT DisconnectProcessServer([in]  unsigned __int64 Server );
	HRESULT GetRunningProcessSystemIds([in]  unsigned __int64 Server,[out,optional] unsigned long* Ids,[in,optional] unsigned long Count,[out,optional] unsigned long* ActualCount );
	HRESULT GetRunningProcessSystemIdByExecutableName([in]  unsigned __int64 Server,[in] const char* ExeName,[in] unsigned long Flags,[out] unsigned long* Id );
	HRESULT GetRunningProcessDescription([in]  unsigned __int64 Server,[in] unsigned long SystemId,[in] unsigned long Flags,[out,optional] char* ExeName,[in,optional] unsigned long ExeNameSize,[out,optional] unsigned long* ActualExeNameSize,[out,optional] char* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* ActualDescriptionSize );
	HRESULT AttachProcess([in]  unsigned __int64 Server,[in] unsigned long ProcessId,[in] unsigned long AttachFlags );
	HRESULT CreateProcess([in]  unsigned __int64 Server,[in] char* CommandLine,[in] unsigned long CreateFlags );
	HRESULT CreateProcessAndAttach([in]  unsigned __int64 Server,[in,optional] char* CommandLine,[in,optional] unsigned long CreateFlags,[in,optional] unsigned long ProcessId,[in,optional] unsigned long AttachFlags );
	HRESULT GetProcessOptions([out]  unsigned long* Options );
	HRESULT AddProcessOptions([in]  unsigned long Options );
	HRESULT RemoveProcessOptions([in]  unsigned long Options );
	HRESULT SetProcessOptions([in]  unsigned long Options );
	HRESULT OpenDumpFile([in]  const char* DumpFile );
	HRESULT WriteDumpFile([in]  const char* DumpFile,[in] unsigned long Qualifier );
	HRESULT ConnectSession([in]  unsigned long Flags,[in] unsigned long HistoryLimit );
	HRESULT StartServer([in]  const char* Options );
	HRESULT OutputServers([in]  unsigned long OutputControl,[in] const char* Machine,[in] unsigned long Flags );
	HRESULT TerminateProcesses(  );
	HRESULT DetachProcesses(  );
	HRESULT EndSession([in]  unsigned long Flags );
	HRESULT GetExitCode([out]  unsigned long* Code );
	HRESULT DispatchCallbacks([in]  unsigned long Timeout );
	HRESULT ExitDispatch([in]  IDebugClient* Client );
	HRESULT CreateClient([out]  IDebugClient** Client );
	HRESULT GetInputCallbacks([out]  IDebugInputCallbacks** Callbacks );
	HRESULT SetInputCallbacks([in,optional]  IDebugInputCallbacks* Callbacks );
	HRESULT GetOutputCallbacks([out]  IDebugOutputCallbacks** Callbacks );
	HRESULT SetOutputCallbacks([in,optional]  IDebugOutputCallbacks* Callbacks );
	HRESULT GetOutputMask([out]  unsigned long* Mask );
	HRESULT SetOutputMask([in]  unsigned long Mask );
	HRESULT GetOtherOutputMask([in]  IDebugClient* Client,[out] unsigned long* Mask );
	HRESULT SetOtherOutputMask([in]  IDebugClient* Client,[in] unsigned long Mask );
	HRESULT GetOutputWidth([out]  unsigned long* Columns );
	HRESULT SetOutputWidth([in]  unsigned long Columns );
	HRESULT GetOutputLinePrefix([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefix([in,optional]  const char* Prefix );
	HRESULT GetIdentity([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* IdentitySize );
	HRESULT OutputIdentity([in]  unsigned long OutputControl,[in] unsigned long Flags,[in] const char* Format );
	HRESULT GetEventCallbacks([out]  IDebugEventCallbacks** Callbacks );
	HRESULT SetEventCallbacks([in,optional]  IDebugEventCallbacks* Callbacks );
	HRESULT FlushCallbacks(  );
	HRESULT WriteDumpFile2([in]  const char* DumpFile,[in] unsigned long Qualifier,[in] unsigned long FormatFlags,[in,optional] const char* Comment );
	HRESULT AddDumpInformationFile([in]  const char* InfoFile,[in] unsigned long Type );
	HRESULT EndProcessServer([in]  unsigned __int64 Server );
	HRESULT WaitForProcessServerEnd([in]  unsigned long Timeout );
	HRESULT IsKernelDebuggerEnabled(  );
	HRESULT TerminateCurrentProcess(  );
	HRESULT DetachCurrentProcess(  );
	HRESULT AbandonCurrentProcess(  );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(dd492d7f-71b8-4ad6-a8dc-1c887479ff91),
	helpstring("IDebugClient3")
]
interface IDebugClient3 : IUnknown {
	HRESULT AttachKernel([in]  unsigned long Flags,[in,optional] const char* ConnectOptions );
	HRESULT GetKernelConnectionOptions([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptions([in]  const char* Options );
	HRESULT StartProcessServer([in]  unsigned long Flags,[in] const char* Options,[in,optional] PVOID Reserved );
	HRESULT ConnectProcessServer([in]  const char* RemoteOptions,[out] unsigned __int64* Server );
	HRESULT DisconnectProcessServer([in]  unsigned __int64 Server );
	HRESULT GetRunningProcessSystemIds([in]  unsigned __int64 Server,[out,optional] unsigned long* Ids,[in,optional] unsigned long Count,[out,optional] unsigned long* ActualCount );
	HRESULT GetRunningProcessSystemIdByExecutableName([in]  unsigned __int64 Server,[in] const char* ExeName,[in] unsigned long Flags,[out] unsigned long* Id );
	HRESULT GetRunningProcessDescription([in]  unsigned __int64 Server,[in] unsigned long SystemId,[in] unsigned long Flags,[out,optional] char* ExeName,[in,optional] unsigned long ExeNameSize,[out,optional] unsigned long* ActualExeNameSize,[out,optional] char* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* ActualDescriptionSize );
	HRESULT AttachProcess([in]  unsigned __int64 Server,[in] unsigned long ProcessId,[in] unsigned long AttachFlags );
	HRESULT CreateProcess([in]  unsigned __int64 Server,[in] char* CommandLine,[in] unsigned long CreateFlags );
	HRESULT CreateProcessAndAttach([in]  unsigned __int64 Server,[in,optional] char* CommandLine,[in,optional] unsigned long CreateFlags,[in,optional] unsigned long ProcessId,[in,optional] unsigned long AttachFlags );
	HRESULT GetProcessOptions([out]  unsigned long* Options );
	HRESULT AddProcessOptions([in]  unsigned long Options );
	HRESULT RemoveProcessOptions([in]  unsigned long Options );
	HRESULT SetProcessOptions([in]  unsigned long Options );
	HRESULT OpenDumpFile([in]  const char* DumpFile );
	HRESULT WriteDumpFile([in]  const char* DumpFile,[in] unsigned long Qualifier );
	HRESULT ConnectSession([in]  unsigned long Flags,[in] unsigned long HistoryLimit );
	HRESULT StartServer([in]  const char* Options );
	HRESULT OutputServers([in]  unsigned long OutputControl,[in] const char* Machine,[in] unsigned long Flags );
	HRESULT TerminateProcesses(  );
	HRESULT DetachProcesses(  );
	HRESULT EndSession([in]  unsigned long Flags );
	HRESULT GetExitCode([out]  unsigned long* Code );
	HRESULT DispatchCallbacks([in]  unsigned long Timeout );
	HRESULT ExitDispatch([in]  IDebugClient* Client );
	HRESULT CreateClient([out]  IDebugClient** Client );
	HRESULT GetInputCallbacks([out]  IDebugInputCallbacks** Callbacks );
	HRESULT SetInputCallbacks([in,optional]  IDebugInputCallbacks* Callbacks );
	HRESULT GetOutputCallbacks([out]  IDebugOutputCallbacks** Callbacks );
	HRESULT SetOutputCallbacks([in,optional]  IDebugOutputCallbacks* Callbacks );
	HRESULT GetOutputMask([out]  unsigned long* Mask );
	HRESULT SetOutputMask([in]  unsigned long Mask );
	HRESULT GetOtherOutputMask([in]  IDebugClient* Client,[out] unsigned long* Mask );
	HRESULT SetOtherOutputMask([in]  IDebugClient* Client,[in] unsigned long Mask );
	HRESULT GetOutputWidth([out]  unsigned long* Columns );
	HRESULT SetOutputWidth([in]  unsigned long Columns );
	HRESULT GetOutputLinePrefix([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefix([in,optional]  const char* Prefix );
	HRESULT GetIdentity([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* IdentitySize );
	HRESULT OutputIdentity([in]  unsigned long OutputControl,[in] unsigned long Flags,[in] const char* Format );
	HRESULT GetEventCallbacks([out]  IDebugEventCallbacks** Callbacks );
	HRESULT SetEventCallbacks([in,optional]  IDebugEventCallbacks* Callbacks );
	HRESULT FlushCallbacks(  );
	HRESULT WriteDumpFile2([in]  const char* DumpFile,[in] unsigned long Qualifier,[in] unsigned long FormatFlags,[in,optional] const char* Comment );
	HRESULT AddDumpInformationFile([in]  const char* InfoFile,[in] unsigned long Type );
	HRESULT EndProcessServer([in]  unsigned __int64 Server );
	HRESULT WaitForProcessServerEnd([in]  unsigned long Timeout );
	HRESULT IsKernelDebuggerEnabled(  );
	HRESULT TerminateCurrentProcess(  );
	HRESULT DetachCurrentProcess(  );
	HRESULT AbandonCurrentProcess(  );
	HRESULT GetRunningProcessSystemIdByExecutableNameWide([in]  unsigned __int64 Server,[in] const wchar_t* ExeName,[in] unsigned long Flags,[out] unsigned long* Id );
	HRESULT GetRunningProcessDescriptionWide([in]  unsigned __int64 Server,[in] unsigned long SystemId,[in] unsigned long Flags,[out,optional] wchar_t* ExeName,[in,optional] unsigned long ExeNameSize,[out,optional] unsigned long* ActualExeNameSize,[out,optional] wchar_t* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* ActualDescriptionSize );
	HRESULT CreateProcessWide([in]  unsigned __int64 Server,[in] wchar_t* CommandLine,[in] unsigned long CreateFlags );
	HRESULT CreateProcessAndAttachWide([in]  unsigned __int64 Server,[in,optional] wchar_t* CommandLine,[in,optional] unsigned long CreateFlags,[in,optional] unsigned long ProcessId,[in,optional] unsigned long AttachFlags );
};

enum {DEBUG_DUMP_FILE_LOAD_FAILED_INDEX  = 0xffffffff};
enum {DEBUG_DUMP_FILE_ORIGINAL_CAB_INDEX = 0xfffffffe};
///////////////////////////////////////////////////////////
[
	object,
	uuid(ca83c3de-5089-4cf8-93c8-d892387f2a5e),
	helpstring("IDebugClient4")
]
interface IDebugClient4 : IUnknown {
	HRESULT AttachKernel([in]  unsigned long Flags,[in,optional] const char* ConnectOptions );
	HRESULT GetKernelConnectionOptions([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptions([in]  const char* Options );
	HRESULT StartProcessServer([in]  unsigned long Flags,[in] const char* Options,[in,optional] PVOID Reserved );
	HRESULT ConnectProcessServer([in]  const char* RemoteOptions,[out] unsigned __int64* Server );
	HRESULT DisconnectProcessServer([in]  unsigned __int64 Server );
	HRESULT GetRunningProcessSystemIds([in]  unsigned __int64 Server,[out,optional] unsigned long* Ids,[in,optional] unsigned long Count,[out,optional] unsigned long* ActualCount );
	HRESULT GetRunningProcessSystemIdByExecutableName([in]  unsigned __int64 Server,[in] const char* ExeName,[in] unsigned long Flags,[out] unsigned long* Id );
	HRESULT GetRunningProcessDescription([in]  unsigned __int64 Server,[in] unsigned long SystemId,[in] unsigned long Flags,[out,optional] char* ExeName,[in,optional] unsigned long ExeNameSize,[out,optional] unsigned long* ActualExeNameSize,[out,optional] char* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* ActualDescriptionSize );
	HRESULT AttachProcess([in]  unsigned __int64 Server,[in] unsigned long ProcessId,[in] unsigned long AttachFlags );
	HRESULT CreateProcess([in]  unsigned __int64 Server,[in] char* CommandLine,[in] unsigned long CreateFlags );
	HRESULT CreateProcessAndAttach([in]  unsigned __int64 Server,[in,optional] char* CommandLine,[in,optional] unsigned long CreateFlags,[in,optional] unsigned long ProcessId,[in,optional] unsigned long AttachFlags );
	HRESULT GetProcessOptions([out]  unsigned long* Options );
	HRESULT AddProcessOptions([in]  unsigned long Options );
	HRESULT RemoveProcessOptions([in]  unsigned long Options );
	HRESULT SetProcessOptions([in]  unsigned long Options );
	HRESULT OpenDumpFile([in]  const char* DumpFile );
	HRESULT WriteDumpFile([in]  const char* DumpFile,[in] unsigned long Qualifier );
	HRESULT ConnectSession([in]  unsigned long Flags,[in] unsigned long HistoryLimit );
	HRESULT StartServer([in]  const char* Options );
	HRESULT OutputServers([in]  unsigned long OutputControl,[in] const char* Machine,[in] unsigned long Flags );
	HRESULT TerminateProcesses(  );
	HRESULT DetachProcesses(  );
	HRESULT EndSession([in]  unsigned long Flags );
	HRESULT GetExitCode([out]  unsigned long* Code );
	HRESULT DispatchCallbacks([in]  unsigned long Timeout );
	HRESULT ExitDispatch([in]  IDebugClient* Client );
	HRESULT CreateClient([out]  IDebugClient** Client );
	HRESULT GetInputCallbacks([out]  IDebugInputCallbacks** Callbacks );
	HRESULT SetInputCallbacks([in,optional]  IDebugInputCallbacks* Callbacks );
	HRESULT GetOutputCallbacks([out]  IDebugOutputCallbacks** Callbacks );
	HRESULT SetOutputCallbacks([in,optional]  IDebugOutputCallbacks* Callbacks );
	HRESULT GetOutputMask([out]  unsigned long* Mask );
	HRESULT SetOutputMask([in]  unsigned long Mask );
	HRESULT GetOtherOutputMask([in]  IDebugClient* Client,[out] unsigned long* Mask );
	HRESULT SetOtherOutputMask([in]  IDebugClient* Client,[in] unsigned long Mask );
	HRESULT GetOutputWidth([out]  unsigned long* Columns );
	HRESULT SetOutputWidth([in]  unsigned long Columns );
	HRESULT GetOutputLinePrefix([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefix([in,optional]  const char* Prefix );
	HRESULT GetIdentity([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* IdentitySize );
	HRESULT OutputIdentity([in]  unsigned long OutputControl,[in] unsigned long Flags,[in] const char* Format );
	HRESULT GetEventCallbacks([out]  IDebugEventCallbacks** Callbacks );
	HRESULT SetEventCallbacks([in,optional]  IDebugEventCallbacks* Callbacks );
	HRESULT FlushCallbacks(  );
	HRESULT WriteDumpFile2([in]  const char* DumpFile,[in] unsigned long Qualifier,[in] unsigned long FormatFlags,[in,optional] const char* Comment );
	HRESULT AddDumpInformationFile([in]  const char* InfoFile,[in] unsigned long Type );
	HRESULT EndProcessServer([in]  unsigned __int64 Server );
	HRESULT WaitForProcessServerEnd([in]  unsigned long Timeout );
	HRESULT IsKernelDebuggerEnabled(  );
	HRESULT TerminateCurrentProcess(  );
	HRESULT DetachCurrentProcess(  );
	HRESULT AbandonCurrentProcess(  );
	HRESULT GetRunningProcessSystemIdByExecutableNameWide([in]  unsigned __int64 Server,[in] const wchar_t* ExeName,[in] unsigned long Flags,[out] unsigned long* Id );
	HRESULT GetRunningProcessDescriptionWide([in]  unsigned __int64 Server,[in] unsigned long SystemId,[in] unsigned long Flags,[out,optional] wchar_t* ExeName,[in,optional] unsigned long ExeNameSize,[out,optional] unsigned long* ActualExeNameSize,[out,optional] wchar_t* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* ActualDescriptionSize );
	HRESULT CreateProcessWide([in]  unsigned __int64 Server,[in] wchar_t* CommandLine,[in] unsigned long CreateFlags );
	HRESULT CreateProcessAndAttachWide([in]  unsigned __int64 Server,[in,optional] wchar_t* CommandLine,[in,optional] unsigned long CreateFlags,[in,optional] unsigned long ProcessId,[in,optional] unsigned long AttachFlags );
	HRESULT OpenDumpFileWide([in,optional]  const wchar_t* FileName,[in,optional] unsigned __int64 FileHandle );
	HRESULT WriteDumpFileWide([in,optional]  const wchar_t* FileName,[in,optional] unsigned __int64 FileHandle,[in,optional] unsigned long Qualifier,[in,optional] unsigned long FormatFlags,[in,optional] const wchar_t* Comment );
	HRESULT AddDumpInformationFileWide([in,optional]  const wchar_t* FileName,[in,optional] unsigned __int64 FileHandle,[in,optional] unsigned long Type );
	HRESULT GetNumberDumpFiles([out]  unsigned long* Number );
	HRESULT GetDumpFile([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize,[out,optional] unsigned __int64* Handle,[out,optional] unsigned long* Type );
	HRESULT GetDumpFileWide([in]  unsigned long Index,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize,[out,optional] unsigned __int64* Handle,[out,optional] unsigned long* Type );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(e3acb9d7-7ec2-4f0c-a0da-e81e0cbbe628),
	helpstring("IDebugClient5")
]
interface IDebugClient5 : IUnknown {
	HRESULT AttachKernel([in]  unsigned long Flags,[in,optional] const char* ConnectOptions );
	HRESULT GetKernelConnectionOptions([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptions([in]  const char* Options );
	HRESULT StartProcessServer([in]  unsigned long Flags,[in] const char* Options,[in,optional] PVOID Reserved );
	HRESULT ConnectProcessServer([in]  const char* RemoteOptions,[out] unsigned __int64* Server );
	HRESULT DisconnectProcessServer([in]  unsigned __int64 Server );
	HRESULT GetRunningProcessSystemIds([in]  unsigned __int64 Server,[out,optional] unsigned long* Ids,[in,optional] unsigned long Count,[out,optional] unsigned long* ActualCount );
	HRESULT GetRunningProcessSystemIdByExecutableName([in]  unsigned __int64 Server,[in] const char* ExeName,[in] unsigned long Flags,[out] unsigned long* Id );
	HRESULT GetRunningProcessDescription([in]  unsigned __int64 Server,[in] unsigned long SystemId,[in] unsigned long Flags,[out,optional] char* ExeName,[in,optional] unsigned long ExeNameSize,[out,optional] unsigned long* ActualExeNameSize,[out,optional] char* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* ActualDescriptionSize );
	HRESULT AttachProcess([in]  unsigned __int64 Server,[in] unsigned long ProcessId,[in] unsigned long AttachFlags );
	HRESULT CreateProcess([in]  unsigned __int64 Server,[in] char* CommandLine,[in] unsigned long CreateFlags );
	HRESULT CreateProcessAndAttach([in]  unsigned __int64 Server,[in,optional] char* CommandLine,[in,optional] unsigned long CreateFlags,[in,optional] unsigned long ProcessId,[in,optional] unsigned long AttachFlags );
	HRESULT GetProcessOptions([out]  unsigned long* Options );
	HRESULT AddProcessOptions([in]  unsigned long Options );
	HRESULT RemoveProcessOptions([in]  unsigned long Options );
	HRESULT SetProcessOptions([in]  unsigned long Options );
	HRESULT OpenDumpFile([in]  const char* DumpFile );
	HRESULT WriteDumpFile([in]  const char* DumpFile,[in] unsigned long Qualifier );
	HRESULT ConnectSession([in]  unsigned long Flags,[in] unsigned long HistoryLimit );
	HRESULT StartServer([in]  const char* Options );
	HRESULT OutputServers([in]  unsigned long OutputControl,[in] const char* Machine,[in] unsigned long Flags );
	HRESULT TerminateProcesses(  );
	HRESULT DetachProcesses(  );
	HRESULT EndSession([in]  unsigned long Flags );
	HRESULT GetExitCode([out]  unsigned long* Code );
	HRESULT DispatchCallbacks([in]  unsigned long Timeout );
	HRESULT ExitDispatch([in]  IDebugClient* Client );
	HRESULT CreateClient([out]  IDebugClient** Client );
	HRESULT GetInputCallbacks([out]  IDebugInputCallbacks** Callbacks );
	HRESULT SetInputCallbacks([in,optional]  IDebugInputCallbacks* Callbacks );
	HRESULT GetOutputCallbacks([out]  IDebugOutputCallbacks** Callbacks );
	HRESULT SetOutputCallbacks([in,optional]  IDebugOutputCallbacks* Callbacks );
	HRESULT GetOutputMask([out]  unsigned long* Mask );
	HRESULT SetOutputMask([in]  unsigned long Mask );
	HRESULT GetOtherOutputMask([in]  IDebugClient* Client,[out] unsigned long* Mask );
	HRESULT SetOtherOutputMask([in]  IDebugClient* Client,[in] unsigned long Mask );
	HRESULT GetOutputWidth([out]  unsigned long* Columns );
	HRESULT SetOutputWidth([in]  unsigned long Columns );
	HRESULT GetOutputLinePrefix([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefix([in,optional]  const char* Prefix );
	HRESULT GetIdentity([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* IdentitySize );
	HRESULT OutputIdentity([in]  unsigned long OutputControl,[in] unsigned long Flags,[in] const char* Format );
	HRESULT GetEventCallbacks([out]  IDebugEventCallbacks** Callbacks );
	HRESULT SetEventCallbacks([in,optional]  IDebugEventCallbacks* Callbacks );
	HRESULT FlushCallbacks(  );
	HRESULT WriteDumpFile2([in]  const char* DumpFile,[in] unsigned long Qualifier,[in] unsigned long FormatFlags,[in,optional] const char* Comment );
	HRESULT AddDumpInformationFile([in]  const char* InfoFile,[in] unsigned long Type );
	HRESULT EndProcessServer([in]  unsigned __int64 Server );
	HRESULT WaitForProcessServerEnd([in]  unsigned long Timeout );
	HRESULT IsKernelDebuggerEnabled(  );
	HRESULT TerminateCurrentProcess(  );
	HRESULT DetachCurrentProcess(  );
	HRESULT AbandonCurrentProcess(  );
	HRESULT GetRunningProcessSystemIdByExecutableNameWide([in]  unsigned __int64 Server,[in] const wchar_t* ExeName,[in] unsigned long Flags,[out] unsigned long* Id );
	HRESULT GetRunningProcessDescriptionWide([in]  unsigned __int64 Server,[in] unsigned long SystemId,[in] unsigned long Flags,[out,optional] wchar_t* ExeName,[in,optional] unsigned long ExeNameSize,[out,optional] unsigned long* ActualExeNameSize,[out,optional] wchar_t* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* ActualDescriptionSize );
	HRESULT CreateProcessWide([in]  unsigned __int64 Server,[in] wchar_t* CommandLine,[in] unsigned long CreateFlags );
	HRESULT CreateProcessAndAttachWide([in]  unsigned __int64 Server,[in,optional] wchar_t* CommandLine,[in,optional] unsigned long CreateFlags,[in,optional] unsigned long ProcessId,[in,optional] unsigned long AttachFlags );
	HRESULT OpenDumpFileWide([in,optional]  const wchar_t* FileName,[in,optional] unsigned __int64 FileHandle );
	HRESULT WriteDumpFileWide([in,optional]  const wchar_t* FileName,[in,optional] unsigned __int64 FileHandle,[in,optional] unsigned long Qualifier,[in,optional] unsigned long FormatFlags,[in,optional] const wchar_t* Comment );
	HRESULT AddDumpInformationFileWide([in,optional]  const wchar_t* FileName,[in,optional] unsigned __int64 FileHandle,[in,optional] unsigned long Type );
	HRESULT GetNumberDumpFiles([out]  unsigned long* Number );
	HRESULT GetDumpFile([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize,[out,optional] unsigned __int64* Handle,[out,optional] unsigned long* Type );
	HRESULT GetDumpFileWide([in]  unsigned long Index,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize,[out,optional] unsigned __int64* Handle,[out,optional] unsigned long* Type );
	HRESULT AttachKernelWide([in]  unsigned long Flags,[in,optional] const wchar_t* ConnectOptions );
	HRESULT GetKernelConnectionOptionsWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* OptionsSize );
	HRESULT SetKernelConnectionOptionsWide([in]  const wchar_t* Options );
	HRESULT StartProcessServerWide([in]  unsigned long Flags,[in] const wchar_t* Options,[in,optional] PVOID Reserved );
	HRESULT ConnectProcessServerWide([in]  const wchar_t* RemoteOptions,[out] unsigned __int64* Server );
	HRESULT StartServerWide([in]  const wchar_t* Options );
	HRESULT OutputServersWide([in]  unsigned long OutputControl,[in] const wchar_t* Machine,[in] unsigned long Flags );
	HRESULT GetOutputCallbacksWide([out]  IDebugOutputCallbacksWide** Callbacks );
	HRESULT SetOutputCallbacksWide([in]  IDebugOutputCallbacksWide* Callbacks );
	HRESULT GetOutputLinePrefixWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PrefixSize );
	HRESULT SetOutputLinePrefixWide([in,optional]  const wchar_t* Prefix );
	HRESULT GetIdentityWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* IdentitySize );
	HRESULT OutputIdentityWide([in]  unsigned long OutputControl,[in] unsigned long Flags,[in] const wchar_t* Format );
	HRESULT GetEventCallbacksWide([out]  IDebugEventCallbacksWide** Callbacks );
	HRESULT SetEventCallbacksWide([in]  IDebugEventCallbacksWide* Callbacks );
	HRESULT CreateProcess2([in]  unsigned __int64 Server,[in] char* CommandLine,[in] PVOID OptionsBuffer,[in] unsigned long OptionsBufferSize,[in,optional] const char* InitialDirectory,[in,optional] const char* Environment );
	HRESULT CreateProcess2Wide([in]  unsigned __int64 Server,[in] wchar_t* CommandLine,[in] PVOID OptionsBuffer,[in] unsigned long OptionsBufferSize,[in,optional] const wchar_t* InitialDirectory,[in,optional] const wchar_t* Environment );
	HRESULT CreateProcessAndAttach2([in]  unsigned __int64 Server,[in,optional] char* CommandLine,[in,optional] PVOID OptionsBuffer,[in,optional] unsigned long OptionsBufferSize,[in,optional] const char* InitialDirectory,[in,optional] const char* Environment,[in,optional] unsigned long ProcessId,[in,optional] unsigned long AttachFlags );
	HRESULT CreateProcessAndAttach2Wide([in]  unsigned __int64 Server,[in,optional] wchar_t* CommandLine,[in,optional] PVOID OptionsBuffer,[in,optional] unsigned long OptionsBufferSize,[in,optional] const wchar_t* InitialDirectory,[in,optional] const wchar_t* Environment,[in,optional] unsigned long ProcessId,[in,optional] unsigned long AttachFlags );
	HRESULT PushOutputLinePrefix([in,optional]  const char* NewPrefix,[out,optional] unsigned __int64* Handle );
	HRESULT PushOutputLinePrefixWide([in,optional]  const wchar_t* NewPrefix,[out,optional] unsigned __int64* Handle );
	HRESULT PopOutputLinePrefix([in]  unsigned __int64 Handle );
	HRESULT GetNumberInputCallbacks([out]  unsigned long* Count );
	HRESULT GetNumberOutputCallbacks([out]  unsigned long* Count );
	HRESULT GetNumberEventCallbacks([in]  unsigned long EventFlags,[out] unsigned long* Count );
	HRESULT GetQuitLockString([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* StringSize );
	HRESULT SetQuitLockString([in]  const char* String );
	HRESULT GetQuitLockStringWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* StringSize );
	HRESULT SetQuitLockStringWide([in]  const wchar_t* String );
};

enum {DEBUG_STATUS_NO_CHANGE           = 0};
enum {DEBUG_STATUS_GO                  = 1};
enum {DEBUG_STATUS_GO_HANDLED          = 2};
enum {DEBUG_STATUS_GO_NOT_HANDLED      = 3};
enum {DEBUG_STATUS_STEP_OVER           = 4};
enum {DEBUG_STATUS_STEP_INTO           = 5};
enum {DEBUG_STATUS_BREAK               = 6};
enum {DEBUG_STATUS_NO_DEBUGGEE         = 7};
enum {DEBUG_STATUS_STEP_BRANCH         = 8};
enum {DEBUG_STATUS_IGNORE_EVENT        = 9};
enum {DEBUG_STATUS_RESTART_REQUESTED   = 10};
enum {DEBUG_STATUS_REVERSE_GO          = 11};
enum {DEBUG_STATUS_REVERSE_STEP_BRANCH = 12};
enum {DEBUG_STATUS_REVERSE_STEP_OVER   = 13};
enum {DEBUG_STATUS_REVERSE_STEP_INTO   = 14};
enum {DEBUG_STATUS_MASK                = 0xf};
enum {DEBUG_OUTCTL_THIS_CLIENT       = 0x00000000};
enum {DEBUG_OUTCTL_ALL_CLIENTS       = 0x00000001};
enum {DEBUG_OUTCTL_ALL_OTHER_CLIENTS = 0x00000002};
enum {DEBUG_OUTCTL_IGNORE            = 0x00000003};
enum {DEBUG_OUTCTL_LOG_ONLY          = 0x00000004};
enum {DEBUG_OUTCTL_SEND_MASK         = 0x00000007};
enum {DEBUG_OUTCTL_NOT_LOGGED        = 0x00000008};
enum {DEBUG_OUTCTL_OVERRIDE_MASK     = 0x00000010};
enum {DEBUG_OUTCTL_DML               = 0x00000020};
enum {DEBUG_OUTCTL_AMBIENT_DML       = 0xfffffffe};
enum {DEBUG_OUTCTL_AMBIENT_TEXT      = 0xffffffff};
enum {DEBUG_INTERRUPT_ACTIVE  = 0};
enum {DEBUG_INTERRUPT_PASSIVE = 1};
enum {DEBUG_INTERRUPT_EXIT    = 2};
enum {DEBUG_CURRENT_DEFAULT     = 0x0000000f};
enum {DEBUG_CURRENT_SYMBOL      = 0x00000001};
enum {DEBUG_CURRENT_DISASM      = 0x00000002};
enum {DEBUG_CURRENT_REGISTERS   = 0x00000004};
enum {DEBUG_CURRENT_SOURCE_LINE = 0x00000008};
enum {DEBUG_DISASM_EFFECTIVE_ADDRESS  = 0x00000001};
enum {DEBUG_DISASM_MATCHING_SYMBOLS   = 0x00000002};
enum {DEBUG_DISASM_SOURCE_LINE_NUMBER = 0x00000004};
enum {DEBUG_DISASM_SOURCE_FILE_NAME   = 0x00000008};
enum {DEBUG_LEVEL_SOURCE   = 0};
enum {DEBUG_LEVEL_ASSEMBLY = 1};
enum {DEBUG_ENGOPT_IGNORE_DBGHELP_VERSION      = 0x00000001};
enum {DEBUG_ENGOPT_IGNORE_EXTENSION_VERSIONS   = 0x00000002};
enum {DEBUG_ENGOPT_ALLOW_NETWORK_PATHS         = 0x00000004};
enum {DEBUG_ENGOPT_DISALLOW_NETWORK_PATHS      = 0x00000008};
enum {DEBUG_ENGOPT_IGNORE_LOADER_EXCEPTIONS    = 0x00000010};
enum {DEBUG_ENGOPT_INITIAL_BREAK               = 0x00000020};
enum {DEBUG_ENGOPT_INITIAL_MODULE_BREAK        = 0x00000040};
enum {DEBUG_ENGOPT_FINAL_BREAK                 = 0x00000080};
enum {DEBUG_ENGOPT_NO_EXECUTE_REPEAT           = 0x00000100};
enum {DEBUG_ENGOPT_FAIL_INCOMPLETE_INFORMATION = 0x00000200};
enum {DEBUG_ENGOPT_ALLOW_READ_ONLY_BREAKPOINTS = 0x00000400};
enum {DEBUG_ENGOPT_SYNCHRONIZE_BREAKPOINTS     = 0x00000800};
enum {DEBUG_ENGOPT_DISALLOW_SHELL_COMMANDS     = 0x00001000};
enum {DEBUG_ENGOPT_KD_QUIET_MODE               = 0x00002000};
enum {DEBUG_ENGOPT_DISABLE_MANAGED_SUPPORT     = 0x00004000};
enum {DEBUG_ENGOPT_DISABLE_MODULE_SYMBOL_LOAD  = 0x00008000};
enum {DEBUG_ENGOPT_DISABLE_EXECUTION_COMMANDS  = 0x00010000};
enum {DEBUG_ENGOPT_DISALLOW_IMAGE_FILE_MAPPING = 0x00020000};
enum {DEBUG_ENGOPT_PREFER_DML                  = 0x00040000};
enum {DEBUG_ENGOPT_ALL                         = 0x0007FFFF};
enum {DEBUG_ANY_ID = 0xffffffff};
typedef struct _DEBUG_STACK_FRAME
{
    unsigned __int64 InstructionOffset;
    unsigned __int64 ReturnOffset;
    unsigned __int64 FrameOffset;
    unsigned __int64 StackOffset;
    unsigned __int64 FuncTableEntry;
    unsigned __int64 Params[4];
    unsigned __int64 Reserved[6];
    BOOL    Virtual;
    unsigned long   FrameNumber;
} DEBUG_STACK_FRAME, *PDEBUG_STACK_FRAME;
enum {DEBUG_STACK_ARGUMENTS               = 0x00000001};
enum {DEBUG_STACK_FUNCTION_INFO           = 0x00000002};
enum {DEBUG_STACK_SOURCE_LINE             = 0x00000004};
enum {DEBUG_STACK_FRAME_ADDRESSES         = 0x00000008};
enum {DEBUG_STACK_COLUMN_NAMES            = 0x00000010};
enum {DEBUG_STACK_NONVOLATILE_REGISTERS   = 0x00000020};
enum {DEBUG_STACK_FRAME_NUMBERS           = 0x00000040};
enum {DEBUG_STACK_PARAMETERS              = 0x00000080};
enum {DEBUG_STACK_FRAME_ADDRESSES_RA_ONLY = 0x00000100};
enum {DEBUG_STACK_FRAME_MEMORY_USAGE      = 0x00000200};
enum {DEBUG_STACK_PARAMETERS_NEWLINE      = 0x00000400};
enum {DEBUG_STACK_DML                     = 0x00000800};
enum {DEBUG_CLASS_UNINITIALIZED = 0};
enum {DEBUG_CLASS_KERNEL        = 1};
enum {DEBUG_CLASS_USER_WINDOWS  = 2};
enum {DEBUG_CLASS_IMAGE_FILE    = 3};
enum {DEBUG_DUMP_SMALL      = 1024};
enum {DEBUG_DUMP_DEFAULT    = 1025};
enum {DEBUG_DUMP_FULL       = 1026};
enum {DEBUG_DUMP_IMAGE_FILE = 1027};
enum {DEBUG_DUMP_TRACE_LOG  = 1028};
enum {DEBUG_DUMP_WINDOWS_CE = 1029};
enum {DEBUG_KERNEL_CONNECTION  = 0};
enum {DEBUG_KERNEL_LOCAL       = 1};
enum {DEBUG_KERNEL_EXDI_DRIVER = 2};
enum {DEBUG_USER_WINDOWS_PROCESS         = 0};
enum {DEBUG_USER_WINDOWS_PROCESS_SERVER  = 1};
enum {DEBUG_USER_WINDOWS_IDNA            = 2};
enum {DEBUG_EXTENSION_AT_ENGINE = 0x00000000};
enum {DEBUG_EXECUTE_DEFAULT    = 0x00000000};
enum {DEBUG_EXECUTE_ECHO       = 0x00000001};
enum {DEBUG_EXECUTE_NOT_LOGGED = 0x00000002};
enum {DEBUG_EXECUTE_NO_REPEAT  = 0x00000004};
enum {DEBUG_FILTER_CREATE_THREAD       = 0x00000000};
enum {DEBUG_FILTER_EXIT_THREAD         = 0x00000001};
enum {DEBUG_FILTER_CREATE_PROCESS      = 0x00000002};
enum {DEBUG_FILTER_EXIT_PROCESS        = 0x00000003};
enum {DEBUG_FILTER_LOAD_MODULE         = 0x00000004};
enum {DEBUG_FILTER_UNLOAD_MODULE       = 0x00000005};
enum {DEBUG_FILTER_SYSTEM_ERROR        = 0x00000006};
enum {DEBUG_FILTER_INITIAL_BREAKPOINT  = 0x00000007};
enum {DEBUG_FILTER_INITIAL_MODULE_LOAD = 0x00000008};
enum {DEBUG_FILTER_DEBUGGEE_OUTPUT     = 0x00000009};
enum {DEBUG_FILTER_BREAK               = 0x00000000};
enum {DEBUG_FILTER_SECOND_CHANCE_BREAK = 0x00000001};
enum {DEBUG_FILTER_OUTPUT              = 0x00000002};
enum {DEBUG_FILTER_IGNORE              = 0x00000003};
enum {DEBUG_FILTER_REMOVE              = 0x00000004};
enum {DEBUG_FILTER_GO_HANDLED          = 0x00000000};
enum {DEBUG_FILTER_GO_NOT_HANDLED      = 0x00000001};
typedef struct _DEBUG_SPECIFIC_FILTER_PARAMETERS
{
    unsigned long ExecutionOption;
    unsigned long ContinueOption;
    unsigned long TextSize;
    unsigned long CommandSize;
    // If ArgumentSize is zero this filter does
    // not have an argument.  An empty argument for
    // a filter which does have an argument will take
    // one byte for the terminator.
    unsigned long ArgumentSize;
} DEBUG_SPECIFIC_FILTER_PARAMETERS, *PDEBUG_SPECIFIC_FILTER_PARAMETERS;
typedef struct _DEBUG_EXCEPTION_FILTER_PARAMETERS
{
    unsigned long ExecutionOption;
    unsigned long ContinueOption;
    unsigned long TextSize;
    unsigned long CommandSize;
    unsigned long SecondCommandSize;
    unsigned long ExceptionCode;
} DEBUG_EXCEPTION_FILTER_PARAMETERS, *PDEBUG_EXCEPTION_FILTER_PARAMETERS;
enum {DEBUG_WAIT_DEFAULT = 0x00000000};
typedef struct _DEBUG_LAST_EVENT_INFO_BREAKPOINT
{
    unsigned long Id;
} DEBUG_LAST_EVENT_INFO_BREAKPOINT, *PDEBUG_LAST_EVENT_INFO_BREAKPOINT;
typedef struct _DEBUG_LAST_EVENT_INFO_EXCEPTION
{
    EXCEPTION_RECORD64 ExceptionRecord;
    unsigned long FirstChance;
} DEBUG_LAST_EVENT_INFO_EXCEPTION, *PDEBUG_LAST_EVENT_INFO_EXCEPTION;
typedef struct _DEBUG_LAST_EVENT_INFO_EXIT_THREAD
{
    unsigned long ExitCode;
} DEBUG_LAST_EVENT_INFO_EXIT_THREAD, *PDEBUG_LAST_EVENT_INFO_EXIT_THREAD;
typedef struct _DEBUG_LAST_EVENT_INFO_EXIT_PROCESS
{
    unsigned long ExitCode;
} DEBUG_LAST_EVENT_INFO_EXIT_PROCESS, *PDEBUG_LAST_EVENT_INFO_EXIT_PROCESS;
typedef struct _DEBUG_LAST_EVENT_INFO_LOAD_MODULE
{
    unsigned __int64 Base;
} DEBUG_LAST_EVENT_INFO_LOAD_MODULE, *PDEBUG_LAST_EVENT_INFO_LOAD_MODULE;
typedef struct _DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE
{
    unsigned __int64 Base;
} DEBUG_LAST_EVENT_INFO_UNLOAD_MODULE, *PDEBUG_LAST_EVENT_INFO_UNLOAD_MODULE;
typedef struct _DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR
{
    unsigned long Error;
    unsigned long Level;
} DEBUG_LAST_EVENT_INFO_SYSTEM_ERROR, *PDEBUG_LAST_EVENT_INFO_SYSTEM_ERROR;
enum {DEBUG_VALUE_INVALID      = 0};
enum {DEBUG_VALUE_INT8         = 1};
enum {DEBUG_VALUE_INT16        = 2};
enum {DEBUG_VALUE_INT32        = 3};
enum {DEBUG_VALUE_INT64        = 4};
enum {DEBUG_VALUE_FLOAT32      = 5};
enum {DEBUG_VALUE_FLOAT64      = 6};
enum {DEBUG_VALUE_FLOAT80      = 7};
enum {DEBUG_VALUE_FLOAT82      = 8};
enum {DEBUG_VALUE_FLOAT128     = 9};
enum {DEBUG_VALUE_VECTOR64     = 10};
enum {DEBUG_VALUE_VECTOR128    = 11};
enum {DEBUG_VALUE_TYPES        = 12};
typedef struct _DEBUG_VALUE
{
    union
    {
        UCHAR I8;
        USHORT I16;
        unsigned long I32;
        struct
        {
            // Extra NAT indicator for IA64
            // integer registers.  NAT will
            // always be false for other CPUs.
            unsigned __int64 I64;
            BOOL Nat;
        };
        float F32;
        double F64;
        UCHAR F80Bytes[10];
        UCHAR F82Bytes[11];
        UCHAR F128Bytes[16];
        // Vector interpretations.  The actual number
        // of valid elements depends on the vector length.
        UCHAR VI8[16];
        USHORT VI16[8];
        unsigned long VI32[4];
        unsigned __int64 VI64[2];
        float VF32[4];
        double VF64[2];
        struct
        {
            unsigned long LowPart;
            unsigned long HighPart;
        } I64Parts32;
        struct
        {
            unsigned __int64 LowPart;
            __int64 HighPart;
        } F128Parts64;
        // Allows raw byte access to content.  Array
        // can be indexed for as much data as Type
        // describes.  This array also serves to pad
        // the structure out to 32 bytes and reserves
        // space for future members.
        UCHAR RawBytes[24];
    }	u;
    unsigned long TailOfRawBytes;
  unsigned long Type;
} DEBUG_VALUE, *PDEBUG_VALUE;
///////////////////////////////////////////////////////////
[
	object,
	uuid(5182e668-105e-416e-ad92-24ef800424ba),
	helpstring("IDebugControl")
]
interface IDebugControl : IUnknown {
	HRESULT GetInterrupt(  );
	HRESULT SetInterrupt([in]  unsigned long Flags );
	HRESULT GetInterruptTimeout([out]  unsigned long* Seconds );
	HRESULT SetInterruptTimeout([in]  unsigned long Seconds );
	HRESULT GetLogFile([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FileSize,[out,optional] bool* Append );
	HRESULT OpenLogFile([in]  const char* File,[in] BOOL Append );
	HRESULT CloseLogFile(  );
	HRESULT GetLogMask([out]  unsigned long* Mask );
	HRESULT SetLogMask([in]  unsigned long Mask );
	HRESULT Input([out]  char* Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* InputSize );
	HRESULT ReturnInput([in]  const char* Buffer );
	HRESULT Output([in]  unsigned long Mask,[in] const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaList([in]  unsigned long Mask,[in] const char* Format,[in] char* Args );
	HRESULT ControlledOutput([in]  unsigned long OutputControl,[in] unsigned long Mask,[in] const char* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaList([in]  unsigned long OutputControl,[in] unsigned long Mask,[in] const char* Format,[in] char* Args );
	HRESULT OutputPrompt([in]  unsigned long OutputControl,[in,optional] const char* Format,[optional] SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaList([in]  unsigned long OutputControl,[in,optional] const char* Format,[in,optional] char* Args );
	HRESULT GetPromptText([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* TextSize );
	HRESULT OutputCurrentState([in]  unsigned long OutputControl,[in] unsigned long Flags );
	HRESULT OutputVersionInformation([in]  unsigned long OutputControl );
	HRESULT GetNotifyEventHandle([out]  unsigned __int64* Handle );
	HRESULT SetNotifyEventHandle([in]  unsigned __int64 Handle );
	HRESULT Assemble([in]  unsigned __int64 Offset,[in] const char* Instr,[out] unsigned __int64* EndOffset );
	HRESULT Disassemble([in]  unsigned __int64 Offset,[in] unsigned long Flags,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* DisassemblySize,[out,optional] unsigned __int64* EndOffset );
	HRESULT GetDisassembleEffectiveOffset([out]  unsigned __int64* Offset );
	HRESULT OutputDisassembly([in]  unsigned long OutputControl,[in] unsigned __int64 Offset,[in] unsigned long Flags,[out] unsigned __int64* EndOffset );
	HRESULT OutputDisassemblyLines([in]  unsigned long OutputControl,[in] unsigned long PreviousLines,[in] unsigned long TotalLines,[in] unsigned __int64 Offset,[in] unsigned long Flags,[out,optional] unsigned long* OffsetLine,[out,optional] unsigned __int64* StartOffset,[out,optional] unsigned __int64* EndOffset,[out,optional] unsigned __int64* LineOffsets );
	HRESULT GetNearInstruction([in]  unsigned __int64 Offset,[in] LONG Delta,[out] unsigned __int64* NearOffset );
	HRESULT GetStackTrace([in]  unsigned __int64 FrameOffset,[in] unsigned __int64 StackOffset,[in] unsigned __int64 InstructionOffset,[in,out] PDEBUG_STACK_FRAME Frames,[in] unsigned long FramesSize,[out,optional] unsigned long* FramesFilled );
	HRESULT GetReturnOffset([out]  unsigned __int64* Offset );
	HRESULT OutputStackTrace([in]  unsigned long OutputControl,[in,optional] PDEBUG_STACK_FRAME Frames,[in,optional] unsigned long FramesSize,[in,optional] unsigned long Flags );
	HRESULT GetDebuggeeType([out]  unsigned long* Class,[out] unsigned long* Qualifier );
	HRESULT GetActualProcessorType([out]  unsigned long* Type );
	HRESULT GetExecutingProcessorType([out]  unsigned long* Type );
	HRESULT GetNumberPossibleExecutingProcessorTypes([out]  unsigned long* Number );
	HRESULT GetPossibleExecutingProcessorTypes([in]  unsigned long Start,[in] unsigned long Count,[out] unsigned long* Types );
	HRESULT GetNumberProcessors([out]  unsigned long* Number );
	HRESULT GetSystemVersion([out]  unsigned long* PlatformId,[out] unsigned long* Major,[out] unsigned long* Minor,[out,optional] char* ServicePackString,[in,optional] unsigned long ServicePackStringSize,[out,optional] unsigned long* ServicePackStringUsed,[out,optional] unsigned long* ServicePackNumber,[out,optional] char* BuildString,[in,optional] unsigned long BuildStringSize,[out,optional] unsigned long* BuildStringUsed );
	HRESULT GetPageSize([out]  unsigned long* Size );
	HRESULT IsPointer64Bit(  );
	HRESULT ReadBugCheckData([out]  unsigned long* Code,[out] unsigned __int64* Arg1,[out] unsigned __int64* Arg2,[out] unsigned __int64* Arg3,[out] unsigned __int64* Arg4 );
	HRESULT GetNumberSupportedProcessorTypes([out]  unsigned long* Number );
	HRESULT GetSupportedProcessorTypes([in]  unsigned long Start,[in] unsigned long Count,[out] unsigned long* Types );
	HRESULT GetProcessorTypeNames([in]  unsigned long Type,[out,optional] char* FullNameBuffer,[in,optional] unsigned long FullNameBufferSize,[out,optional] unsigned long* FullNameSize,[out,optional] char* AbbrevNameBuffer,[in,optional] unsigned long AbbrevNameBufferSize,[out,optional] unsigned long* AbbrevNameSize );
	HRESULT GetEffectiveProcessorType([out]  unsigned long* Type );
	HRESULT SetEffectiveProcessorType([in]  unsigned long Type );
	HRESULT GetExecutionStatus([out]  unsigned long* Status );
	HRESULT SetExecutionStatus([in]  unsigned long Status );
	HRESULT GetCodeLevel([out]  unsigned long* Level );
	HRESULT SetCodeLevel([in]  unsigned long Level );
	HRESULT GetEngineOptions([out]  unsigned long* Options );
	HRESULT AddEngineOptions([in]  unsigned long Options );
	HRESULT RemoveEngineOptions([in]  unsigned long Options );
	HRESULT SetEngineOptions([in]  unsigned long Options );
	HRESULT GetSystemErrorControl([out]  unsigned long* OutputLevel,[out] unsigned long* BreakLevel );
	HRESULT SetSystemErrorControl([in]  unsigned long OutputLevel,[in] unsigned long BreakLevel );
	HRESULT GetTextMacro([in]  unsigned long Slot,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* MacroSize );
	HRESULT SetTextMacro([in]  unsigned long Slot,[in] const char* Macro );
	HRESULT GetRadix([out]  unsigned long* Radix );
	HRESULT SetRadix([in]  unsigned long Radix );
	HRESULT Evaluate([in]  const char* Expression,[in] unsigned long DesiredType,[out] PDEBUG_VALUE Value,[out,optional] unsigned long* RemainderIndex );
	HRESULT CoerceValue([in]  PDEBUG_VALUE In,[in] unsigned long OutType,[out] PDEBUG_VALUE Out );
	HRESULT CoerceValues([in]  unsigned long Count,[in] PDEBUG_VALUE In,[in] unsigned long* OutTypes,[out] PDEBUG_VALUE Out );
	HRESULT Execute([in]  unsigned long OutputControl,[in] const char* Command,[in] unsigned long Flags );
	HRESULT ExecuteCommandFile([in]  unsigned long OutputControl,[in] const char* CommandFile,[in] unsigned long Flags );
	HRESULT GetNumberBreakpoints([out]  unsigned long* Number );
	HRESULT GetBreakpointByIndex([in]  unsigned long Index,[out] IDebugBreakpoint** Bp );
	HRESULT GetBreakpointById([in]  unsigned long Id,[out] IDebugBreakpoint** Bp );
	HRESULT GetBreakpointParameters([in]  unsigned long Count,[in,optional] unsigned long* Ids,[in,optional] unsigned long Start,[out,optional] PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT AddBreakpoint([in]  unsigned long Type,[in] unsigned long DesiredId,[out] IDebugBreakpoint** Bp );
	HRESULT RemoveBreakpoint([in]  IDebugBreakpoint* Bp );
	HRESULT AddExtension([in]  const char* Path,[in] unsigned long Flags,[out] unsigned __int64* Handle );
	HRESULT RemoveExtension([in]  unsigned __int64 Handle );
	HRESULT GetExtensionByPath([in]  const char* Path,[out] unsigned __int64* Handle );
	HRESULT CallExtension([in]  unsigned __int64 Handle,[in] const char* Function,[in,optional] const char* Arguments );
	HRESULT GetExtensionFunction([in]  unsigned __int64 Handle,[in] const char* FuncName,[out] void** Function );
	HRESULT GetWindbgExtensionApis32([in,out]  PWINDBG_EXTENSION_APIS32 Api );
	HRESULT GetWindbgExtensionApis64([in,out]  PWINDBG_EXTENSION_APIS64 Api );
	HRESULT GetNumberEventFilters([out]  unsigned long* SpecificEvents,[out] unsigned long* SpecificExceptions,[out] unsigned long* ArbitraryExceptions );
	HRESULT GetEventFilterText([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* TextSize );
	HRESULT GetEventFilterCommand([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetEventFilterCommand([in]  unsigned long Index,[in] const char* Command );
	HRESULT GetSpecificFilterParameters([in]  unsigned long Start,[in] unsigned long Count,[out] PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT SetSpecificFilterParameters([in]  unsigned long Start,[in] unsigned long Count,[in] PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT GetSpecificFilterArgument([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgument([in]  unsigned long Index,[in] const char* Argument );
	HRESULT GetExceptionFilterParameters([in]  unsigned long Count,[in,optional] unsigned long* Codes,[in,optional] unsigned long Start,[out,optional] PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT SetExceptionFilterParameters([in]  unsigned long Count,[in] PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT GetExceptionFilterSecondCommand([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommand([in]  unsigned long Index,[in] const char* Command );
	HRESULT WaitForEvent([in]  unsigned long Flags,[in] unsigned long Timeout );
	HRESULT GetLastEventInformation([out]  unsigned long* Type,[out] unsigned long* ProcessId,[out] unsigned long* ThreadId,[out,optional] PVOID ExtraInformation,[in,optional] unsigned long ExtraInformationSize,[out,optional] unsigned long* ExtraInformationUsed,[out,optional] char* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* DescriptionUsed );
};

enum {DEBUG_OUT_TEXT_REPL_DEFAULT = 0x00000000};
///////////////////////////////////////////////////////////
[
	object,
	uuid(d4366723-44df-4bed-8c7e-4c05424f4588),
	helpstring("IDebugControl2")
]
interface IDebugControl2 : IUnknown {
	HRESULT GetInterrupt(  );
	HRESULT SetInterrupt([in]  unsigned long Flags );
	HRESULT GetInterruptTimeout([out]  unsigned long* Seconds );
	HRESULT SetInterruptTimeout([in]  unsigned long Seconds );
	HRESULT GetLogFile([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FileSize,[out,optional] bool* Append );
	HRESULT OpenLogFile([in]  const char* File,[in] BOOL Append );
	HRESULT CloseLogFile(  );
	HRESULT GetLogMask([out]  unsigned long* Mask );
	HRESULT SetLogMask([in]  unsigned long Mask );
	HRESULT Input([out]  char* Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* InputSize );
	HRESULT ReturnInput([in]  const char* Buffer );
	HRESULT Output([in]  unsigned long Mask,[in] const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaList([in]  unsigned long Mask,[in] const char* Format,[in] char* Args );
	HRESULT ControlledOutput([in]  unsigned long OutputControl,[in] unsigned long Mask,[in] const char* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaList([in]  unsigned long OutputControl,[in] unsigned long Mask,[in] const char* Format,[in] char* Args );
	HRESULT OutputPrompt([in]  unsigned long OutputControl,[in,optional] const char* Format,[optional] SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaList([in]  unsigned long OutputControl,[in,optional] const char* Format,[in,optional] char* Args );
	HRESULT GetPromptText([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* TextSize );
	HRESULT OutputCurrentState([in]  unsigned long OutputControl,[in] unsigned long Flags );
	HRESULT OutputVersionInformation([in]  unsigned long OutputControl );
	HRESULT GetNotifyEventHandle([out]  unsigned __int64* Handle );
	HRESULT SetNotifyEventHandle([in]  unsigned __int64 Handle );
	HRESULT Assemble([in]  unsigned __int64 Offset,[in] const char* Instr,[out] unsigned __int64* EndOffset );
	HRESULT Disassemble([in]  unsigned __int64 Offset,[in] unsigned long Flags,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* DisassemblySize,[out,optional] unsigned __int64* EndOffset );
	HRESULT GetDisassembleEffectiveOffset([out]  unsigned __int64* Offset );
	HRESULT OutputDisassembly([in]  unsigned long OutputControl,[in] unsigned __int64 Offset,[in] unsigned long Flags,[out] unsigned __int64* EndOffset );
	HRESULT OutputDisassemblyLines([in]  unsigned long OutputControl,[in] unsigned long PreviousLines,[in] unsigned long TotalLines,[in] unsigned __int64 Offset,[in] unsigned long Flags,[out,optional] unsigned long* OffsetLine,[out,optional] unsigned __int64* StartOffset,[out,optional] unsigned __int64* EndOffset,[out,optional] unsigned __int64* LineOffsets );
	HRESULT GetNearInstruction([in]  unsigned __int64 Offset,[in] LONG Delta,[out] unsigned __int64* NearOffset );
	HRESULT GetStackTrace([in]  unsigned __int64 FrameOffset,[in] unsigned __int64 StackOffset,[in] unsigned __int64 InstructionOffset,[in,out] PDEBUG_STACK_FRAME Frames,[in] unsigned long FramesSize,[out,optional] unsigned long* FramesFilled );
	HRESULT GetReturnOffset([out]  unsigned __int64* Offset );
	HRESULT OutputStackTrace([in]  unsigned long OutputControl,[in,optional] PDEBUG_STACK_FRAME Frames,[in,optional] unsigned long FramesSize,[in,optional] unsigned long Flags );
	HRESULT GetDebuggeeType([out]  unsigned long* Class,[out] unsigned long* Qualifier );
	HRESULT GetActualProcessorType([out]  unsigned long* Type );
	HRESULT GetExecutingProcessorType([out]  unsigned long* Type );
	HRESULT GetNumberPossibleExecutingProcessorTypes([out]  unsigned long* Number );
	HRESULT GetPossibleExecutingProcessorTypes([in]  unsigned long Start,[in] unsigned long Count,[out] unsigned long* Types );
	HRESULT GetNumberProcessors([out]  unsigned long* Number );
	HRESULT GetSystemVersion([out]  unsigned long* PlatformId,[out] unsigned long* Major,[out] unsigned long* Minor,[out,optional] char* ServicePackString,[in,optional] unsigned long ServicePackStringSize,[out,optional] unsigned long* ServicePackStringUsed,[out,optional] unsigned long* ServicePackNumber,[out,optional] char* BuildString,[in,optional] unsigned long BuildStringSize,[out,optional] unsigned long* BuildStringUsed );
	HRESULT GetPageSize([out]  unsigned long* Size );
	HRESULT IsPointer64Bit(  );
	HRESULT ReadBugCheckData([out]  unsigned long* Code,[out] unsigned __int64* Arg1,[out] unsigned __int64* Arg2,[out] unsigned __int64* Arg3,[out] unsigned __int64* Arg4 );
	HRESULT GetNumberSupportedProcessorTypes([out]  unsigned long* Number );
	HRESULT GetSupportedProcessorTypes([in]  unsigned long Start,[in] unsigned long Count,[out] unsigned long* Types );
	HRESULT GetProcessorTypeNames([in]  unsigned long Type,[out,optional] char* FullNameBuffer,[in,optional] unsigned long FullNameBufferSize,[out,optional] unsigned long* FullNameSize,[out,optional] char* AbbrevNameBuffer,[in,optional] unsigned long AbbrevNameBufferSize,[out,optional] unsigned long* AbbrevNameSize );
	HRESULT GetEffectiveProcessorType([out]  unsigned long* Type );
	HRESULT SetEffectiveProcessorType([in]  unsigned long Type );
	HRESULT GetExecutionStatus([out]  unsigned long* Status );
	HRESULT SetExecutionStatus([in]  unsigned long Status );
	HRESULT GetCodeLevel([out]  unsigned long* Level );
	HRESULT SetCodeLevel([in]  unsigned long Level );
	HRESULT GetEngineOptions([out]  unsigned long* Options );
	HRESULT AddEngineOptions([in]  unsigned long Options );
	HRESULT RemoveEngineOptions([in]  unsigned long Options );
	HRESULT SetEngineOptions([in]  unsigned long Options );
	HRESULT GetSystemErrorControl([out]  unsigned long* OutputLevel,[out] unsigned long* BreakLevel );
	HRESULT SetSystemErrorControl([in]  unsigned long OutputLevel,[in] unsigned long BreakLevel );
	HRESULT GetTextMacro([in]  unsigned long Slot,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* MacroSize );
	HRESULT SetTextMacro([in]  unsigned long Slot,[in] const char* Macro );
	HRESULT GetRadix([out]  unsigned long* Radix );
	HRESULT SetRadix([in]  unsigned long Radix );
	HRESULT Evaluate([in]  const char* Expression,[in] unsigned long DesiredType,[out] PDEBUG_VALUE Value,[out,optional] unsigned long* RemainderIndex );
	HRESULT CoerceValue([in]  PDEBUG_VALUE In,[in] unsigned long OutType,[out] PDEBUG_VALUE Out );
	HRESULT CoerceValues([in]  unsigned long Count,[in] PDEBUG_VALUE In,[in] unsigned long* OutTypes,[out] PDEBUG_VALUE Out );
	HRESULT Execute([in]  unsigned long OutputControl,[in] const char* Command,[in] unsigned long Flags );
	HRESULT ExecuteCommandFile([in]  unsigned long OutputControl,[in] const char* CommandFile,[in] unsigned long Flags );
	HRESULT GetNumberBreakpoints([out]  unsigned long* Number );
	HRESULT GetBreakpointByIndex([in]  unsigned long Index,[out] IDebugBreakpoint** Bp );
	HRESULT GetBreakpointById([in]  unsigned long Id,[out] IDebugBreakpoint** Bp );
	HRESULT GetBreakpointParameters([in]  unsigned long Count,[in,optional] unsigned long* Ids,[in,optional] unsigned long Start,[out,optional] PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT AddBreakpoint([in]  unsigned long Type,[in] unsigned long DesiredId,[out] IDebugBreakpoint** Bp );
	HRESULT RemoveBreakpoint([in]  IDebugBreakpoint* Bp );
	HRESULT AddExtension([in]  const char* Path,[in] unsigned long Flags,[out] unsigned __int64* Handle );
	HRESULT RemoveExtension([in]  unsigned __int64 Handle );
	HRESULT GetExtensionByPath([in]  const char* Path,[out] unsigned __int64* Handle );
	HRESULT CallExtension([in]  unsigned __int64 Handle,[in] const char* Function,[in,optional] const char* Arguments );
	HRESULT GetExtensionFunction([in]  unsigned __int64 Handle,[in] const char* FuncName,[out] void** Function );
	HRESULT GetWindbgExtensionApis32([in,out]  PWINDBG_EXTENSION_APIS32 Api );
	HRESULT GetWindbgExtensionApis64([in,out]  PWINDBG_EXTENSION_APIS64 Api );
	HRESULT GetNumberEventFilters([out]  unsigned long* SpecificEvents,[out] unsigned long* SpecificExceptions,[out] unsigned long* ArbitraryExceptions );
	HRESULT GetEventFilterText([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* TextSize );
	HRESULT GetEventFilterCommand([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetEventFilterCommand([in]  unsigned long Index,[in] const char* Command );
	HRESULT GetSpecificFilterParameters([in]  unsigned long Start,[in] unsigned long Count,[out] PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT SetSpecificFilterParameters([in]  unsigned long Start,[in] unsigned long Count,[in] PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT GetSpecificFilterArgument([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgument([in]  unsigned long Index,[in] const char* Argument );
	HRESULT GetExceptionFilterParameters([in]  unsigned long Count,[in,optional] unsigned long* Codes,[in,optional] unsigned long Start,[out,optional] PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT SetExceptionFilterParameters([in]  unsigned long Count,[in] PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT GetExceptionFilterSecondCommand([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommand([in]  unsigned long Index,[in] const char* Command );
	HRESULT WaitForEvent([in]  unsigned long Flags,[in] unsigned long Timeout );
	HRESULT GetLastEventInformation([out]  unsigned long* Type,[out] unsigned long* ProcessId,[out] unsigned long* ThreadId,[out,optional] PVOID ExtraInformation,[in,optional] unsigned long ExtraInformationSize,[out,optional] unsigned long* ExtraInformationUsed,[out,optional] char* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* DescriptionUsed );
	HRESULT GetCurrentTimeDate([out]  unsigned long* TimeDate );
	HRESULT GetCurrentSystemUpTime([out]  unsigned long* UpTime );
	HRESULT GetDumpFormatFlags([out]  unsigned long* FormatFlags );
	HRESULT GetNumberTextReplacements([out]  unsigned long* NumRepl );
	HRESULT GetTextReplacement([in,optional]  const char* SrcText,[in,optional] unsigned long Index,[out,optional] char* SrcBuffer,[in,optional] unsigned long SrcBufferSize,[out,optional] unsigned long* SrcSize,[out,optional] char* DstBuffer,[in,optional] unsigned long DstBufferSize,[out,optional] unsigned long* DstSize );
	HRESULT SetTextReplacement([in]  const char* SrcText,[in,optional] const char* DstText );
	HRESULT RemoveTextReplacements(  );
	HRESULT OutputTextReplacements([in]  unsigned long OutputControl,[in] unsigned long Flags );
};

enum {DEBUG_ASMOPT_DEFAULT             = 0x00000000};
enum {DEBUG_ASMOPT_VERBOSE             = 0x00000001};
enum {DEBUG_ASMOPT_NO_CODE_BYTES       = 0x00000002};
enum {DEBUG_ASMOPT_IGNORE_OUTPUT_WIDTH = 0x00000004};
enum {DEBUG_ASMOPT_SOURCE_LINE_NUMBER  = 0x00000008};
enum {DEBUG_EXPR_MASM      = 0x00000000};
enum {DEBUG_EXPR_CPLUSPLUS = 0x00000001};
enum {DEBUG_EINDEX_NAME = 0x00000000};
enum {DEBUG_EINDEX_FROM_START   = 0x00000000};
enum {DEBUG_EINDEX_FROM_END     = 0x00000001};
enum {DEBUG_EINDEX_FROM_CURRENT = 0x00000002};
///////////////////////////////////////////////////////////
[
	object,
	uuid(7df74a86-b03f-407f-90ab-a20dadcead08),
	helpstring("IDebugControl3")
]
interface IDebugControl3 : IUnknown {
	HRESULT GetInterrupt(  );
	HRESULT SetInterrupt([in]  unsigned long Flags );
	HRESULT GetInterruptTimeout([out]  unsigned long* Seconds );
	HRESULT SetInterruptTimeout([in]  unsigned long Seconds );
	HRESULT GetLogFile([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FileSize,[out,optional] bool* Append );
	HRESULT OpenLogFile([in]  const char* File,[in] BOOL Append );
	HRESULT CloseLogFile(  );
	HRESULT GetLogMask([out]  unsigned long* Mask );
	HRESULT SetLogMask([in]  unsigned long Mask );
	HRESULT Input([out]  char* Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* InputSize );
	HRESULT ReturnInput([in]  const char* Buffer );
	HRESULT Output([in]  unsigned long Mask,[in] const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaList([in]  unsigned long Mask,[in] const char* Format,[in] char* Args );
	HRESULT ControlledOutput([in]  unsigned long OutputControl,[in] unsigned long Mask,[in] const char* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaList([in]  unsigned long OutputControl,[in] unsigned long Mask,[in] const char* Format,[in] char* Args );
	HRESULT OutputPrompt([in]  unsigned long OutputControl,[in,optional] const char* Format,[optional] SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaList([in]  unsigned long OutputControl,[in,optional] const char* Format,[in,optional] char* Args );
	HRESULT GetPromptText([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* TextSize );
	HRESULT OutputCurrentState([in]  unsigned long OutputControl,[in] unsigned long Flags );
	HRESULT OutputVersionInformation([in]  unsigned long OutputControl );
	HRESULT GetNotifyEventHandle([out]  unsigned __int64* Handle );
	HRESULT SetNotifyEventHandle([in]  unsigned __int64 Handle );
	HRESULT Assemble([in]  unsigned __int64 Offset,[in] const char* Instr,[out] unsigned __int64* EndOffset );
	HRESULT Disassemble([in]  unsigned __int64 Offset,[in] unsigned long Flags,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* DisassemblySize,[out,optional] unsigned __int64* EndOffset );
	HRESULT GetDisassembleEffectiveOffset([out]  unsigned __int64* Offset );
	HRESULT OutputDisassembly([in]  unsigned long OutputControl,[in] unsigned __int64 Offset,[in] unsigned long Flags,[out] unsigned __int64* EndOffset );
	HRESULT OutputDisassemblyLines([in]  unsigned long OutputControl,[in] unsigned long PreviousLines,[in] unsigned long TotalLines,[in] unsigned __int64 Offset,[in] unsigned long Flags,[out,optional] unsigned long* OffsetLine,[out,optional] unsigned __int64* StartOffset,[out,optional] unsigned __int64* EndOffset,[out,optional] unsigned __int64* LineOffsets );
	HRESULT GetNearInstruction([in]  unsigned __int64 Offset,[in] LONG Delta,[out] unsigned __int64* NearOffset );
	HRESULT GetStackTrace([in]  unsigned __int64 FrameOffset,[in] unsigned __int64 StackOffset,[in] unsigned __int64 InstructionOffset,[in,out] PDEBUG_STACK_FRAME Frames,[in] unsigned long FramesSize,[out,optional] unsigned long* FramesFilled );
	HRESULT GetReturnOffset([out]  unsigned __int64* Offset );
	HRESULT OutputStackTrace([in]  unsigned long OutputControl,[in,optional] PDEBUG_STACK_FRAME Frames,[in,optional] unsigned long FramesSize,[in,optional] unsigned long Flags );
	HRESULT GetDebuggeeType([out]  unsigned long* Class,[out] unsigned long* Qualifier );
	HRESULT GetActualProcessorType([out]  unsigned long* Type );
	HRESULT GetExecutingProcessorType([out]  unsigned long* Type );
	HRESULT GetNumberPossibleExecutingProcessorTypes([out]  unsigned long* Number );
	HRESULT GetPossibleExecutingProcessorTypes([in]  unsigned long Start,[in] unsigned long Count,[out] unsigned long* Types );
	HRESULT GetNumberProcessors([out]  unsigned long* Number );
	HRESULT GetSystemVersion([out]  unsigned long* PlatformId,[out] unsigned long* Major,[out] unsigned long* Minor,[out,optional] char* ServicePackString,[in,optional] unsigned long ServicePackStringSize,[out,optional] unsigned long* ServicePackStringUsed,[out,optional] unsigned long* ServicePackNumber,[out,optional] char* BuildString,[in,optional] unsigned long BuildStringSize,[out,optional] unsigned long* BuildStringUsed );
	HRESULT GetPageSize([out]  unsigned long* Size );
	HRESULT IsPointer64Bit(  );
	HRESULT ReadBugCheckData([out]  unsigned long* Code,[out] unsigned __int64* Arg1,[out] unsigned __int64* Arg2,[out] unsigned __int64* Arg3,[out] unsigned __int64* Arg4 );
	HRESULT GetNumberSupportedProcessorTypes([out]  unsigned long* Number );
	HRESULT GetSupportedProcessorTypes([in]  unsigned long Start,[in] unsigned long Count,[out] unsigned long* Types );
	HRESULT GetProcessorTypeNames([in]  unsigned long Type,[out,optional] char* FullNameBuffer,[in,optional] unsigned long FullNameBufferSize,[out,optional] unsigned long* FullNameSize,[out,optional] char* AbbrevNameBuffer,[in,optional] unsigned long AbbrevNameBufferSize,[out,optional] unsigned long* AbbrevNameSize );
	HRESULT GetEffectiveProcessorType([out]  unsigned long* Type );
	HRESULT SetEffectiveProcessorType([in]  unsigned long Type );
	HRESULT GetExecutionStatus([out]  unsigned long* Status );
	HRESULT SetExecutionStatus([in]  unsigned long Status );
	HRESULT GetCodeLevel([out]  unsigned long* Level );
	HRESULT SetCodeLevel([in]  unsigned long Level );
	HRESULT GetEngineOptions([out]  unsigned long* Options );
	HRESULT AddEngineOptions([in]  unsigned long Options );
	HRESULT RemoveEngineOptions([in]  unsigned long Options );
	HRESULT SetEngineOptions([in]  unsigned long Options );
	HRESULT GetSystemErrorControl([out]  unsigned long* OutputLevel,[out] unsigned long* BreakLevel );
	HRESULT SetSystemErrorControl([in]  unsigned long OutputLevel,[in] unsigned long BreakLevel );
	HRESULT GetTextMacro([in]  unsigned long Slot,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* MacroSize );
	HRESULT SetTextMacro([in]  unsigned long Slot,[in] const char* Macro );
	HRESULT GetRadix([out]  unsigned long* Radix );
	HRESULT SetRadix([in]  unsigned long Radix );
	HRESULT Evaluate([in]  const char* Expression,[in] unsigned long DesiredType,[out] PDEBUG_VALUE Value,[out,optional] unsigned long* RemainderIndex );
	HRESULT CoerceValue([in]  PDEBUG_VALUE In,[in] unsigned long OutType,[out] PDEBUG_VALUE Out );
	HRESULT CoerceValues([in]  unsigned long Count,[in] PDEBUG_VALUE In,[in] unsigned long* OutTypes,[out] PDEBUG_VALUE Out );
	HRESULT Execute([in]  unsigned long OutputControl,[in] const char* Command,[in] unsigned long Flags );
	HRESULT ExecuteCommandFile([in]  unsigned long OutputControl,[in] const char* CommandFile,[in] unsigned long Flags );
	HRESULT GetNumberBreakpoints([out]  unsigned long* Number );
	HRESULT GetBreakpointByIndex([in]  unsigned long Index,[out] IDebugBreakpoint** Bp );
	HRESULT GetBreakpointById([in]  unsigned long Id,[out] IDebugBreakpoint** Bp );
	HRESULT GetBreakpointParameters([in]  unsigned long Count,[in,optional] unsigned long* Ids,[in,optional] unsigned long Start,[out,optional] PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT AddBreakpoint([in]  unsigned long Type,[in] unsigned long DesiredId,[out] IDebugBreakpoint** Bp );
	HRESULT RemoveBreakpoint([in]  IDebugBreakpoint* Bp );
	HRESULT AddExtension([in]  const char* Path,[in] unsigned long Flags,[out] unsigned __int64* Handle );
	HRESULT RemoveExtension([in]  unsigned __int64 Handle );
	HRESULT GetExtensionByPath([in]  const char* Path,[out] unsigned __int64* Handle );
	HRESULT CallExtension([in]  unsigned __int64 Handle,[in] const char* Function,[in,optional] const char* Arguments );
	HRESULT GetExtensionFunction([in]  unsigned __int64 Handle,[in] const char* FuncName,[out] void** Function );
	HRESULT GetWindbgExtensionApis32([in,out]  PWINDBG_EXTENSION_APIS32 Api );
	HRESULT GetWindbgExtensionApis64([in,out]  PWINDBG_EXTENSION_APIS64 Api );
	HRESULT GetNumberEventFilters([out]  unsigned long* SpecificEvents,[out] unsigned long* SpecificExceptions,[out] unsigned long* ArbitraryExceptions );
	HRESULT GetEventFilterText([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* TextSize );
	HRESULT GetEventFilterCommand([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetEventFilterCommand([in]  unsigned long Index,[in] const char* Command );
	HRESULT GetSpecificFilterParameters([in]  unsigned long Start,[in] unsigned long Count,[out] PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT SetSpecificFilterParameters([in]  unsigned long Start,[in] unsigned long Count,[in] PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT GetSpecificFilterArgument([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgument([in]  unsigned long Index,[in] const char* Argument );
	HRESULT GetExceptionFilterParameters([in]  unsigned long Count,[in,optional] unsigned long* Codes,[in,optional] unsigned long Start,[out,optional] PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT SetExceptionFilterParameters([in]  unsigned long Count,[in] PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT GetExceptionFilterSecondCommand([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommand([in]  unsigned long Index,[in] const char* Command );
	HRESULT WaitForEvent([in]  unsigned long Flags,[in] unsigned long Timeout );
	HRESULT GetLastEventInformation([out]  unsigned long* Type,[out] unsigned long* ProcessId,[out] unsigned long* ThreadId,[out,optional] PVOID ExtraInformation,[in,optional] unsigned long ExtraInformationSize,[out,optional] unsigned long* ExtraInformationUsed,[out,optional] char* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* DescriptionUsed );
	HRESULT GetCurrentTimeDate([out]  unsigned long* TimeDate );
	HRESULT GetCurrentSystemUpTime([out]  unsigned long* UpTime );
	HRESULT GetDumpFormatFlags([out]  unsigned long* FormatFlags );
	HRESULT GetNumberTextReplacements([out]  unsigned long* NumRepl );
	HRESULT GetTextReplacement([in,optional]  const char* SrcText,[in,optional] unsigned long Index,[out,optional] char* SrcBuffer,[in,optional] unsigned long SrcBufferSize,[out,optional] unsigned long* SrcSize,[out,optional] char* DstBuffer,[in,optional] unsigned long DstBufferSize,[out,optional] unsigned long* DstSize );
	HRESULT SetTextReplacement([in]  const char* SrcText,[in,optional] const char* DstText );
	HRESULT RemoveTextReplacements(  );
	HRESULT OutputTextReplacements([in]  unsigned long OutputControl,[in] unsigned long Flags );
	HRESULT GetAssemblyOptions([out]  unsigned long* Options );
	HRESULT AddAssemblyOptions([in]  unsigned long Options );
	HRESULT RemoveAssemblyOptions([in]  unsigned long Options );
	HRESULT SetAssemblyOptions([in]  unsigned long Options );
	HRESULT GetExpressionSyntax([out]  unsigned long* Flags );
	HRESULT SetExpressionSyntax([in]  unsigned long Flags );
	HRESULT SetExpressionSyntaxByName([in]  const char* AbbrevName );
	HRESULT GetNumberExpressionSyntaxes([out]  unsigned long* Number );
	HRESULT GetExpressionSyntaxNames([in]  unsigned long Index,[out,optional] char* FullNameBuffer,[in,optional] unsigned long FullNameBufferSize,[out,optional] unsigned long* FullNameSize,[out,optional] char* AbbrevNameBuffer,[in,optional] unsigned long AbbrevNameBufferSize,[out,optional] unsigned long* AbbrevNameSize );
	HRESULT GetNumberEvents([out]  unsigned long* Events );
	HRESULT GetEventIndexDescription([in]  unsigned long Index,[in] unsigned long Which,[in,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* DescSize );
	HRESULT GetCurrentEventIndex([out]  unsigned long* Index );
	HRESULT SetNextEventIndex([in]  unsigned long Relation,[in] unsigned long Value,[out] unsigned long* NextIndex );
};

enum {DEBUG_LOG_DEFAULT = 0x00000000};
enum {DEBUG_LOG_APPEND  = 0x00000001};
enum {DEBUG_LOG_UNICODE = 0x00000002};
enum {DEBUG_LOG_DML     = 0x00000004};
enum {DEBUG_SYSVERSTR_SERVICE_PACK = 0x00000000};
enum {DEBUG_SYSVERSTR_BUILD        = 0x00000001};
enum {DEBUG_MANAGED_DISABLED   = 0x00000000};
enum {DEBUG_MANAGED_ALLOWED    = 0x00000001};
enum {DEBUG_MANAGED_DLL_LOADED = 0x00000002};
enum {DEBUG_MANSTR_NONE               = 0x00000000};
enum {DEBUG_MANSTR_LOADED_SUPPORT_DLL = 0x00000001};
enum {DEBUG_MANSTR_LOAD_STATUS        = 0x00000002};
enum {DEBUG_MANRESET_DEFAULT  = 0x00000000};
enum {DEBUG_MANRESET_LOAD_DLL = 0x00000001};
///////////////////////////////////////////////////////////
[
	object,
	uuid(94e60ce9-9b41-4b19-9fc0-6d9eb35272b3),
	helpstring("IDebugControl4")
]
interface IDebugControl4 : IUnknown {
	HRESULT GetInterrupt(  );
	HRESULT SetInterrupt([in]  unsigned long Flags );
	HRESULT GetInterruptTimeout([out]  unsigned long* Seconds );
	HRESULT SetInterruptTimeout([in]  unsigned long Seconds );
	HRESULT GetLogFile([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FileSize,[out,optional] bool* Append );
	HRESULT OpenLogFile([in]  const char* File,[in] BOOL Append );
	HRESULT CloseLogFile(  );
	HRESULT GetLogMask([out]  unsigned long* Mask );
	HRESULT SetLogMask([in]  unsigned long Mask );
	HRESULT Input([out]  char* Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* InputSize );
	HRESULT ReturnInput([in]  const char* Buffer );
	HRESULT Output([in]  unsigned long Mask,[in] const char* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaList([in]  unsigned long Mask,[in] const char* Format,[in] char* Args );
	HRESULT ControlledOutput([in]  unsigned long OutputControl,[in] unsigned long Mask,[in] const char* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaList([in]  unsigned long OutputControl,[in] unsigned long Mask,[in] const char* Format,[in] char* Args );
	HRESULT OutputPrompt([in]  unsigned long OutputControl,[in,optional] const char* Format,[optional] SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaList([in]  unsigned long OutputControl,[in,optional] const char* Format,[in,optional] char* Args );
	HRESULT GetPromptText([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* TextSize );
	HRESULT OutputCurrentState([in]  unsigned long OutputControl,[in] unsigned long Flags );
	HRESULT OutputVersionInformation([in]  unsigned long OutputControl );
	HRESULT GetNotifyEventHandle([out]  unsigned __int64* Handle );
	HRESULT SetNotifyEventHandle([in]  unsigned __int64 Handle );
	HRESULT Assemble([in]  unsigned __int64 Offset,[in] const char* Instr,[out] unsigned __int64* EndOffset );
	HRESULT Disassemble([in]  unsigned __int64 Offset,[in] unsigned long Flags,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* DisassemblySize,[out,optional] unsigned __int64* EndOffset );
	HRESULT GetDisassembleEffectiveOffset([out]  unsigned __int64* Offset );
	HRESULT OutputDisassembly([in]  unsigned long OutputControl,[in] unsigned __int64 Offset,[in] unsigned long Flags,[out] unsigned __int64* EndOffset );
	HRESULT OutputDisassemblyLines([in]  unsigned long OutputControl,[in] unsigned long PreviousLines,[in] unsigned long TotalLines,[in] unsigned __int64 Offset,[in] unsigned long Flags,[out,optional] unsigned long* OffsetLine,[out,optional] unsigned __int64* StartOffset,[out,optional] unsigned __int64* EndOffset,[out,optional] unsigned __int64* LineOffsets );
	HRESULT GetNearInstruction([in]  unsigned __int64 Offset,[in] LONG Delta,[out] unsigned __int64* NearOffset );
	HRESULT GetStackTrace([in]  unsigned __int64 FrameOffset,[in] unsigned __int64 StackOffset,[in] unsigned __int64 InstructionOffset,[in,out] PDEBUG_STACK_FRAME Frames,[in] unsigned long FramesSize,[out,optional] unsigned long* FramesFilled );
	HRESULT GetReturnOffset([out]  unsigned __int64* Offset );
	HRESULT OutputStackTrace([in]  unsigned long OutputControl,[in,optional] PDEBUG_STACK_FRAME Frames,[in,optional] unsigned long FramesSize,[in,optional] unsigned long Flags );
	HRESULT GetDebuggeeType([out]  unsigned long* Class,[out] unsigned long* Qualifier );
	HRESULT GetActualProcessorType([out]  unsigned long* Type );
	HRESULT GetExecutingProcessorType([out]  unsigned long* Type );
	HRESULT GetNumberPossibleExecutingProcessorTypes([out]  unsigned long* Number );
	HRESULT GetPossibleExecutingProcessorTypes([in]  unsigned long Start,[in] unsigned long Count,[out] unsigned long* Types );
	HRESULT GetNumberProcessors([out]  unsigned long* Number );
	HRESULT GetSystemVersion([out]  unsigned long* PlatformId,[out] unsigned long* Major,[out] unsigned long* Minor,[out,optional] char* ServicePackString,[in,optional] unsigned long ServicePackStringSize,[out,optional] unsigned long* ServicePackStringUsed,[out,optional] unsigned long* ServicePackNumber,[out,optional] char* BuildString,[in,optional] unsigned long BuildStringSize,[out,optional] unsigned long* BuildStringUsed );
	HRESULT GetPageSize([out]  unsigned long* Size );
	HRESULT IsPointer64Bit(  );
	HRESULT ReadBugCheckData([out]  unsigned long* Code,[out] unsigned __int64* Arg1,[out] unsigned __int64* Arg2,[out] unsigned __int64* Arg3,[out] unsigned __int64* Arg4 );
	HRESULT GetNumberSupportedProcessorTypes([out]  unsigned long* Number );
	HRESULT GetSupportedProcessorTypes([in]  unsigned long Start,[in] unsigned long Count,[out] unsigned long* Types );
	HRESULT GetProcessorTypeNames([in]  unsigned long Type,[out,optional] char* FullNameBuffer,[in,optional] unsigned long FullNameBufferSize,[out,optional] unsigned long* FullNameSize,[out,optional] char* AbbrevNameBuffer,[in,optional] unsigned long AbbrevNameBufferSize,[out,optional] unsigned long* AbbrevNameSize );
	HRESULT GetEffectiveProcessorType([out]  unsigned long* Type );
	HRESULT SetEffectiveProcessorType([in]  unsigned long Type );
	HRESULT GetExecutionStatus([out]  unsigned long* Status );
	HRESULT SetExecutionStatus([in]  unsigned long Status );
	HRESULT GetCodeLevel([out]  unsigned long* Level );
	HRESULT SetCodeLevel([in]  unsigned long Level );
	HRESULT GetEngineOptions([out]  unsigned long* Options );
	HRESULT AddEngineOptions([in]  unsigned long Options );
	HRESULT RemoveEngineOptions([in]  unsigned long Options );
	HRESULT SetEngineOptions([in]  unsigned long Options );
	HRESULT GetSystemErrorControl([out]  unsigned long* OutputLevel,[out] unsigned long* BreakLevel );
	HRESULT SetSystemErrorControl([in]  unsigned long OutputLevel,[in] unsigned long BreakLevel );
	HRESULT GetTextMacro([in]  unsigned long Slot,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* MacroSize );
	HRESULT SetTextMacro([in]  unsigned long Slot,[in] const char* Macro );
	HRESULT GetRadix([out]  unsigned long* Radix );
	HRESULT SetRadix([in]  unsigned long Radix );
	HRESULT Evaluate([in]  const char* Expression,[in] unsigned long DesiredType,[out] PDEBUG_VALUE Value,[out,optional] unsigned long* RemainderIndex );
	HRESULT CoerceValue([in]  PDEBUG_VALUE In,[in] unsigned long OutType,[out] PDEBUG_VALUE Out );
	HRESULT CoerceValues([in]  unsigned long Count,[in] PDEBUG_VALUE In,[in] unsigned long* OutTypes,[out] PDEBUG_VALUE Out );
	HRESULT Execute([in]  unsigned long OutputControl,[in] const char* Command,[in] unsigned long Flags );
	HRESULT ExecuteCommandFile([in]  unsigned long OutputControl,[in] const char* CommandFile,[in] unsigned long Flags );
	HRESULT GetNumberBreakpoints([out]  unsigned long* Number );
	HRESULT GetBreakpointByIndex([in]  unsigned long Index,[out] IDebugBreakpoint** Bp );
	HRESULT GetBreakpointById([in]  unsigned long Id,[out] IDebugBreakpoint** Bp );
	HRESULT GetBreakpointParameters([in]  unsigned long Count,[in,optional] unsigned long* Ids,[in,optional] unsigned long Start,[out,optional] PDEBUG_BREAKPOINT_PARAMETERS Params );
	HRESULT AddBreakpoint([in]  unsigned long Type,[in] unsigned long DesiredId,[out] IDebugBreakpoint** Bp );
	HRESULT RemoveBreakpoint([in]  IDebugBreakpoint* Bp );
	HRESULT AddExtension([in]  const char* Path,[in] unsigned long Flags,[out] unsigned __int64* Handle );
	HRESULT RemoveExtension([in]  unsigned __int64 Handle );
	HRESULT GetExtensionByPath([in]  const char* Path,[out] unsigned __int64* Handle );
	HRESULT CallExtension([in]  unsigned __int64 Handle,[in] const char* Function,[in,optional] const char* Arguments );
	HRESULT GetExtensionFunction([in]  unsigned __int64 Handle,[in] const char* FuncName,[out] void** Function );
	HRESULT GetWindbgExtensionApis32([in,out]  PWINDBG_EXTENSION_APIS32 Api );
	HRESULT GetWindbgExtensionApis64([in,out]  PWINDBG_EXTENSION_APIS64 Api );
	HRESULT GetNumberEventFilters([out]  unsigned long* SpecificEvents,[out] unsigned long* SpecificExceptions,[out] unsigned long* ArbitraryExceptions );
	HRESULT GetEventFilterText([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* TextSize );
	HRESULT GetEventFilterCommand([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetEventFilterCommand([in]  unsigned long Index,[in] const char* Command );
	HRESULT GetSpecificFilterParameters([in]  unsigned long Start,[in] unsigned long Count,[out] PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT SetSpecificFilterParameters([in]  unsigned long Start,[in] unsigned long Count,[in] PDEBUG_SPECIFIC_FILTER_PARAMETERS Params );
	HRESULT GetSpecificFilterArgument([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgument([in]  unsigned long Index,[in] const char* Argument );
	HRESULT GetExceptionFilterParameters([in]  unsigned long Count,[in,optional] unsigned long* Codes,[in,optional] unsigned long Start,[out,optional] PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT SetExceptionFilterParameters([in]  unsigned long Count,[in] PDEBUG_EXCEPTION_FILTER_PARAMETERS Params );
	HRESULT GetExceptionFilterSecondCommand([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommand([in]  unsigned long Index,[in] const char* Command );
	HRESULT WaitForEvent([in]  unsigned long Flags,[in] unsigned long Timeout );
	HRESULT GetLastEventInformation([out]  unsigned long* Type,[out] unsigned long* ProcessId,[out] unsigned long* ThreadId,[out,optional] PVOID ExtraInformation,[in,optional] unsigned long ExtraInformationSize,[out,optional] unsigned long* ExtraInformationUsed,[out,optional] char* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* DescriptionUsed );
	HRESULT GetCurrentTimeDate([out]  unsigned long* TimeDate );
	HRESULT GetCurrentSystemUpTime([out]  unsigned long* UpTime );
	HRESULT GetDumpFormatFlags([out]  unsigned long* FormatFlags );
	HRESULT GetNumberTextReplacements([out]  unsigned long* NumRepl );
	HRESULT GetTextReplacement([in,optional]  const char* SrcText,[in,optional] unsigned long Index,[out,optional] char* SrcBuffer,[in,optional] unsigned long SrcBufferSize,[out,optional] unsigned long* SrcSize,[out,optional] char* DstBuffer,[in,optional] unsigned long DstBufferSize,[out,optional] unsigned long* DstSize );
	HRESULT SetTextReplacement([in]  const char* SrcText,[in,optional] const char* DstText );
	HRESULT RemoveTextReplacements(  );
	HRESULT OutputTextReplacements([in]  unsigned long OutputControl,[in] unsigned long Flags );
	HRESULT GetAssemblyOptions([out]  unsigned long* Options );
	HRESULT AddAssemblyOptions([in]  unsigned long Options );
	HRESULT RemoveAssemblyOptions([in]  unsigned long Options );
	HRESULT SetAssemblyOptions([in]  unsigned long Options );
	HRESULT GetExpressionSyntax([out]  unsigned long* Flags );
	HRESULT SetExpressionSyntax([in]  unsigned long Flags );
	HRESULT SetExpressionSyntaxByName([in]  const char* AbbrevName );
	HRESULT GetNumberExpressionSyntaxes([out]  unsigned long* Number );
	HRESULT GetExpressionSyntaxNames([in]  unsigned long Index,[out,optional] char* FullNameBuffer,[in,optional] unsigned long FullNameBufferSize,[out,optional] unsigned long* FullNameSize,[out,optional] char* AbbrevNameBuffer,[in,optional] unsigned long AbbrevNameBufferSize,[out,optional] unsigned long* AbbrevNameSize );
	HRESULT GetNumberEvents([out]  unsigned long* Events );
	HRESULT GetEventIndexDescription([in]  unsigned long Index,[in] unsigned long Which,[in,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* DescSize );
	HRESULT GetCurrentEventIndex([out]  unsigned long* Index );
	HRESULT SetNextEventIndex([in]  unsigned long Relation,[in] unsigned long Value,[out] unsigned long* NextIndex );
	HRESULT GetLogFileWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FileSize,[out,optional] bool* Append );
	HRESULT OpenLogFileWide([in]  const wchar_t* File,[in] BOOL Append );
	HRESULT InputWide([out]  wchar_t* Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* InputSize );
	HRESULT ReturnInputWide([in]  const wchar_t* Buffer );
	HRESULT OutputWide([in]  unsigned long Mask,[in] const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT OutputVaListWide([in]  unsigned long Mask,[in] const wchar_t* Format,[in] char* Args );
	HRESULT ControlledOutputWide([in]  unsigned long OutputControl,[in] unsigned long Mask,[in] const wchar_t* Format, SAFEARRAY(VARIANT) );
	HRESULT ControlledOutputVaListWide([in]  unsigned long OutputControl,[in] unsigned long Mask,[in] const wchar_t* Format,[in] char* Args );
	HRESULT OutputPromptWide([in]  unsigned long OutputControl,[in,optional] const wchar_t* Format,[optional] SAFEARRAY(VARIANT) );
	HRESULT OutputPromptVaListWide([in]  unsigned long OutputControl,[in,optional] const wchar_t* Format,[in,optional] char* Args );
	HRESULT GetPromptTextWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* TextSize );
	HRESULT AssembleWide([in]  unsigned __int64 Offset,[in] const wchar_t* Instr,[out] unsigned __int64* EndOffset );
	HRESULT DisassembleWide([in]  unsigned __int64 Offset,[in] unsigned long Flags,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* DisassemblySize,[out,optional] unsigned __int64* EndOffset );
	HRESULT GetProcessorTypeNamesWide([in]  unsigned long Type,[out,optional] wchar_t* FullNameBuffer,[in,optional] unsigned long FullNameBufferSize,[out,optional] unsigned long* FullNameSize,[out,optional] wchar_t* AbbrevNameBuffer,[in,optional] unsigned long AbbrevNameBufferSize,[out,optional] unsigned long* AbbrevNameSize );
	HRESULT GetTextMacroWide([in]  unsigned long Slot,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* MacroSize );
	HRESULT SetTextMacroWide([in]  unsigned long Slot,[in] const wchar_t* Macro );
	HRESULT EvaluateWide([in]  const wchar_t* Expression,[in] unsigned long DesiredType,[out] PDEBUG_VALUE Value,[out,optional] unsigned long* RemainderIndex );
	HRESULT ExecuteWide([in]  unsigned long OutputControl,[in] const wchar_t* Command,[in] unsigned long Flags );
	HRESULT ExecuteCommandFileWide([in]  unsigned long OutputControl,[in] const wchar_t* CommandFile,[in] unsigned long Flags );
	HRESULT GetBreakpointByIndex2([in]  unsigned long Index,[out] IDebugBreakpoint2** Bp );
	HRESULT GetBreakpointById2([in]  unsigned long Id,[out] IDebugBreakpoint2** Bp );
	HRESULT AddBreakpoint2([in]  unsigned long Type,[in] unsigned long DesiredId,[out] IDebugBreakpoint2** Bp );
	HRESULT RemoveBreakpoint2([in]  IDebugBreakpoint2* Bp );
	HRESULT AddExtensionWide([in]  const wchar_t* Path,[in] unsigned long Flags,[out] unsigned __int64* Handle );
	HRESULT GetExtensionByPathWide([in]  const wchar_t* Path,[out] unsigned __int64* Handle );
	HRESULT CallExtensionWide([in]  unsigned __int64 Handle,[in] const wchar_t* Function,[in,optional] const wchar_t* Arguments );
	HRESULT GetExtensionFunctionWide([in]  unsigned __int64 Handle,[in] const wchar_t* FuncName,[out] void** Function );
	HRESULT GetEventFilterTextWide([in]  unsigned long Index,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* TextSize );
	HRESULT GetEventFilterCommandWide([in]  unsigned long Index,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetEventFilterCommandWide([in]  unsigned long Index,[in] const wchar_t* Command );
	HRESULT GetSpecificFilterArgumentWide([in]  unsigned long Index,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ArgumentSize );
	HRESULT SetSpecificFilterArgumentWide([in]  unsigned long Index,[in] const wchar_t* Argument );
	HRESULT GetExceptionFilterSecondCommandWide([in]  unsigned long Index,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* CommandSize );
	HRESULT SetExceptionFilterSecondCommandWide([in]  unsigned long Index,[in] const wchar_t* Command );
	HRESULT GetLastEventInformationWide([out]  unsigned long* Type,[out] unsigned long* ProcessId,[out] unsigned long* ThreadId,[out,optional] PVOID ExtraInformation,[in,optional] unsigned long ExtraInformationSize,[out,optional] unsigned long* ExtraInformationUsed,[out,optional] wchar_t* Description,[in,optional] unsigned long DescriptionSize,[out,optional] unsigned long* DescriptionUsed );
	HRESULT GetTextReplacementWide([in,optional]  const wchar_t* SrcText,[in,optional] unsigned long Index,[out,optional] wchar_t* SrcBuffer,[in,optional] unsigned long SrcBufferSize,[out,optional] unsigned long* SrcSize,[out,optional] wchar_t* DstBuffer,[in,optional] unsigned long DstBufferSize,[out,optional] unsigned long* DstSize );
	HRESULT SetTextReplacementWide([in]  const wchar_t* SrcText,[in,optional] const wchar_t* DstText );
	HRESULT SetExpressionSyntaxByNameWide([in]  const wchar_t* AbbrevName );
	HRESULT GetExpressionSyntaxNamesWide([in]  unsigned long Index,[out,optional] wchar_t* FullNameBuffer,[in,optional] unsigned long FullNameBufferSize,[out,optional] unsigned long* FullNameSize,[out,optional] wchar_t* AbbrevNameBuffer,[in,optional] unsigned long AbbrevNameBufferSize,[out,optional] unsigned long* AbbrevNameSize );
	HRESULT GetEventIndexDescriptionWide([in]  unsigned long Index,[in] unsigned long Which,[in,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* DescSize );
	HRESULT GetLogFile2([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FileSize,[out,optional] unsigned long* Flags );
	HRESULT OpenLogFile2([in]  const char* File,[in] unsigned long Flags );
	HRESULT GetLogFile2Wide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FileSize,[out,optional] unsigned long* Flags );
	HRESULT OpenLogFile2Wide([in]  const wchar_t* File,[in] unsigned long Flags );
	HRESULT GetSystemVersionValues([out]  unsigned long* PlatformId,[out] unsigned long* Win32Major,[out] unsigned long* Win32Minor,[out,optional] unsigned long* KdMajor,[out,optional] unsigned long* KdMinor );
	HRESULT GetSystemVersionString([in]  unsigned long Which,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* StringSize );
	HRESULT GetSystemVersionStringWide([in]  unsigned long Which,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* StringSize );
	HRESULT GetContextStackTrace([in,optional]  PVOID StartContext,[in,optional] unsigned long StartContextSize,[in,out,optional] PDEBUG_STACK_FRAME Frames,[in,optional] unsigned long FramesSize,[out,optional] PVOID FrameContexts,[in,optional] unsigned long FrameContextsSize,[in,optional] unsigned long FrameContextsEntrySize,[out,optional] unsigned long* FramesFilled );
	HRESULT OutputContextStackTrace([in]  unsigned long OutputControl,[in] PDEBUG_STACK_FRAME Frames,[in] unsigned long FramesSize,[in] PVOID FrameContexts,[in] unsigned long FrameContextsSize,[in] unsigned long FrameContextsEntrySize,[in] unsigned long Flags );
	HRESULT GetStoredEventInformation([out]  unsigned long* Type,[out] unsigned long* ProcessId,[out] unsigned long* ThreadId,[out,optional] PVOID Context,[in,optional] unsigned long ContextSize,[out,optional] unsigned long* ContextUsed,[out,optional] PVOID ExtraInformation,[in,optional] unsigned long ExtraInformationSize,[out,optional] unsigned long* ExtraInformationUsed );
	HRESULT GetManagedStatus([out,optional]  unsigned long* Flags,[in,optional] unsigned long WhichString,[out,optional] char* String,[in,optional] unsigned long StringSize,[out,optional] unsigned long* StringNeeded );
	HRESULT GetManagedStatusWide([out,optional]  unsigned long* Flags,[in,optional] unsigned long WhichString,[out,optional] wchar_t* String,[in,optional] unsigned long StringSize,[out,optional] unsigned long* StringNeeded );
	HRESULT ResetManagedStatus([in]  unsigned long Flags );
};

enum {DEBUG_DATA_SPACE_VIRTUAL       = 0};
enum {DEBUG_DATA_SPACE_PHYSICAL      = 1};
enum {DEBUG_DATA_SPACE_CONTROL       = 2};
enum {DEBUG_DATA_SPACE_IO            = 3};
enum {DEBUG_DATA_SPACE_MSR           = 4};
enum {DEBUG_DATA_SPACE_BUS_DATA      = 5};
enum {DEBUG_DATA_SPACE_DEBUGGER_DATA = 6};
enum {DEBUG_DATA_SPACE_COUNT         = 7};
enum {DEBUG_DATA_KernBase                              = 24};
enum {DEBUG_DATA_BreakpointWithStatusAddr              = 32};
enum {DEBUG_DATA_SavedContextAddr                      = 40};
enum {DEBUG_DATA_KiCallUserModeAddr                    = 56};
enum {DEBUG_DATA_KeUserCallbackDispatcherAddr          = 64};
enum {DEBUG_DATA_PsLoadedModuleListAddr                = 72};
enum {DEBUG_DATA_PsActiveProcessHeadAddr               = 80};
enum {DEBUG_DATA_PspCidTableAddr                       = 88};
enum {DEBUG_DATA_ExpSystemResourcesListAddr            = 96};
enum {DEBUG_DATA_ExpPagedPoolDescriptorAddr           = 104};
enum {DEBUG_DATA_ExpNumberOfPagedPoolsAddr            = 112};
enum {DEBUG_DATA_KeTimeIncrementAddr                  = 120};
enum {DEBUG_DATA_KeBugCheckCallbackListHeadAddr       = 128};
enum {DEBUG_DATA_KiBugcheckDataAddr                   = 136};
enum {DEBUG_DATA_IopErrorLogListHeadAddr              = 144};
enum {DEBUG_DATA_ObpRootDirectoryObjectAddr           = 152};
enum {DEBUG_DATA_ObpTypeObjectTypeAddr                = 160};
enum {DEBUG_DATA_MmSystemCacheStartAddr               = 168};
enum {DEBUG_DATA_MmSystemCacheEndAddr                 = 176};
enum {DEBUG_DATA_MmSystemCacheWsAddr                  = 184};
enum {DEBUG_DATA_MmPfnDatabaseAddr                    = 192};
enum {DEBUG_DATA_MmSystemPtesStartAddr                = 200};
enum {DEBUG_DATA_MmSystemPtesEndAddr                  = 208};
enum {DEBUG_DATA_MmSubsectionBaseAddr                 = 216};
enum {DEBUG_DATA_MmNumberOfPagingFilesAddr            = 224};
enum {DEBUG_DATA_MmLowestPhysicalPageAddr             = 232};
enum {DEBUG_DATA_MmHighestPhysicalPageAddr            = 240};
enum {DEBUG_DATA_MmNumberOfPhysicalPagesAddr          = 248};
enum {DEBUG_DATA_MmMaximumNonPagedPoolInBytesAddr     = 256};
enum {DEBUG_DATA_MmNonPagedSystemStartAddr            = 264};
enum {DEBUG_DATA_MmNonPagedPoolStartAddr              = 272};
enum {DEBUG_DATA_MmNonPagedPoolEndAddr                = 280};
enum {DEBUG_DATA_MmPagedPoolStartAddr                 = 288};
enum {DEBUG_DATA_MmPagedPoolEndAddr                   = 296};
enum {DEBUG_DATA_MmPagedPoolInformationAddr           = 304};
enum {DEBUG_DATA_MmPageSize                           = 312};
enum {DEBUG_DATA_MmSizeOfPagedPoolInBytesAddr         = 320};
enum {DEBUG_DATA_MmTotalCommitLimitAddr               = 328};
enum {DEBUG_DATA_MmTotalCommittedPagesAddr            = 336};
enum {DEBUG_DATA_MmSharedCommitAddr                   = 344};
enum {DEBUG_DATA_MmDriverCommitAddr                   = 352};
enum {DEBUG_DATA_MmProcessCommitAddr                  = 360};
enum {DEBUG_DATA_MmPagedPoolCommitAddr                = 368};
enum {DEBUG_DATA_MmExtendedCommitAddr                 = 376};
enum {DEBUG_DATA_MmZeroedPageListHeadAddr             = 384};
enum {DEBUG_DATA_MmFreePageListHeadAddr               = 392};
enum {DEBUG_DATA_MmStandbyPageListHeadAddr            = 400};
enum {DEBUG_DATA_MmModifiedPageListHeadAddr           = 408};
enum {DEBUG_DATA_MmModifiedNoWritePageListHeadAddr    = 416};
enum {DEBUG_DATA_MmAvailablePagesAddr                 = 424};
enum {DEBUG_DATA_MmResidentAvailablePagesAddr         = 432};
enum {DEBUG_DATA_PoolTrackTableAddr                   = 440};
enum {DEBUG_DATA_NonPagedPoolDescriptorAddr           = 448};
enum {DEBUG_DATA_MmHighestUserAddressAddr             = 456};
enum {DEBUG_DATA_MmSystemRangeStartAddr               = 464};
enum {DEBUG_DATA_MmUserProbeAddressAddr               = 472};
enum {DEBUG_DATA_KdPrintCircularBufferAddr            = 480};
enum {DEBUG_DATA_KdPrintCircularBufferEndAddr         = 488};
enum {DEBUG_DATA_KdPrintWritePointerAddr              = 496};
enum {DEBUG_DATA_KdPrintRolloverCountAddr             = 504};
enum {DEBUG_DATA_MmLoadedUserImageListAddr            = 512};
enum {DEBUG_DATA_NtBuildLabAddr                       = 520};
enum {DEBUG_DATA_KiNormalSystemCall                   = 528};
enum {DEBUG_DATA_KiProcessorBlockAddr                 = 536};
enum {DEBUG_DATA_MmUnloadedDriversAddr                = 544};
enum {DEBUG_DATA_MmLastUnloadedDriverAddr             = 552};
enum {DEBUG_DATA_MmTriageActionTakenAddr              = 560};
enum {DEBUG_DATA_MmSpecialPoolTagAddr                 = 568};
enum {DEBUG_DATA_KernelVerifierAddr                   = 576};
enum {DEBUG_DATA_MmVerifierDataAddr                   = 584};
enum {DEBUG_DATA_MmAllocatedNonPagedPoolAddr          = 592};
enum {DEBUG_DATA_MmPeakCommitmentAddr                 = 600};
enum {DEBUG_DATA_MmTotalCommitLimitMaximumAddr        = 608};
enum {DEBUG_DATA_CmNtCSDVersionAddr                   = 616};
enum {DEBUG_DATA_MmPhysicalMemoryBlockAddr            = 624};
enum {DEBUG_DATA_MmSessionBase                        = 632};
enum {DEBUG_DATA_MmSessionSize                        = 640};
enum {DEBUG_DATA_MmSystemParentTablePage              = 648};
enum {DEBUG_DATA_MmVirtualTranslationBase             = 656};
enum {DEBUG_DATA_OffsetKThreadNextProcessor           = 664};
enum {DEBUG_DATA_OffsetKThreadTeb                     = 666};
enum {DEBUG_DATA_OffsetKThreadKernelStack             = 668};
enum {DEBUG_DATA_OffsetKThreadInitialStack            = 670};
enum {DEBUG_DATA_OffsetKThreadApcProcess              = 672};
enum {DEBUG_DATA_OffsetKThreadState                   = 674};
enum {DEBUG_DATA_OffsetKThreadBStore                  = 676};
enum {DEBUG_DATA_OffsetKThreadBStoreLimit             = 678};
enum {DEBUG_DATA_SizeEProcess                         = 680};
enum {DEBUG_DATA_OffsetEprocessPeb                    = 682};
enum {DEBUG_DATA_OffsetEprocessParentCID              = 684};
enum {DEBUG_DATA_OffsetEprocessDirectoryTableBase     = 686};
enum {DEBUG_DATA_SizePrcb                             = 688};
enum {DEBUG_DATA_OffsetPrcbDpcRoutine                 = 690};
enum {DEBUG_DATA_OffsetPrcbCurrentThread              = 692};
enum {DEBUG_DATA_OffsetPrcbMhz                        = 694};
enum {DEBUG_DATA_OffsetPrcbCpuType                    = 696};
enum {DEBUG_DATA_OffsetPrcbVendorString               = 698};
enum {DEBUG_DATA_OffsetPrcbProcessorState             = 700};
enum {DEBUG_DATA_OffsetPrcbNumber                     = 702};
enum {DEBUG_DATA_SizeEThread                          = 704};
enum {DEBUG_DATA_KdPrintCircularBufferPtrAddr         = 712};
enum {DEBUG_DATA_KdPrintBufferSizeAddr                = 720};
enum {DEBUG_DATA_PaeEnabled                        = 100000};
enum {DEBUG_DATA_SharedUserData                    = 100008};
enum {DEBUG_DATA_ProductType                       = 100016};
enum {DEBUG_DATA_SuiteMask                         = 100024};
enum {DEBUG_DATA_DumpWriterStatus                  = 100032};
enum {DEBUG_DATA_DumpFormatVersion                 = 100040};
enum {DEBUG_DATA_DumpWriterVersion                 = 100048};
enum {DEBUG_DATA_DumpPowerState                    = 100056};
enum {DEBUG_DATA_DumpMmStorage                     = 100064};
typedef struct _DEBUG_PROCESSOR_IDENTIFICATION_ALPHA
{
    unsigned long Type;
    unsigned long Revision;
} DEBUG_PROCESSOR_IDENTIFICATION_ALPHA, *PDEBUG_PROCESSOR_IDENTIFICATION_ALPHA;
typedef struct _DEBUG_PROCESSOR_IDENTIFICATION_AMD64
{
    unsigned long Family;
    unsigned long Model;
    unsigned long Stepping;
    CHAR  VendorString[16];
} DEBUG_PROCESSOR_IDENTIFICATION_AMD64, *PDEBUG_PROCESSOR_IDENTIFICATION_AMD64;
typedef struct _DEBUG_PROCESSOR_IDENTIFICATION_IA64
{
    unsigned long Model;
    unsigned long Revision;
    unsigned long Family;
    unsigned long ArchRev;
    CHAR  VendorString[16];
} DEBUG_PROCESSOR_IDENTIFICATION_IA64, *PDEBUG_PROCESSOR_IDENTIFICATION_IA64;
typedef struct _DEBUG_PROCESSOR_IDENTIFICATION_X86
{
    unsigned long Family;
    unsigned long Model;
    unsigned long Stepping;
    CHAR  VendorString[16];
} DEBUG_PROCESSOR_IDENTIFICATION_X86, *PDEBUG_PROCESSOR_IDENTIFICATION_X86;
typedef struct _DEBUG_PROCESSOR_IDENTIFICATION_ARM
{
    unsigned long Type;
    unsigned long Revision;
} DEBUG_PROCESSOR_IDENTIFICATION_ARM, *PDEBUG_PROCESSOR_IDENTIFICATION_ARM;
enum {DEBUG_DATA_KPCR_OFFSET                          = 0};
enum {DEBUG_DATA_KPRCB_OFFSET                         = 1};
enum {DEBUG_DATA_KTHREAD_OFFSET                       = 2};
enum {DEBUG_DATA_BASE_TRANSLATION_VIRTUAL_OFFSET      = 3};
enum {DEBUG_DATA_PROCESSOR_IDENTIFICATION             = 4};
enum {DEBUG_DATA_PROCESSOR_SPEED                      = 5};
///////////////////////////////////////////////////////////
[
	object,
	uuid(88f7dfab-3ea7-4c3a-aefb-c4e8106173aa),
	helpstring("IDebugDataSpaces")
]
interface IDebugDataSpaces : IUnknown {
	HRESULT ReadVirtual([in]  unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteVirtual([in]  unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT SearchVirtual([in]  unsigned __int64 Offset,[in] unsigned __int64 Length,[in] PVOID Pattern,[in] unsigned long PatternSize,[in] unsigned long PatternGranularity,[out] unsigned __int64* MatchOffset );
	HRESULT ReadVirtualUncached([in]  unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteVirtualUncached([in]  unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadPointersVirtual([in]  unsigned long Count,[in] unsigned __int64 Offset,[out] unsigned __int64* Ptrs );
	HRESULT WritePointersVirtual([in]  unsigned long Count,[in] unsigned __int64 Offset,[in] unsigned __int64* Ptrs );
	HRESULT ReadPhysical([in]  unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WritePhysical([in]  unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadControl([in]  unsigned long Processor,[in] unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteControl([in]  unsigned long Processor,[in] unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadIo([in]  unsigned long InterfaceType,[in] unsigned long BusNumber,[in] unsigned long AddressSpace,[in] unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteIo([in]  unsigned long InterfaceType,[in] unsigned long BusNumber,[in] unsigned long AddressSpace,[in] unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadMsr([in]  unsigned long Msr,[out] unsigned __int64* Value );
	HRESULT WriteMsr([in]  unsigned long Msr,[in] unsigned __int64 Value );
	HRESULT ReadBusData([in]  unsigned long BusDataType,[in] unsigned long BusNumber,[in] unsigned long SlotNumber,[in] unsigned long Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteBusData([in]  unsigned long BusDataType,[in] unsigned long BusNumber,[in] unsigned long SlotNumber,[in] unsigned long Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT CheckLowMemory(  );
	HRESULT ReadDebuggerData([in]  unsigned long Index,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* DataSize );
	HRESULT ReadProcessorSystemData([in]  unsigned long Processor,[in] unsigned long Index,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* DataSize );
};

enum {DEBUG_HANDLE_DATA_TYPE_BASIC                 = 0};
enum {DEBUG_HANDLE_DATA_TYPE_TYPE_NAME             = 1};
enum {DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME           = 2};
enum {DEBUG_HANDLE_DATA_TYPE_HANDLE_COUNT          = 3};
enum {DEBUG_HANDLE_DATA_TYPE_TYPE_NAME_WIDE        = 4};
enum {DEBUG_HANDLE_DATA_TYPE_OBJECT_NAME_WIDE      = 5};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_THREAD_1         = 6};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_1         = 7};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_MUTANT_2         = 8};
enum {DEBUG_HANDLE_DATA_TYPE_PER_HANDLE_OPERATIONS = 9};
enum {DEBUG_HANDLE_DATA_TYPE_ALL_HANDLE_OPERATIONS = 10};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_1        = 11};
enum {DEBUG_HANDLE_DATA_TYPE_MINI_PROCESS_2        = 12};
typedef struct _DEBUG_HANDLE_DATA_BASIC
{
    unsigned long TypeNameSize;
    unsigned long ObjectNameSize;
    unsigned long Attributes;
    unsigned long GrantedAccess;
    unsigned long HandleCount;
    unsigned long PointerCount;
} DEBUG_HANDLE_DATA_BASIC, *PDEBUG_HANDLE_DATA_BASIC;
///////////////////////////////////////////////////////////
[
	object,
	uuid(7a5e852f-96e9-468f-ac1b-0b3addc4a049),
	helpstring("IDebugDataSpaces2")
]
interface IDebugDataSpaces2 : IUnknown {
	HRESULT ReadVirtual([in]  unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteVirtual([in]  unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT SearchVirtual([in]  unsigned __int64 Offset,[in] unsigned __int64 Length,[in] PVOID Pattern,[in] unsigned long PatternSize,[in] unsigned long PatternGranularity,[out] unsigned __int64* MatchOffset );
	HRESULT ReadVirtualUncached([in]  unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteVirtualUncached([in]  unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadPointersVirtual([in]  unsigned long Count,[in] unsigned __int64 Offset,[out] unsigned __int64* Ptrs );
	HRESULT WritePointersVirtual([in]  unsigned long Count,[in] unsigned __int64 Offset,[in] unsigned __int64* Ptrs );
	HRESULT ReadPhysical([in]  unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WritePhysical([in]  unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadControl([in]  unsigned long Processor,[in] unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteControl([in]  unsigned long Processor,[in] unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadIo([in]  unsigned long InterfaceType,[in] unsigned long BusNumber,[in] unsigned long AddressSpace,[in] unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteIo([in]  unsigned long InterfaceType,[in] unsigned long BusNumber,[in] unsigned long AddressSpace,[in] unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadMsr([in]  unsigned long Msr,[out] unsigned __int64* Value );
	HRESULT WriteMsr([in]  unsigned long Msr,[in] unsigned __int64 Value );
	HRESULT ReadBusData([in]  unsigned long BusDataType,[in] unsigned long BusNumber,[in] unsigned long SlotNumber,[in] unsigned long Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteBusData([in]  unsigned long BusDataType,[in] unsigned long BusNumber,[in] unsigned long SlotNumber,[in] unsigned long Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT CheckLowMemory(  );
	HRESULT ReadDebuggerData([in]  unsigned long Index,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* DataSize );
	HRESULT ReadProcessorSystemData([in]  unsigned long Processor,[in] unsigned long Index,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* DataSize );
	HRESULT VirtualToPhysical([in]  unsigned __int64 Virtual,[out] unsigned __int64* Physical );
	HRESULT GetVirtualTranslationPhysicalOffsets([in]  unsigned __int64 Virtual,[out,optional] unsigned __int64* Offsets,[in,optional] unsigned long OffsetsSize,[out,optional] unsigned long* Levels );
	HRESULT ReadHandleData([in]  unsigned __int64 Handle,[in] unsigned long DataType,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* DataSize );
	HRESULT FillVirtual([in]  unsigned __int64 Start,[in] unsigned long Size,[in] PVOID Pattern,[in] unsigned long PatternSize,[out,optional] unsigned long* Filled );
	HRESULT FillPhysical([in]  unsigned __int64 Start,[in] unsigned long Size,[in] PVOID Pattern,[in] unsigned long PatternSize,[out,optional] unsigned long* Filled );
	HRESULT QueryVirtual([in]  unsigned __int64 Offset,[out] PMEMORY_BASIC_INFORMATION64 Info );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(23f79d6c-8aaf-4f7c-a607-9995f5407e63),
	helpstring("IDebugDataSpaces3")
]
interface IDebugDataSpaces3 : IUnknown {
	HRESULT ReadVirtual([in]  unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteVirtual([in]  unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT SearchVirtual([in]  unsigned __int64 Offset,[in] unsigned __int64 Length,[in] PVOID Pattern,[in] unsigned long PatternSize,[in] unsigned long PatternGranularity,[out] unsigned __int64* MatchOffset );
	HRESULT ReadVirtualUncached([in]  unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteVirtualUncached([in]  unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadPointersVirtual([in]  unsigned long Count,[in] unsigned __int64 Offset,[out] unsigned __int64* Ptrs );
	HRESULT WritePointersVirtual([in]  unsigned long Count,[in] unsigned __int64 Offset,[in] unsigned __int64* Ptrs );
	HRESULT ReadPhysical([in]  unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WritePhysical([in]  unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadControl([in]  unsigned long Processor,[in] unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteControl([in]  unsigned long Processor,[in] unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadIo([in]  unsigned long InterfaceType,[in] unsigned long BusNumber,[in] unsigned long AddressSpace,[in] unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteIo([in]  unsigned long InterfaceType,[in] unsigned long BusNumber,[in] unsigned long AddressSpace,[in] unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadMsr([in]  unsigned long Msr,[out] unsigned __int64* Value );
	HRESULT WriteMsr([in]  unsigned long Msr,[in] unsigned __int64 Value );
	HRESULT ReadBusData([in]  unsigned long BusDataType,[in] unsigned long BusNumber,[in] unsigned long SlotNumber,[in] unsigned long Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteBusData([in]  unsigned long BusDataType,[in] unsigned long BusNumber,[in] unsigned long SlotNumber,[in] unsigned long Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT CheckLowMemory(  );
	HRESULT ReadDebuggerData([in]  unsigned long Index,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* DataSize );
	HRESULT ReadProcessorSystemData([in]  unsigned long Processor,[in] unsigned long Index,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* DataSize );
	HRESULT VirtualToPhysical([in]  unsigned __int64 Virtual,[out] unsigned __int64* Physical );
	HRESULT GetVirtualTranslationPhysicalOffsets([in]  unsigned __int64 Virtual,[out,optional] unsigned __int64* Offsets,[in,optional] unsigned long OffsetsSize,[out,optional] unsigned long* Levels );
	HRESULT ReadHandleData([in]  unsigned __int64 Handle,[in] unsigned long DataType,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* DataSize );
	HRESULT FillVirtual([in]  unsigned __int64 Start,[in] unsigned long Size,[in] PVOID Pattern,[in] unsigned long PatternSize,[out,optional] unsigned long* Filled );
	HRESULT FillPhysical([in]  unsigned __int64 Start,[in] unsigned long Size,[in] PVOID Pattern,[in] unsigned long PatternSize,[out,optional] unsigned long* Filled );
	HRESULT QueryVirtual([in]  unsigned __int64 Offset,[out] PMEMORY_BASIC_INFORMATION64 Info );
	HRESULT ReadImageNtHeaders([in]  unsigned __int64 ImageBase,[out] PIMAGE_NT_HEADERS64 Headers );
	HRESULT ReadTagged([in]  LPGUID Tag,[in] unsigned long Offset,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* TotalSize );
	HRESULT StartEnumTagged([out]  unsigned __int64* Handle );
	HRESULT GetNextTagged([in]  unsigned __int64 Handle,[out] LPGUID Tag,[out] unsigned long* Size );
	HRESULT EndEnumTagged([in]  unsigned __int64 Handle );
};

enum {DEBUG_OFFSINFO_VIRTUAL_SOURCE = 0x00000001};
enum {DEBUG_VSOURCE_INVALID      = 0x00000000};
enum {DEBUG_VSOURCE_DEBUGGEE     = 0x00000001};
enum {DEBUG_VSOURCE_MAPPED_IMAGE = 0x00000002};
enum {DEBUG_VSEARCH_DEFAULT       = 0x00000000};
enum {DEBUG_VSEARCH_WRITABLE_ONLY = 0x00000001};
enum {DEBUG_PHYSICAL_DEFAULT        = 0x00000000};
enum {DEBUG_PHYSICAL_CACHED         = 0x00000001};
enum {DEBUG_PHYSICAL_UNCACHED       = 0x00000002};
enum {DEBUG_PHYSICAL_WRITE_COMBINED = 0x00000003};
///////////////////////////////////////////////////////////
[
	object,
	uuid(d98ada1f-29e9-4ef5-a6c0-e53349883212),
	helpstring("IDebugDataSpaces4")
]
interface IDebugDataSpaces4 : IUnknown {
	HRESULT ReadVirtual([in]  unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteVirtual([in]  unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT SearchVirtual([in]  unsigned __int64 Offset,[in] unsigned __int64 Length,[in] PVOID Pattern,[in] unsigned long PatternSize,[in] unsigned long PatternGranularity,[out] unsigned __int64* MatchOffset );
	HRESULT ReadVirtualUncached([in]  unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteVirtualUncached([in]  unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadPointersVirtual([in]  unsigned long Count,[in] unsigned __int64 Offset,[out] unsigned __int64* Ptrs );
	HRESULT WritePointersVirtual([in]  unsigned long Count,[in] unsigned __int64 Offset,[in] unsigned __int64* Ptrs );
	HRESULT ReadPhysical([in]  unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WritePhysical([in]  unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadControl([in]  unsigned long Processor,[in] unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteControl([in]  unsigned long Processor,[in] unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadIo([in]  unsigned long InterfaceType,[in] unsigned long BusNumber,[in] unsigned long AddressSpace,[in] unsigned __int64 Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteIo([in]  unsigned long InterfaceType,[in] unsigned long BusNumber,[in] unsigned long AddressSpace,[in] unsigned __int64 Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT ReadMsr([in]  unsigned long Msr,[out] unsigned __int64* Value );
	HRESULT WriteMsr([in]  unsigned long Msr,[in] unsigned __int64 Value );
	HRESULT ReadBusData([in]  unsigned long BusDataType,[in] unsigned long BusNumber,[in] unsigned long SlotNumber,[in] unsigned long Offset,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteBusData([in]  unsigned long BusDataType,[in] unsigned long BusNumber,[in] unsigned long SlotNumber,[in] unsigned long Offset,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT CheckLowMemory(  );
	HRESULT ReadDebuggerData([in]  unsigned long Index,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* DataSize );
	HRESULT ReadProcessorSystemData([in]  unsigned long Processor,[in] unsigned long Index,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* DataSize );
	HRESULT VirtualToPhysical([in]  unsigned __int64 Virtual,[out] unsigned __int64* Physical );
	HRESULT GetVirtualTranslationPhysicalOffsets([in]  unsigned __int64 Virtual,[out,optional] unsigned __int64* Offsets,[in,optional] unsigned long OffsetsSize,[out,optional] unsigned long* Levels );
	HRESULT ReadHandleData([in]  unsigned __int64 Handle,[in] unsigned long DataType,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* DataSize );
	HRESULT FillVirtual([in]  unsigned __int64 Start,[in] unsigned long Size,[in] PVOID Pattern,[in] unsigned long PatternSize,[out,optional] unsigned long* Filled );
	HRESULT FillPhysical([in]  unsigned __int64 Start,[in] unsigned long Size,[in] PVOID Pattern,[in] unsigned long PatternSize,[out,optional] unsigned long* Filled );
	HRESULT QueryVirtual([in]  unsigned __int64 Offset,[out] PMEMORY_BASIC_INFORMATION64 Info );
	HRESULT ReadImageNtHeaders([in]  unsigned __int64 ImageBase,[out] PIMAGE_NT_HEADERS64 Headers );
	HRESULT ReadTagged([in]  LPGUID Tag,[in] unsigned long Offset,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* TotalSize );
	HRESULT StartEnumTagged([out]  unsigned __int64* Handle );
	HRESULT GetNextTagged([in]  unsigned __int64 Handle,[out] LPGUID Tag,[out] unsigned long* Size );
	HRESULT EndEnumTagged([in]  unsigned __int64 Handle );
	HRESULT GetOffsetInformation([in]  unsigned long Space,[in] unsigned long Which,[in] unsigned __int64 Offset,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* InfoSize );
	HRESULT GetNextDifferentlyValidOffsetVirtual([in]  unsigned __int64 Offset,[out] unsigned __int64* NextOffset );
	HRESULT GetValidRegionVirtual([in]  unsigned __int64 Base,[in] unsigned long Size,[out] unsigned __int64* ValidBase,[out] unsigned long* ValidSize );
	HRESULT SearchVirtual2([in]  unsigned __int64 Offset,[in] unsigned __int64 Length,[in] unsigned long Flags,[in] PVOID Pattern,[in] unsigned long PatternSize,[in] unsigned long PatternGranularity,[out] unsigned __int64* MatchOffset );
	HRESULT ReadMultiByteStringVirtual([in]  unsigned __int64 Offset,[in] unsigned long MaxBytes,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* StringBytes );
	HRESULT ReadMultiByteStringVirtualWide([in]  unsigned __int64 Offset,[in] unsigned long MaxBytes,[in] unsigned long CodePage,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* StringBytes );
	HRESULT ReadUnicodeStringVirtual([in]  unsigned __int64 Offset,[in] unsigned long MaxBytes,[in] unsigned long CodePage,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* StringBytes );
	HRESULT ReadUnicodeStringVirtualWide([in]  unsigned __int64 Offset,[in] unsigned long MaxBytes,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* StringBytes );
	HRESULT ReadPhysical2([in]  unsigned __int64 Offset,[in] unsigned long Flags,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WritePhysical2([in]  unsigned __int64 Offset,[in] unsigned long Flags,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
};

enum {DEBUG_EVENT_BREAKPOINT              = 0x00000001};
enum {DEBUG_EVENT_EXCEPTION               = 0x00000002};
enum {DEBUG_EVENT_CREATE_THREAD           = 0x00000004};
enum {DEBUG_EVENT_EXIT_THREAD             = 0x00000008};
enum {DEBUG_EVENT_CREATE_PROCESS          = 0x00000010};
enum {DEBUG_EVENT_EXIT_PROCESS            = 0x00000020};
enum {DEBUG_EVENT_LOAD_MODULE             = 0x00000040};
enum {DEBUG_EVENT_UNLOAD_MODULE           = 0x00000080};
enum {DEBUG_EVENT_SYSTEM_ERROR            = 0x00000100};
enum {DEBUG_EVENT_SESSION_STATUS          = 0x00000200};
enum {DEBUG_EVENT_CHANGE_DEBUGGEE_STATE   = 0x00000400};
enum {DEBUG_EVENT_CHANGE_ENGINE_STATE     = 0x00000800};
enum {DEBUG_EVENT_CHANGE_SYMBOL_STATE     = 0x00001000};
enum {DEBUG_SESSION_ACTIVE                       = 0x00000000};
enum {DEBUG_SESSION_END_SESSION_ACTIVE_TERMINATE = 0x00000001};
enum {DEBUG_SESSION_END_SESSION_ACTIVE_DETACH    = 0x00000002};
enum {DEBUG_SESSION_END_SESSION_PASSIVE          = 0x00000003};
enum {DEBUG_SESSION_END                          = 0x00000004};
enum {DEBUG_SESSION_REBOOT                       = 0x00000005};
enum {DEBUG_SESSION_HIBERNATE                    = 0x00000006};
enum {DEBUG_SESSION_FAILURE                      = 0x00000007};
enum {DEBUG_CDS_ALL       = 0xffffffff};
enum {DEBUG_CDS_REGISTERS = 0x00000001};
enum {DEBUG_CDS_DATA      = 0x00000002};
enum {DEBUG_CES_ALL                 = 0xffffffff};
enum {DEBUG_CES_CURRENT_THREAD      = 0x00000001};
enum {DEBUG_CES_EFFECTIVE_PROCESSOR = 0x00000002};
enum {DEBUG_CES_BREAKPOINTS         = 0x00000004};
enum {DEBUG_CES_CODE_LEVEL          = 0x00000008};
enum {DEBUG_CES_EXECUTION_STATUS    = 0x00000010};
enum {DEBUG_CES_ENGINE_OPTIONS      = 0x00000020};
enum {DEBUG_CES_LOG_FILE            = 0x00000040};
enum {DEBUG_CES_RADIX               = 0x00000080};
enum {DEBUG_CES_EVENT_FILTERS       = 0x00000100};
enum {DEBUG_CES_PROCESS_OPTIONS     = 0x00000200};
enum {DEBUG_CES_EXTENSIONS          = 0x00000400};
enum {DEBUG_CES_SYSTEMS             = 0x00000800};
enum {DEBUG_CES_ASSEMBLY_OPTIONS    = 0x00001000};
enum {DEBUG_CES_EXPRESSION_SYNTAX   = 0x00002000};
enum {DEBUG_CES_TEXT_REPLACEMENTS   = 0x00004000};
enum {DEBUG_CSS_ALL            = 0xffffffff};
enum {DEBUG_CSS_LOADS          = 0x00000001};
enum {DEBUG_CSS_UNLOADS        = 0x00000002};
enum {DEBUG_CSS_SCOPE          = 0x00000004};
enum {DEBUG_CSS_PATHS          = 0x00000008};
enum {DEBUG_CSS_SYMBOL_OPTIONS = 0x00000010};
enum {DEBUG_CSS_TYPE_OPTIONS   = 0x00000020};
///////////////////////////////////////////////////////////
[
	object,
	uuid(337be28b-5036-4d72-b6bf-c45fbb9f2eaa),
	helpstring("IDebugEventCallbacks")
]
interface IDebugEventCallbacks : IUnknown {
	HRESULT GetInterestMask([out]  unsigned long* Mask );
	HRESULT Breakpoint([in]  IDebugBreakpoint* Bp );
	HRESULT Exception([in]  PEXCEPTION_RECORD64 Exception,[in] unsigned long FirstChance );
	HRESULT CreateThread([in]  unsigned __int64 Handle,[in] unsigned __int64 DataOffset,[in] unsigned __int64 StartOffset );
	HRESULT ExitThread([in]  unsigned long ExitCode );
	HRESULT CreateProcess([in]  unsigned __int64 ImageFileHandle,[in] unsigned __int64 Handle,[in] unsigned __int64 BaseOffset,[in] unsigned long ModuleSize,[in,optional] const char* ModuleName,[in,optional] const char* ImageName,[in,optional] unsigned long CheckSum,[in,optional] unsigned long TimeDateStamp,[in,optional] unsigned __int64 InitialThreadHandle,[in,optional] unsigned __int64 ThreadDataOffset,[in,optional] unsigned __int64 StartOffset );
	HRESULT ExitProcess([in]  unsigned long ExitCode );
	HRESULT LoadModule([in]  unsigned __int64 ImageFileHandle,[in] unsigned __int64 BaseOffset,[in] unsigned long ModuleSize,[in,optional] const char* ModuleName,[in,optional] const char* ImageName,[in,optional] unsigned long CheckSum,[in,optional] unsigned long TimeDateStamp );
	HRESULT UnloadModule([in,optional]  const char* ImageBaseName,[in,optional] unsigned __int64 BaseOffset );
	HRESULT SystemError([in]  unsigned long Error,[in] unsigned long Level );
	HRESULT SessionStatus([in]  unsigned long Status );
	HRESULT ChangeDebuggeeState([in]  unsigned long Flags,[in] unsigned __int64 Argument );
	HRESULT ChangeEngineState([in]  unsigned long Flags,[in] unsigned __int64 Argument );
	HRESULT ChangeSymbolState([in]  unsigned long Flags,[in] unsigned __int64 Argument );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(0690e046-9c23-45ac-a04f-987ac29ad0d3),
	helpstring("IDebugEventCallbacksWide")
]
interface IDebugEventCallbacksWide : IUnknown {
	HRESULT GetInterestMask([out]  unsigned long* Mask );
	HRESULT Breakpoint([in]  IDebugBreakpoint2* Bp );
	HRESULT Exception([in]  PEXCEPTION_RECORD64 Exception,[in] unsigned long FirstChance );
	HRESULT CreateThread([in]  unsigned __int64 Handle,[in] unsigned __int64 DataOffset,[in] unsigned __int64 StartOffset );
	HRESULT ExitThread([in]  unsigned long ExitCode );
	HRESULT CreateProcess([in]  unsigned __int64 ImageFileHandle,[in] unsigned __int64 Handle,[in] unsigned __int64 BaseOffset,[in] unsigned long ModuleSize,[in,optional] const wchar_t* ModuleName,[in,optional] const wchar_t* ImageName,[in,optional] unsigned long CheckSum,[in,optional] unsigned long TimeDateStamp,[in,optional] unsigned __int64 InitialThreadHandle,[in,optional] unsigned __int64 ThreadDataOffset,[in,optional] unsigned __int64 StartOffset );
	HRESULT ExitProcess([in]  unsigned long ExitCode );
	HRESULT LoadModule([in]  unsigned __int64 ImageFileHandle,[in] unsigned __int64 BaseOffset,[in] unsigned long ModuleSize,[in,optional] const wchar_t* ModuleName,[in,optional] const wchar_t* ImageName,[in,optional] unsigned long CheckSum,[in,optional] unsigned long TimeDateStamp );
	HRESULT UnloadModule([in,optional]  const wchar_t* ImageBaseName,[in,optional] unsigned __int64 BaseOffset );
	HRESULT SystemError([in]  unsigned long Error,[in] unsigned long Level );
	HRESULT SessionStatus([in]  unsigned long Status );
	HRESULT ChangeDebuggeeState([in]  unsigned long Flags,[in] unsigned __int64 Argument );
	HRESULT ChangeEngineState([in]  unsigned long Flags,[in] unsigned __int64 Argument );
	HRESULT ChangeSymbolState([in]  unsigned long Flags,[in] unsigned __int64 Argument );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(9f50e42c-f136-499e-9a97-73036c94ed2d),
	helpstring("IDebugInputCallbacks")
]
interface IDebugInputCallbacks : IUnknown {
	HRESULT StartInput([in]  unsigned long BufferSize );
	HRESULT EndInput(  );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(4bf58045-d654-4c40-b0af-683090f356dc),
	helpstring("IDebugOutputCallbacks")
]
interface IDebugOutputCallbacks : IUnknown {
	HRESULT Output([in]  unsigned long Mask,[in] const char* Text );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(4c7fd663-c394-4e26-8ef1-34ad5ed3764c),
	helpstring("IDebugOutputCallbacksWide")
]
interface IDebugOutputCallbacksWide : IUnknown {
	HRESULT Output([in]  unsigned long Mask,[in] const wchar_t* Text );
};

enum {DEBUG_OUTCBI_EXPLICIT_FLUSH = 0x00000001};
enum {DEBUG_OUTCBI_TEXT           = 0x00000002};
enum {DEBUG_OUTCBI_DML            = 0x00000004};
enum {DEBUG_OUTCBI_ANY_FORMAT     = 0x00000006};
enum {DEBUG_OUTCB_TEXT           = 0};
enum {DEBUG_OUTCB_DML            = 1};
enum {DEBUG_OUTCB_EXPLICIT_FLUSH = 2};
enum {DEBUG_OUTCBF_COMBINED_EXPLICIT_FLUSH    = 0x00000001};
enum {DEBUG_OUTCBF_DML_HAS_TAGS               = 0x00000002};
enum {DEBUG_OUTCBF_DML_HAS_SPECIAL_CHARACTERS = 0x00000004};
///////////////////////////////////////////////////////////
[
	object,
	uuid(67721fe9-56d2-4a44-a325-2b65513ce6eb),
	helpstring("IDebugOutputCallbacks2")
]
interface IDebugOutputCallbacks2 : IUnknown {
	HRESULT Output([in]  unsigned long Mask,[in] const char* Text );
	HRESULT GetInterestMask([out]  unsigned long* Mask );
	HRESULT Output2([in]  unsigned long Which,[in] unsigned long Flags,[in] unsigned __int64 Arg,[in,optional] const wchar_t* Text );
};

enum {DEBUG_REGISTERS_DEFAULT = 0x00000000};
enum {DEBUG_REGISTERS_INT32   = 0x00000001};
enum {DEBUG_REGISTERS_INT64   = 0x00000002};
enum {DEBUG_REGISTERS_FLOAT   = 0x00000004};
enum {DEBUG_REGISTERS_ALL     = 0x00000007};
enum {DEBUG_REGISTER_SUB_REGISTER = 0x00000001};
typedef struct _DEBUG_REGISTER_DESCRIPTION
{
    // DEBUG_VALUE type.
    unsigned long Type;
    unsigned long Flags;

    // If this is a subregister the full
    // registers description index is
    // given in SubregMaster.  The length, mask
    // and shift describe how the subregisters
    // bits fit into the full register.
    unsigned long SubregMaster;
    unsigned long SubregLength;
    unsigned __int64 SubregMask;
    unsigned long SubregShift;

    unsigned long Reserved0;
} DEBUG_REGISTER_DESCRIPTION, *PDEBUG_REGISTER_DESCRIPTION;
///////////////////////////////////////////////////////////
[
	object,
	uuid(ce289126-9e84-45a7-937e-67bb18691493),
	helpstring("IDebugRegisters")
]
interface IDebugRegisters : IUnknown {
	HRESULT GetNumberRegisters([out]  unsigned long* Number );
	HRESULT GetDescription([in]  unsigned long Register,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[out,optional] PDEBUG_REGISTER_DESCRIPTION Desc );
	HRESULT GetIndexByName([in]  const char* Name,[out] unsigned long* Index );
	HRESULT GetValue([in]  unsigned long Register,[out] PDEBUG_VALUE Value );
	HRESULT SetValue([in]  unsigned long Register,[in] PDEBUG_VALUE Value );
	HRESULT GetValues([in]  unsigned long Count,[in,optional] unsigned long* Indices,[in,optional] unsigned long Start,[out,optional] PDEBUG_VALUE Values );
	HRESULT SetValues([in]  unsigned long Count,[in,optional] unsigned long* Indices,[in,optional] unsigned long Start,[in,optional] PDEBUG_VALUE Values );
	HRESULT OutputRegisters([in]  unsigned long OutputControl,[in] unsigned long Flags );
	HRESULT GetInstructionOffset([out]  unsigned __int64* Offset );
	HRESULT GetStackOffset([out]  unsigned __int64* Offset );
	HRESULT GetFrameOffset([out]  unsigned __int64* Offset );
};

enum {DEBUG_REGSRC_DEBUGGEE = 0x00000000};
enum {DEBUG_REGSRC_EXPLICIT = 0x00000001};
enum {DEBUG_REGSRC_FRAME    = 0x00000002};
///////////////////////////////////////////////////////////
[
	object,
	uuid(1656afa9-19c6-4e3a-97e7-5dc9160cf9c4),
	helpstring("IDebugRegisters2")
]
interface IDebugRegisters2 : IUnknown {
	HRESULT GetNumberRegisters([out]  unsigned long* Number );
	HRESULT GetDescription([in]  unsigned long Register,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[out,optional] PDEBUG_REGISTER_DESCRIPTION Desc );
	HRESULT GetIndexByName([in]  const char* Name,[out] unsigned long* Index );
	HRESULT GetValue([in]  unsigned long Register,[out] PDEBUG_VALUE Value );
	HRESULT SetValue([in]  unsigned long Register,[in] PDEBUG_VALUE Value );
	HRESULT GetValues([in]  unsigned long Count,[in,optional] unsigned long* Indices,[in,optional] unsigned long Start,[out,optional] PDEBUG_VALUE Values );
	HRESULT SetValues([in]  unsigned long Count,[in,optional] unsigned long* Indices,[in,optional] unsigned long Start,[in,optional] PDEBUG_VALUE Values );
	HRESULT OutputRegisters([in]  unsigned long OutputControl,[in] unsigned long Flags );
	HRESULT GetInstructionOffset([out]  unsigned __int64* Offset );
	HRESULT GetStackOffset([out]  unsigned __int64* Offset );
	HRESULT GetFrameOffset([out]  unsigned __int64* Offset );
	HRESULT GetDescriptionWide([in]  unsigned long Register,[out,optional] wchar_t* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[out,optional] PDEBUG_REGISTER_DESCRIPTION Desc );
	HRESULT GetIndexByNameWide([in]  const wchar_t* Name,[out] unsigned long* Index );
	HRESULT GetNumberPseudoRegisters([out]  unsigned long* Number );
	HRESULT GetPseudoDescription([in]  unsigned long Register,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[out,optional] unsigned __int64* TypeModule,[out,optional] unsigned long* TypeId );
	HRESULT GetPseudoDescriptionWide([in]  unsigned long Register,[out,optional] wchar_t* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[out,optional] unsigned __int64* TypeModule,[out,optional] unsigned long* TypeId );
	HRESULT GetPseudoIndexByName([in]  const char* Name,[out] unsigned long* Index );
	HRESULT GetPseudoIndexByNameWide([in]  const wchar_t* Name,[out] unsigned long* Index );
	HRESULT GetPseudoValues([in]  unsigned long Source,[in] unsigned long Count,[in,optional] unsigned long* Indices,[in,optional] unsigned long Start,[out,optional] PDEBUG_VALUE Values );
	HRESULT SetPseudoValues([in]  unsigned long Source,[in] unsigned long Count,[in,optional] unsigned long* Indices,[in,optional] unsigned long Start,[in,optional] PDEBUG_VALUE Values );
	HRESULT GetValues2([in]  unsigned long Source,[in] unsigned long Count,[in,optional] unsigned long* Indices,[in,optional] unsigned long Start,[out,optional] PDEBUG_VALUE Values );
	HRESULT SetValues2([in]  unsigned long Source,[in] unsigned long Count,[in,optional] unsigned long* Indices,[in,optional] unsigned long Start,[in,optional] PDEBUG_VALUE Values );
	HRESULT OutputRegisters2([in]  unsigned long OutputControl,[in] unsigned long Source,[in] unsigned long Flags );
	HRESULT GetInstructionOffset2([in]  unsigned long Source,[out] unsigned __int64* Offset );
	HRESULT GetStackOffset2([in]  unsigned long Source,[out] unsigned __int64* Offset );
	HRESULT GetFrameOffset2([in]  unsigned long Source,[out] unsigned __int64* Offset );
};

enum {DEBUG_OUTPUT_SYMBOLS_DEFAULT    = 0x00000000};
enum {DEBUG_OUTPUT_SYMBOLS_NO_NAMES   = 0x00000001};
enum {DEBUG_OUTPUT_SYMBOLS_NO_OFFSETS = 0x00000002};
enum {DEBUG_OUTPUT_SYMBOLS_NO_VALUES  = 0x00000004};
enum {DEBUG_OUTPUT_SYMBOLS_NO_TYPES   = 0x00000010};
enum {DEBUG_SYMBOL_EXPANSION_LEVEL_MASK = 0x0000000f};
enum {DEBUG_SYMBOL_EXPANDED             = 0x00000010};
enum {DEBUG_SYMBOL_READ_ONLY            = 0x00000020};
enum {DEBUG_SYMBOL_IS_ARRAY             = 0x00000040};
enum {DEBUG_SYMBOL_IS_FLOAT             = 0x00000080};
enum {DEBUG_SYMBOL_IS_ARGUMENT          = 0x00000100};
enum {DEBUG_SYMBOL_IS_LOCAL             = 0x00000200};
typedef struct _DEBUG_SYMBOL_PARAMETERS
{
    unsigned __int64 Module;
    unsigned long TypeId;
    // ParentSymbol may be DEBUG_ANY_ID when unknown.
    unsigned long ParentSymbol;
    // A subelement of a symbol can be a field, such
    // as in structs, unions or classes; or an array
    // element count for arrays.
    unsigned long SubElements;
    unsigned long Flags;
    unsigned __int64 Reserved;
} DEBUG_SYMBOL_PARAMETERS, *PDEBUG_SYMBOL_PARAMETERS;
///////////////////////////////////////////////////////////
[
	object,
	uuid(f2528316-0f1a-4431-aeed-11d096e1e2ab),
	helpstring("IDebugSymbolGroup")
]
interface IDebugSymbolGroup : IUnknown {
	HRESULT GetNumberSymbols([out]  unsigned long* Number );
	HRESULT AddSymbol([in]  const char* Name,[in,out] unsigned long* Index );
	HRESULT RemoveSymbolByName([in]  const char* Name );
	HRESULT RemoveSymbolByIndex([in]  unsigned long Index );
	HRESULT GetSymbolName([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetSymbolParameters([in]  unsigned long Start,[in] unsigned long Count,[out] PDEBUG_SYMBOL_PARAMETERS Params );
	HRESULT ExpandSymbol([in]  unsigned long Index,[in] BOOL Expand );
	HRESULT OutputSymbols([in]  unsigned long OutputControl,[in] unsigned long Flags,[in] unsigned long Start,[in] unsigned long Count );
	HRESULT WriteSymbol([in]  unsigned long Index,[in] const char* Value );
	HRESULT OutputAsType([in]  unsigned long Index,[in] const char* Type );
};

enum {DEBUG_SYMENT_IS_CODE      = 0x00000001};
enum {DEBUG_SYMENT_IS_DATA      = 0x00000002};
enum {DEBUG_SYMENT_IS_PARAMETER = 0x00000004};
enum {DEBUG_SYMENT_IS_LOCAL     = 0x00000008};
enum {DEBUG_SYMENT_IS_MANAGED   = 0x00000010};
enum {DEBUG_SYMENT_IS_SYNTHETIC = 0x00000020};
typedef struct _DEBUG_SYMBOL_ENTRY
{
    unsigned __int64 ModuleBase;
    unsigned __int64 Offset;
    unsigned __int64 Id;
    unsigned __int64 Arg64;
    unsigned long Size;
    unsigned long Flags;
    unsigned long TypeId;
    unsigned long NameSize;
    unsigned long Token;
    unsigned long Tag;
    unsigned long Arg32;
    unsigned long Reserved;
} DEBUG_SYMBOL_ENTRY, *PDEBUG_SYMBOL_ENTRY;
///////////////////////////////////////////////////////////
[
	object,
	uuid(6a7ccc5f-fb5e-4dcc-b41c-6c20307bccc7),
	helpstring("IDebugSymbolGroup2")
]
interface IDebugSymbolGroup2 : IUnknown {
	HRESULT GetNumberSymbols([out]  unsigned long* Number );
	HRESULT AddSymbol([in]  const char* Name,[in,out] unsigned long* Index );
	HRESULT RemoveSymbolByName([in]  const char* Name );
	HRESULT RemoveSymbolByIndex([in]  unsigned long Index );
	HRESULT GetSymbolName([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetSymbolParameters([in]  unsigned long Start,[in] unsigned long Count,[out] PDEBUG_SYMBOL_PARAMETERS Params );
	HRESULT ExpandSymbol([in]  unsigned long Index,[in] BOOL Expand );
	HRESULT OutputSymbols([in]  unsigned long OutputControl,[in] unsigned long Flags,[in] unsigned long Start,[in] unsigned long Count );
	HRESULT WriteSymbol([in]  unsigned long Index,[in] const char* Value );
	HRESULT OutputAsType([in]  unsigned long Index,[in] const char* Type );
	HRESULT AddSymbolWide([in]  const wchar_t* Name,[in,out] unsigned long* Index );
	HRESULT RemoveSymbolByNameWide([in]  const wchar_t* Name );
	HRESULT GetSymbolNameWide([in]  unsigned long Index,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
	HRESULT WriteSymbolWide([in]  unsigned long Index,[in] const wchar_t* Value );
	HRESULT OutputAsTypeWide([in]  unsigned long Index,[in] const wchar_t* Type );
	HRESULT GetSymbolTypeName([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetSymbolTypeNameWide([in]  unsigned long Index,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetSymbolSize([in]  unsigned long Index,[out] unsigned long* Size );
	HRESULT GetSymbolOffset([in]  unsigned long Index,[out] unsigned __int64* Offset );
	HRESULT GetSymbolRegister([in]  unsigned long Index,[out] unsigned long* Register );
	HRESULT GetSymbolValueText([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetSymbolValueTextWide([in]  unsigned long Index,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetSymbolEntryInformation([in]  unsigned long Index,[out] PDEBUG_SYMBOL_ENTRY Entry );
};

enum {DEBUG_MODULE_LOADED            = 0x00000000};
enum {DEBUG_MODULE_UNLOADED          = 0x00000001};
enum {DEBUG_MODULE_USER_MODE         = 0x00000002};
enum {DEBUG_MODULE_EXPLICIT          = 0x00000008};
enum {DEBUG_MODULE_SECONDARY         = 0x00000010};
enum {DEBUG_MODULE_SYNTHETIC         = 0x00000020};
enum {DEBUG_MODULE_SYM_BAD_CHECKSUM  = 0x00010000};
enum {DEBUG_SYMTYPE_NONE     = 0};
enum {DEBUG_SYMTYPE_COFF     = 1};
enum {DEBUG_SYMTYPE_CODEVIEW = 2};
enum {DEBUG_SYMTYPE_PDB      = 3};
enum {DEBUG_SYMTYPE_EXPORT   = 4};
enum {DEBUG_SYMTYPE_DEFERRED = 5};
enum {DEBUG_SYMTYPE_SYM      = 6};
enum {DEBUG_SYMTYPE_DIA      = 7};
typedef struct _DEBUG_MODULE_PARAMETERS
{
    unsigned __int64 Base;
    unsigned long Size;
    unsigned long TimeDateStamp;
    unsigned long Checksum;
    unsigned long Flags;
    unsigned long SymbolType;
    unsigned long ImageNameSize;
    unsigned long ModuleNameSize;
    unsigned long LoadedImageNameSize;
    unsigned long SymbolFileNameSize;
    unsigned long MappedImageNameSize;
    unsigned __int64 Reserved[2];
} DEBUG_MODULE_PARAMETERS, *PDEBUG_MODULE_PARAMETERS;
enum {DEBUG_SCOPE_GROUP_ARGUMENTS = 0x00000001};
enum {DEBUG_SCOPE_GROUP_LOCALS    = 0x00000002};
enum {DEBUG_SCOPE_GROUP_ALL       = 0x00000003};
enum {DEBUG_OUTTYPE_DEFAULT              = 0x00000000};
enum {DEBUG_OUTTYPE_NO_INDENT            = 0x00000001};
enum {DEBUG_OUTTYPE_NO_OFFSET            = 0x00000002};
enum {DEBUG_OUTTYPE_VERBOSE              = 0x00000004};
enum {DEBUG_OUTTYPE_COMPACT_OUTPUT       = 0x00000008};
enum {DEBUG_OUTTYPE_ADDRESS_OF_FIELD     = 0x00010000};
enum {DEBUG_OUTTYPE_ADDRESS_AT_END       = 0x00020000};
enum {DEBUG_OUTTYPE_BLOCK_RECURSE        = 0x00200000};
enum {DEBUG_FIND_SOURCE_DEFAULT      = 0x00000000};
enum {DEBUG_FIND_SOURCE_FULL_PATH    = 0x00000001};
enum {DEBUG_FIND_SOURCE_BEST_MATCH   = 0x00000002};
enum {DEBUG_FIND_SOURCE_NO_SRCSRV    = 0x00000004};
enum {DEBUG_FIND_SOURCE_TOKEN_LOOKUP = 0x00000008};
///////////////////////////////////////////////////////////
[
	object,
	uuid(8c31e98c-983a-48a5-9016-6fe5d667a950),
	helpstring("IDebugSymbols")
]
interface IDebugSymbols : IUnknown {
	HRESULT GetSymbolOptions([out]  unsigned long* Options );
	HRESULT AddSymbolOptions([in]  unsigned long Options );
	HRESULT RemoveSymbolOptions([in]  unsigned long Options );
	HRESULT SetSymbolOptions([in]  unsigned long Options );
	HRESULT GetNameByOffset([in]  unsigned __int64 Offset,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[in,out,optional] unsigned __int64* Displacement );
	HRESULT GetOffsetByName([in]  const char* Symbol,[out] unsigned __int64* Offset );
	HRESULT GetNearNameByOffset([in]  unsigned __int64 Offset,[in] LONG Delta,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[in,out,optional] unsigned __int64* Displacement );
	HRESULT GetLineByOffset([in]  unsigned __int64 Offset,[out,optional] unsigned long* Line,[out,optional] char* FileBuffer,[in,optional] unsigned long FileBufferSize,[out,optional] unsigned long* FileSize,[in,out,optional] unsigned __int64* Displacement );
	HRESULT GetOffsetByLine([in]  unsigned long Line,[in] const char* File,[out] unsigned __int64* Offset );
	HRESULT GetNumberModules([out]  unsigned long* Loaded,[out] unsigned long* Unloaded );
	HRESULT GetModuleByIndex([in]  unsigned long Index,[out] unsigned __int64* Base );
	HRESULT GetModuleByModuleName([in]  const char* Name,[in] unsigned long StartIndex,[out,optional] unsigned long* Index,[out,optional] unsigned __int64* Base );
	HRESULT GetModuleByOffset([in]  unsigned __int64 Offset,[in] unsigned long StartIndex,[out,optional] unsigned long* Index,[out,optional] unsigned __int64* Base );
	HRESULT GetModuleNames([in]  unsigned long Index,[in] unsigned __int64 Base,[out,optional] char* ImageNameBuffer,[in,optional] unsigned long ImageNameBufferSize,[out,optional] unsigned long* ImageNameSize,[out,optional] char* ModuleNameBuffer,[in,optional] unsigned long ModuleNameBufferSize,[out,optional] unsigned long* ModuleNameSize,[out,optional] char* LoadedImageNameBuffer,[in,optional] unsigned long LoadedImageNameBufferSize,[out,optional] unsigned long* LoadedImageNameSize );
	HRESULT GetModuleParameters([in]  unsigned long Count,[in,optional] unsigned __int64* Bases,[in,optional] unsigned long Start,[out,optional] PDEBUG_MODULE_PARAMETERS Params );
	HRESULT GetSymbolModule([in]  const char* Symbol,[out] unsigned __int64* Base );
	HRESULT GetTypeName([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetTypeId([in]  unsigned __int64 Module,[in] const char* Name,[out] unsigned long* TypeId );
	HRESULT GetTypeSize([in]  unsigned __int64 Module,[in] unsigned long TypeId,[out] unsigned long* Size );
	HRESULT GetFieldOffset([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in] const char* Field,[out] unsigned long* Offset );
	HRESULT GetSymbolTypeId([in]  const char* Symbol,[out] unsigned long* TypeId,[out,optional] unsigned __int64* Module );
	HRESULT GetOffsetTypeId([in]  unsigned __int64 Offset,[out] unsigned long* TypeId,[out,optional] unsigned __int64* Module );
	HRESULT ReadTypedDataVirtual([in]  unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteTypedDataVirtual([in]  unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT OutputTypedDataVirtual([in]  unsigned long OutputControl,[in] unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in] unsigned long Flags );
	HRESULT ReadTypedDataPhysical([in]  unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteTypedDataPhysical([in]  unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT OutputTypedDataPhysical([in]  unsigned long OutputControl,[in] unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in] unsigned long Flags );
	HRESULT GetScope([out,optional]  unsigned __int64* InstructionOffset,[out,optional] PDEBUG_STACK_FRAME ScopeFrame,[out,optional] PVOID ScopeContext,[in,optional] unsigned long ScopeContextSize );
	HRESULT SetScope([in]  unsigned __int64 InstructionOffset,[in,optional] PDEBUG_STACK_FRAME ScopeFrame,[in,optional] PVOID ScopeContext,[in,optional] unsigned long ScopeContextSize );
	HRESULT ResetScope(  );
	HRESULT GetScopeSymbolGroup([in]  unsigned long Flags,[in,optional] IDebugSymbolGroup* Update,[out,optional] IDebugSymbolGroup** Symbols );
	HRESULT CreateSymbolGroup([out]  IDebugSymbolGroup** Group );
	HRESULT StartSymbolMatch([in]  const char* Pattern,[out] unsigned __int64* Handle );
	HRESULT GetNextSymbolMatch([in]  unsigned __int64 Handle,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* MatchSize,[out,optional] unsigned __int64* Offset );
	HRESULT EndSymbolMatch([in]  unsigned __int64 Handle );
	HRESULT Reload([in]  const char* Module );
	HRESULT GetSymbolPath([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PathSize );
	HRESULT SetSymbolPath([in]  const char* Path );
	HRESULT AppendSymbolPath([in]  const char* Addition );
	HRESULT GetImagePath([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PathSize );
	HRESULT SetImagePath([in]  const char* Path );
	HRESULT AppendImagePath([in]  const char* Addition );
	HRESULT GetSourcePath([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PathSize );
	HRESULT GetSourcePathElement([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ElementSize );
	HRESULT SetSourcePath([in]  const char* Path );
	HRESULT AppendSourcePath([in]  const char* Addition );
	HRESULT FindSourceFile([in]  unsigned long StartElement,[in] const char* File,[in] unsigned long Flags,[out,optional] unsigned long* FoundElement,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FoundSize );
	HRESULT GetSourceFileLineOffsets([in]  const char* File,[out,optional] unsigned __int64* Buffer,[in,optional] unsigned long BufferLines,[out,optional] unsigned long* FileLines );
};

enum {DEBUG_MODNAME_IMAGE        = 0x00000000};
enum {DEBUG_MODNAME_MODULE       = 0x00000001};
enum {DEBUG_MODNAME_LOADED_IMAGE = 0x00000002};
enum {DEBUG_MODNAME_SYMBOL_FILE  = 0x00000003};
enum {DEBUG_MODNAME_MAPPED_IMAGE = 0x00000004};
enum {DEBUG_TYPEOPTS_UNICODE_DISPLAY    = 0x00000001};
enum {DEBUG_TYPEOPTS_LONGSTATUS_DISPLAY = 0x00000002};
enum {DEBUG_TYPEOPTS_FORCERADIX_OUTPUT  = 0x00000004};
enum {DEBUG_TYPEOPTS_MATCH_MAXSIZE      = 0x00000008};
///////////////////////////////////////////////////////////
[
	object,
	uuid(3a707211-afdd-4495-ad4f-56fecdf8163f),
	helpstring("IDebugSymbols2")
]
interface IDebugSymbols2 : IUnknown {
	HRESULT GetSymbolOptions([out]  unsigned long* Options );
	HRESULT AddSymbolOptions([in]  unsigned long Options );
	HRESULT RemoveSymbolOptions([in]  unsigned long Options );
	HRESULT SetSymbolOptions([in]  unsigned long Options );
	HRESULT GetNameByOffset([in]  unsigned __int64 Offset,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[in,out,optional] unsigned __int64* Displacement );
	HRESULT GetOffsetByName([in]  const char* Symbol,[out] unsigned __int64* Offset );
	HRESULT GetNearNameByOffset([in]  unsigned __int64 Offset,[in] LONG Delta,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[in,out,optional] unsigned __int64* Displacement );
	HRESULT GetLineByOffset([in]  unsigned __int64 Offset,[out,optional] unsigned long* Line,[out,optional] char* FileBuffer,[in,optional] unsigned long FileBufferSize,[out,optional] unsigned long* FileSize,[in,out,optional] unsigned __int64* Displacement );
	HRESULT GetOffsetByLine([in]  unsigned long Line,[in] const char* File,[out] unsigned __int64* Offset );
	HRESULT GetNumberModules([out]  unsigned long* Loaded,[out] unsigned long* Unloaded );
	HRESULT GetModuleByIndex([in]  unsigned long Index,[out] unsigned __int64* Base );
	HRESULT GetModuleByModuleName([in]  const char* Name,[in] unsigned long StartIndex,[out,optional] unsigned long* Index,[out,optional] unsigned __int64* Base );
	HRESULT GetModuleByOffset([in]  unsigned __int64 Offset,[in] unsigned long StartIndex,[out,optional] unsigned long* Index,[out,optional] unsigned __int64* Base );
	HRESULT GetModuleNames([in]  unsigned long Index,[in] unsigned __int64 Base,[out,optional] char* ImageNameBuffer,[in,optional] unsigned long ImageNameBufferSize,[out,optional] unsigned long* ImageNameSize,[out,optional] char* ModuleNameBuffer,[in,optional] unsigned long ModuleNameBufferSize,[out,optional] unsigned long* ModuleNameSize,[out,optional] char* LoadedImageNameBuffer,[in,optional] unsigned long LoadedImageNameBufferSize,[out,optional] unsigned long* LoadedImageNameSize );
	HRESULT GetModuleParameters([in]  unsigned long Count,[in,optional] unsigned __int64* Bases,[in,optional] unsigned long Start,[out,optional] PDEBUG_MODULE_PARAMETERS Params );
	HRESULT GetSymbolModule([in]  const char* Symbol,[out] unsigned __int64* Base );
	HRESULT GetTypeName([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetTypeId([in]  unsigned __int64 Module,[in] const char* Name,[out] unsigned long* TypeId );
	HRESULT GetTypeSize([in]  unsigned __int64 Module,[in] unsigned long TypeId,[out] unsigned long* Size );
	HRESULT GetFieldOffset([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in] const char* Field,[out] unsigned long* Offset );
	HRESULT GetSymbolTypeId([in]  const char* Symbol,[out] unsigned long* TypeId,[out,optional] unsigned __int64* Module );
	HRESULT GetOffsetTypeId([in]  unsigned __int64 Offset,[out] unsigned long* TypeId,[out,optional] unsigned __int64* Module );
	HRESULT ReadTypedDataVirtual([in]  unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteTypedDataVirtual([in]  unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT OutputTypedDataVirtual([in]  unsigned long OutputControl,[in] unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in] unsigned long Flags );
	HRESULT ReadTypedDataPhysical([in]  unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteTypedDataPhysical([in]  unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT OutputTypedDataPhysical([in]  unsigned long OutputControl,[in] unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in] unsigned long Flags );
	HRESULT GetScope([out,optional]  unsigned __int64* InstructionOffset,[out,optional] PDEBUG_STACK_FRAME ScopeFrame,[out,optional] PVOID ScopeContext,[in,optional] unsigned long ScopeContextSize );
	HRESULT SetScope([in]  unsigned __int64 InstructionOffset,[in,optional] PDEBUG_STACK_FRAME ScopeFrame,[in,optional] PVOID ScopeContext,[in,optional] unsigned long ScopeContextSize );
	HRESULT ResetScope(  );
	HRESULT GetScopeSymbolGroup([in]  unsigned long Flags,[in,optional] IDebugSymbolGroup* Update,[out,optional] IDebugSymbolGroup** Symbols );
	HRESULT CreateSymbolGroup([out]  IDebugSymbolGroup** Group );
	HRESULT StartSymbolMatch([in]  const char* Pattern,[out] unsigned __int64* Handle );
	HRESULT GetNextSymbolMatch([in]  unsigned __int64 Handle,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* MatchSize,[out,optional] unsigned __int64* Offset );
	HRESULT EndSymbolMatch([in]  unsigned __int64 Handle );
	HRESULT Reload([in]  const char* Module );
	HRESULT GetSymbolPath([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PathSize );
	HRESULT SetSymbolPath([in]  const char* Path );
	HRESULT AppendSymbolPath([in]  const char* Addition );
	HRESULT GetImagePath([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PathSize );
	HRESULT SetImagePath([in]  const char* Path );
	HRESULT AppendImagePath([in]  const char* Addition );
	HRESULT GetSourcePath([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PathSize );
	HRESULT GetSourcePathElement([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ElementSize );
	HRESULT SetSourcePath([in]  const char* Path );
	HRESULT AppendSourcePath([in]  const char* Addition );
	HRESULT FindSourceFile([in]  unsigned long StartElement,[in] const char* File,[in] unsigned long Flags,[out,optional] unsigned long* FoundElement,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FoundSize );
	HRESULT GetSourceFileLineOffsets([in]  const char* File,[out,optional] unsigned __int64* Buffer,[in,optional] unsigned long BufferLines,[out,optional] unsigned long* FileLines );
	HRESULT GetModuleVersionInformation([in]  unsigned long Index,[in] unsigned __int64 Base,[in] const char* Item,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* VerInfoSize );
	HRESULT GetModuleNameString([in]  unsigned long Which,[in] unsigned long Index,[in] unsigned __int64 Base,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetConstantName([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in] unsigned __int64 Value,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetFieldName([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in] unsigned long FieldIndex,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetTypeOptions([out]  unsigned long* Options );
	HRESULT AddTypeOptions([in]  unsigned long Options );
	HRESULT RemoveTypeOptions([in]  unsigned long Options );
	HRESULT SetTypeOptions([in]  unsigned long Options );
};

enum {DEBUG_GETMOD_DEFAULT             = 0x00000000};
enum {DEBUG_GETMOD_NO_LOADED_MODULES   = 0x00000001};
enum {DEBUG_GETMOD_NO_UNLOADED_MODULES = 0x00000002};
enum {DEBUG_ADDSYNTHMOD_DEFAULT = 0x00000000};
enum {DEBUG_ADDSYNTHSYM_DEFAULT = 0x00000000};
enum {DEBUG_OUTSYM_DEFAULT            = 0x00000000};
enum {DEBUG_OUTSYM_FORCE_OFFSET       = 0x00000001};
enum {DEBUG_OUTSYM_SOURCE_LINE        = 0x00000002};
enum {DEBUG_OUTSYM_ALLOW_DISPLACEMENT = 0x00000004};
enum {DEBUG_GETFNENT_DEFAULT        = 0x00000000};
enum {DEBUG_GETFNENT_RAW_ENTRY_ONLY = 0x00000001};
typedef struct _DEBUG_MODULE_AND_ID
{
    unsigned __int64 ModuleBase;
    unsigned __int64 Id;
} DEBUG_MODULE_AND_ID, *PDEBUG_MODULE_AND_ID;
enum {DEBUG_SOURCE_IS_STATEMENT = 0x00000001};
enum {DEBUG_GSEL_DEFAULT         = 0x00000000};
enum {DEBUG_GSEL_NO_SYMBOL_LOADS = 0x00000001};
enum {DEBUG_GSEL_ALLOW_LOWER     = 0x00000002};
enum {DEBUG_GSEL_ALLOW_HIGHER    = 0x00000004};
enum {DEBUG_GSEL_NEAREST_ONLY    = 0x00000008};
typedef struct _DEBUG_SYMBOL_SOURCE_ENTRY
{
    unsigned __int64 ModuleBase;
    unsigned __int64 Offset;
    unsigned __int64 FileNameId;
    unsigned __int64 EngineInternal;
    unsigned long Size;
    unsigned long Flags;
    unsigned long FileNameSize;
    // Line numbers are one-based.
    // May be DEBUG_ANY_ID if unknown.
    unsigned long StartLine;
    unsigned long EndLine;
    // Column numbers are one-based byte indices.
    // May be DEBUG_ANY_ID if unknown.
    unsigned long StartColumn;
    unsigned long EndColumn;
    unsigned long Reserved;
} DEBUG_SYMBOL_SOURCE_ENTRY, *PDEBUG_SYMBOL_SOURCE_ENTRY;
///////////////////////////////////////////////////////////
[
	object,
	uuid(f02fbecc-50ac-4f36-9ad9-c975e8f32ff8),
	helpstring("IDebugSymbols3")
]
interface IDebugSymbols3 : IUnknown {
	HRESULT GetSymbolOptions([out]  unsigned long* Options );
	HRESULT AddSymbolOptions([in]  unsigned long Options );
	HRESULT RemoveSymbolOptions([in]  unsigned long Options );
	HRESULT SetSymbolOptions([in]  unsigned long Options );
	HRESULT GetNameByOffset([in]  unsigned __int64 Offset,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[in,out,optional] unsigned __int64* Displacement );
	HRESULT GetOffsetByName([in]  const char* Symbol,[out] unsigned __int64* Offset );
	HRESULT GetNearNameByOffset([in]  unsigned __int64 Offset,[in] LONG Delta,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[in,out,optional] unsigned __int64* Displacement );
	HRESULT GetLineByOffset([in]  unsigned __int64 Offset,[out,optional] unsigned long* Line,[out,optional] char* FileBuffer,[in,optional] unsigned long FileBufferSize,[out,optional] unsigned long* FileSize,[in,out,optional] unsigned __int64* Displacement );
	HRESULT GetOffsetByLine([in]  unsigned long Line,[in] const char* File,[out] unsigned __int64* Offset );
	HRESULT GetNumberModules([out]  unsigned long* Loaded,[out] unsigned long* Unloaded );
	HRESULT GetModuleByIndex([in]  unsigned long Index,[out] unsigned __int64* Base );
	HRESULT GetModuleByModuleName([in]  const char* Name,[in] unsigned long StartIndex,[out,optional] unsigned long* Index,[out,optional] unsigned __int64* Base );
	HRESULT GetModuleByOffset([in]  unsigned __int64 Offset,[in] unsigned long StartIndex,[out,optional] unsigned long* Index,[out,optional] unsigned __int64* Base );
	HRESULT GetModuleNames([in]  unsigned long Index,[in] unsigned __int64 Base,[out,optional] char* ImageNameBuffer,[in,optional] unsigned long ImageNameBufferSize,[out,optional] unsigned long* ImageNameSize,[out,optional] char* ModuleNameBuffer,[in,optional] unsigned long ModuleNameBufferSize,[out,optional] unsigned long* ModuleNameSize,[out,optional] char* LoadedImageNameBuffer,[in,optional] unsigned long LoadedImageNameBufferSize,[out,optional] unsigned long* LoadedImageNameSize );
	HRESULT GetModuleParameters([in]  unsigned long Count,[in,optional] unsigned __int64* Bases,[in,optional] unsigned long Start,[out,optional] PDEBUG_MODULE_PARAMETERS Params );
	HRESULT GetSymbolModule([in]  const char* Symbol,[out] unsigned __int64* Base );
	HRESULT GetTypeName([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetTypeId([in]  unsigned __int64 Module,[in] const char* Name,[out] unsigned long* TypeId );
	HRESULT GetTypeSize([in]  unsigned __int64 Module,[in] unsigned long TypeId,[out] unsigned long* Size );
	HRESULT GetFieldOffset([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in] const char* Field,[out] unsigned long* Offset );
	HRESULT GetSymbolTypeId([in]  const char* Symbol,[out] unsigned long* TypeId,[out,optional] unsigned __int64* Module );
	HRESULT GetOffsetTypeId([in]  unsigned __int64 Offset,[out] unsigned long* TypeId,[out,optional] unsigned __int64* Module );
	HRESULT ReadTypedDataVirtual([in]  unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteTypedDataVirtual([in]  unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT OutputTypedDataVirtual([in]  unsigned long OutputControl,[in] unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in] unsigned long Flags );
	HRESULT ReadTypedDataPhysical([in]  unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in,out] PVOID Buffer,[in] unsigned long BufferSize,[in,out,optional] unsigned long* BytesRead );
	HRESULT WriteTypedDataPhysical([in]  unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in] PVOID Buffer,[in] unsigned long BufferSize,[out,optional] unsigned long* BytesWritten );
	HRESULT OutputTypedDataPhysical([in]  unsigned long OutputControl,[in] unsigned __int64 Offset,[in] unsigned __int64 Module,[in] unsigned long TypeId,[in] unsigned long Flags );
	HRESULT GetScope([out,optional]  unsigned __int64* InstructionOffset,[out,optional] PDEBUG_STACK_FRAME ScopeFrame,[out,optional] PVOID ScopeContext,[in,optional] unsigned long ScopeContextSize );
	HRESULT SetScope([in]  unsigned __int64 InstructionOffset,[in,optional] PDEBUG_STACK_FRAME ScopeFrame,[in,optional] PVOID ScopeContext,[in,optional] unsigned long ScopeContextSize );
	HRESULT ResetScope(  );
	HRESULT GetScopeSymbolGroup([in]  unsigned long Flags,[in,optional] IDebugSymbolGroup* Update,[out,optional] IDebugSymbolGroup** Symbols );
	HRESULT CreateSymbolGroup([out]  IDebugSymbolGroup** Group );
	HRESULT StartSymbolMatch([in]  const char* Pattern,[out] unsigned __int64* Handle );
	HRESULT GetNextSymbolMatch([in]  unsigned __int64 Handle,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* MatchSize,[out,optional] unsigned __int64* Offset );
	HRESULT EndSymbolMatch([in]  unsigned __int64 Handle );
	HRESULT Reload([in]  const char* Module );
	HRESULT GetSymbolPath([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PathSize );
	HRESULT SetSymbolPath([in]  const char* Path );
	HRESULT AppendSymbolPath([in]  const char* Addition );
	HRESULT GetImagePath([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PathSize );
	HRESULT SetImagePath([in]  const char* Path );
	HRESULT AppendImagePath([in]  const char* Addition );
	HRESULT GetSourcePath([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PathSize );
	HRESULT GetSourcePathElement([in]  unsigned long Index,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ElementSize );
	HRESULT SetSourcePath([in]  const char* Path );
	HRESULT AppendSourcePath([in]  const char* Addition );
	HRESULT FindSourceFile([in]  unsigned long StartElement,[in] const char* File,[in] unsigned long Flags,[out,optional] unsigned long* FoundElement,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FoundSize );
	HRESULT GetSourceFileLineOffsets([in]  const char* File,[out,optional] unsigned __int64* Buffer,[in,optional] unsigned long BufferLines,[out,optional] unsigned long* FileLines );
	HRESULT GetModuleVersionInformation([in]  unsigned long Index,[in] unsigned __int64 Base,[in] const char* Item,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* VerInfoSize );
	HRESULT GetModuleNameString([in]  unsigned long Which,[in] unsigned long Index,[in] unsigned __int64 Base,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetConstantName([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in] unsigned __int64 Value,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetFieldName([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in] unsigned long FieldIndex,[in,out,optional] char* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetTypeOptions([out]  unsigned long* Options );
	HRESULT AddTypeOptions([in]  unsigned long Options );
	HRESULT RemoveTypeOptions([in]  unsigned long Options );
	HRESULT SetTypeOptions([in]  unsigned long Options );
	HRESULT GetNameByOffsetWide([in]  unsigned __int64 Offset,[out,optional] wchar_t* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[in,out,optional] unsigned __int64* Displacement );
	HRESULT GetOffsetByNameWide([in]  const wchar_t* Symbol,[out] unsigned __int64* Offset );
	HRESULT GetNearNameByOffsetWide([in]  unsigned __int64 Offset,[in] LONG Delta,[out,optional] wchar_t* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize,[in,out,optional] unsigned __int64* Displacement );
	HRESULT GetLineByOffsetWide([in]  unsigned __int64 Offset,[out,optional] unsigned long* Line,[out,optional] wchar_t* FileBuffer,[in,optional] unsigned long FileBufferSize,[out,optional] unsigned long* FileSize,[in,out,optional] unsigned __int64* Displacement );
	HRESULT GetOffsetByLineWide([in]  unsigned long Line,[in] const wchar_t* File,[out] unsigned __int64* Offset );
	HRESULT GetModuleByModuleNameWide([in]  const wchar_t* Name,[in] unsigned long StartIndex,[out,optional] unsigned long* Index,[out,optional] unsigned __int64* Base );
	HRESULT GetSymbolModuleWide([in]  const wchar_t* Symbol,[out] unsigned __int64* Base );
	HRESULT GetTypeNameWide([in]  unsigned __int64 Module,[in] unsigned long TypeId,[out,optional] wchar_t* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetTypeIdWide([in]  unsigned __int64 Module,[in] const wchar_t* Name,[out] unsigned long* TypeId );
	HRESULT GetFieldOffsetWide([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in] const wchar_t* Field,[out] unsigned long* Offset );
	HRESULT GetSymbolTypeIdWide([in]  const wchar_t* Symbol,[out] unsigned long* TypeId,[out,optional] unsigned __int64* Module );
	HRESULT GetScopeSymbolGroup2([in]  unsigned long Flags,[in,optional] IDebugSymbolGroup2* Update,[out,optional] IDebugSymbolGroup2** Symbols );
	HRESULT CreateSymbolGroup2([out]  IDebugSymbolGroup2** Group );
	HRESULT StartSymbolMatchWide([in]  const wchar_t* Pattern,[out] unsigned __int64* Handle );
	HRESULT GetNextSymbolMatchWide([in]  unsigned __int64 Handle,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* MatchSize,[out,optional] unsigned __int64* Offset );
	HRESULT ReloadWide([in]  const wchar_t* Module );
	HRESULT GetSymbolPathWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PathSize );
	HRESULT SetSymbolPathWide([in]  const wchar_t* Path );
	HRESULT AppendSymbolPathWide([in]  const wchar_t* Addition );
	HRESULT GetImagePathWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PathSize );
	HRESULT SetImagePathWide([in]  const wchar_t* Path );
	HRESULT AppendImagePathWide([in]  const wchar_t* Addition );
	HRESULT GetSourcePathWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* PathSize );
	HRESULT GetSourcePathElementWide([in]  unsigned long Index,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ElementSize );
	HRESULT SetSourcePathWide([in]  const wchar_t* Path );
	HRESULT AppendSourcePathWide([in]  const wchar_t* Addition );
	HRESULT FindSourceFileWide([in]  unsigned long StartElement,[in] const wchar_t* File,[in] unsigned long Flags,[out,optional] unsigned long* FoundElement,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* FoundSize );
	HRESULT GetSourceFileLineOffsetsWide([in]  const wchar_t* File,[out,optional] unsigned __int64* Buffer,[in,optional] unsigned long BufferLines,[out,optional] unsigned long* FileLines );
	HRESULT GetModuleVersionInformationWide([in]  unsigned long Index,[in] unsigned __int64 Base,[in] const wchar_t* Item,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* VerInfoSize );
	HRESULT GetModuleNameStringWide([in]  unsigned long Which,[in] unsigned long Index,[in] unsigned __int64 Base,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetConstantNameWide([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in] unsigned __int64 Value,[out,optional] wchar_t* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetFieldNameWide([in]  unsigned __int64 Module,[in] unsigned long TypeId,[in] unsigned long FieldIndex,[out,optional] wchar_t* NameBuffer,[in,optional] unsigned long NameBufferSize,[out,optional] unsigned long* NameSize );
	HRESULT IsManagedModule([in]  unsigned long Index,[in] unsigned __int64 Base );
	HRESULT GetModuleByModuleName2([in]  const char* Name,[in] unsigned long StartIndex,[in] unsigned long Flags,[out,optional] unsigned long* Index,[out,optional] unsigned __int64* Base );
	HRESULT GetModuleByModuleName2Wide([in]  const wchar_t* Name,[in] unsigned long StartIndex,[in] unsigned long Flags,[out,optional] unsigned long* Index,[out,optional] unsigned __int64* Base );
	HRESULT GetModuleByOffset2([in]  unsigned __int64 Offset,[in] unsigned long StartIndex,[in] unsigned long Flags,[out,optional] unsigned long* Index,[out,optional] unsigned __int64* Base );
	HRESULT AddSyntheticModule([in]  unsigned __int64 Base,[in] unsigned long Size,[in] const char* ImagePath,[in] const char* ModuleName,[in] unsigned long Flags );
	HRESULT AddSyntheticModuleWide([in]  unsigned __int64 Base,[in] unsigned long Size,[in] const wchar_t* ImagePath,[in] const wchar_t* ModuleName,[in] unsigned long Flags );
	HRESULT RemoveSyntheticModule([in]  unsigned __int64 Base );
	HRESULT GetCurrentScopeFrameIndex([out]  unsigned long* Index );
	HRESULT SetScopeFrameByIndex([in]  unsigned long Index );
	HRESULT SetScopeFromJitDebugInfo([in]  unsigned long OutputControl,[in] unsigned __int64 InfoOffset );
	HRESULT SetScopeFromStoredEvent(  );
	HRESULT OutputSymbolByOffset([in]  unsigned long OutputControl,[in] unsigned long Flags,[in] unsigned __int64 Offset );
	HRESULT GetFunctionEntryByOffset([in]  unsigned __int64 Offset,[in] unsigned long Flags,[in,out,optional] PVOID Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* BufferNeeded );
	HRESULT GetFieldTypeAndOffset([in]  unsigned __int64 Module,[in] unsigned long ContainerTypeId,[in] const char* Field,[out,optional] unsigned long* FieldTypeId,[out,optional] unsigned long* Offset );
	HRESULT GetFieldTypeAndOffsetWide([in]  unsigned __int64 Module,[in] unsigned long ContainerTypeId,[in] const wchar_t* Field,[out,optional] unsigned long* FieldTypeId,[out,optional] unsigned long* Offset );
	HRESULT AddSyntheticSymbol([in]  unsigned __int64 Offset,[in] unsigned long Size,[in] const char* Name,[in] unsigned long Flags,[out,optional] PDEBUG_MODULE_AND_ID Id );
	HRESULT AddSyntheticSymbolWide([in]  unsigned __int64 Offset,[in] unsigned long Size,[in] const wchar_t* Name,[in] unsigned long Flags,[out,optional] PDEBUG_MODULE_AND_ID Id );
	HRESULT RemoveSyntheticSymbol([in]  PDEBUG_MODULE_AND_ID Id );
	HRESULT GetSymbolEntriesByOffset([in]  unsigned __int64 Offset,[in] unsigned long Flags,[out,optional] PDEBUG_MODULE_AND_ID Ids,[in,out,optional] unsigned __int64* Displacements,[in,optional] unsigned long IdsCount,[out,optional] unsigned long* Entries );
	HRESULT GetSymbolEntriesByName([in]  const char* Symbol,[in] unsigned long Flags,[out,optional] PDEBUG_MODULE_AND_ID Ids,[in,optional] unsigned long IdsCount,[out,optional] unsigned long* Entries );
	HRESULT GetSymbolEntriesByNameWide([in]  const wchar_t* Symbol,[in] unsigned long Flags,[out,optional] PDEBUG_MODULE_AND_ID Ids,[in,optional] unsigned long IdsCount,[out,optional] unsigned long* Entries );
	HRESULT GetSymbolEntryByToken([in]  unsigned __int64 ModuleBase,[in] unsigned long Token,[out] PDEBUG_MODULE_AND_ID Id );
	HRESULT GetSymbolEntryInformation([in]  PDEBUG_MODULE_AND_ID Id,[out] PDEBUG_SYMBOL_ENTRY Info );
	HRESULT GetSymbolEntryString([in]  PDEBUG_MODULE_AND_ID Id,[in] unsigned long Which,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* StringSize );
	HRESULT GetSymbolEntryStringWide([in]  PDEBUG_MODULE_AND_ID Id,[in] unsigned long Which,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* StringSize );
	HRESULT GetSymbolEntryOffsetRegions([in]  PDEBUG_MODULE_AND_ID Id,[in] unsigned long Flags,[out,optional] PDEBUG_OFFSET_REGION Regions,[in,optional] unsigned long RegionsCount,[out,optional] unsigned long* RegionsAvail );
	HRESULT GetSymbolEntryBySymbolEntry([in]  PDEBUG_MODULE_AND_ID FromId,[in] unsigned long Flags,[out] PDEBUG_MODULE_AND_ID ToId );
	HRESULT GetSourceEntriesByOffset([in]  unsigned __int64 Offset,[in] unsigned long Flags,[out,optional] PDEBUG_SYMBOL_SOURCE_ENTRY Entries,[in,optional] unsigned long EntriesCount,[out,optional] unsigned long* EntriesAvail );
	HRESULT GetSourceEntriesByLine([in]  unsigned long Line,[in] const char* File,[in] unsigned long Flags,[out,optional] PDEBUG_SYMBOL_SOURCE_ENTRY Entries,[in,optional] unsigned long EntriesCount,[out,optional] unsigned long* EntriesAvail );
	HRESULT GetSourceEntriesByLineWide([in]  unsigned long Line,[in] const wchar_t* File,[in] unsigned long Flags,[out,optional] PDEBUG_SYMBOL_SOURCE_ENTRY Entries,[in,optional] unsigned long EntriesCount,[out,optional] unsigned long* EntriesAvail );
	HRESULT GetSourceEntryString([in]  PDEBUG_SYMBOL_SOURCE_ENTRY Entry,[in] unsigned long Which,[out,optional] char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* StringSize );
	HRESULT GetSourceEntryStringWide([in]  PDEBUG_SYMBOL_SOURCE_ENTRY Entry,[in] unsigned long Which,[out,optional] wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* StringSize );
	HRESULT GetSourceEntryOffsetRegions([in]  PDEBUG_SYMBOL_SOURCE_ENTRY Entry,[in] unsigned long Flags,[out,optional] PDEBUG_OFFSET_REGION Regions,[in,optional] unsigned long RegionsCount,[out,optional] unsigned long* RegionsAvail );
	HRESULT GetSourceEntryBySourceEntry([in]  PDEBUG_SYMBOL_SOURCE_ENTRY FromEntry,[in] unsigned long Flags,[out] PDEBUG_SYMBOL_SOURCE_ENTRY ToEntry );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(6b86fe2c-2c4f-4f0c-9da2-174311acc327),
	helpstring("IDebugSystemObjects")
]
interface IDebugSystemObjects : IUnknown {
	HRESULT GetEventThread([out]  unsigned long* Id );
	HRESULT GetEventProcess([out]  unsigned long* Id );
	HRESULT GetCurrentThreadId([out]  unsigned long* Id );
	HRESULT SetCurrentThreadId([in]  unsigned long Id );
	HRESULT GetCurrentProcessId([out]  unsigned long* Id );
	HRESULT SetCurrentProcessId([in]  unsigned long Id );
	HRESULT GetNumberThreads([out]  unsigned long* Number );
	HRESULT GetTotalNumberThreads([out]  unsigned long* Total,[out] unsigned long* LargestProcess );
	HRESULT GetThreadIdsByIndex([in]  unsigned long Start,[in] unsigned long Count,[out,optional] unsigned long* Ids,[out,optional] unsigned long* SysIds );
	HRESULT GetThreadIdByProcessor([in]  unsigned long Processor,[out] unsigned long* Id );
	HRESULT GetCurrentThreadDataOffset([out]  unsigned __int64* Offset );
	HRESULT GetThreadIdByDataOffset([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentThreadTeb([out]  unsigned __int64* Offset );
	HRESULT GetThreadIdByTeb([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentThreadSystemId([out]  unsigned long* SysId );
	HRESULT GetThreadIdBySystemId([in]  unsigned long SysId,[out] unsigned long* Id );
	HRESULT GetCurrentThreadHandle([out]  unsigned __int64* Handle );
	HRESULT GetThreadIdByHandle([in]  unsigned __int64 Handle,[out] unsigned long* Id );
	HRESULT GetNumberProcesses([out]  unsigned long* Number );
	HRESULT GetProcessIdsByIndex([in]  unsigned long Start,[in] unsigned long Count,[out,optional] unsigned long* Ids,[out,optional] unsigned long* SysIds );
	HRESULT GetCurrentProcessDataOffset([out]  unsigned __int64* Offset );
	HRESULT GetProcessIdByDataOffset([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentProcessPeb([out]  unsigned __int64* Offset );
	HRESULT GetProcessIdByPeb([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentProcessSystemId([out]  unsigned long* SysId );
	HRESULT GetProcessIdBySystemId([in]  unsigned long SysId,[out] unsigned long* Id );
	HRESULT GetCurrentProcessHandle([out]  unsigned __int64* Handle );
	HRESULT GetProcessIdByHandle([in]  unsigned __int64 Handle,[out] unsigned long* Id );
	HRESULT GetCurrentProcessExecutableName([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ExeSize );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(0ae9f5ff-1852-4679-b055-494bee6407ee),
	helpstring("IDebugSystemObjects2")
]
interface IDebugSystemObjects2 : IUnknown {
	HRESULT GetEventThread([out]  unsigned long* Id );
	HRESULT GetEventProcess([out]  unsigned long* Id );
	HRESULT GetCurrentThreadId([out]  unsigned long* Id );
	HRESULT SetCurrentThreadId([in]  unsigned long Id );
	HRESULT GetCurrentProcessId([out]  unsigned long* Id );
	HRESULT SetCurrentProcessId([in]  unsigned long Id );
	HRESULT GetNumberThreads([out]  unsigned long* Number );
	HRESULT GetTotalNumberThreads([out]  unsigned long* Total,[out] unsigned long* LargestProcess );
	HRESULT GetThreadIdsByIndex([in]  unsigned long Start,[in] unsigned long Count,[out,optional] unsigned long* Ids,[out,optional] unsigned long* SysIds );
	HRESULT GetThreadIdByProcessor([in]  unsigned long Processor,[out] unsigned long* Id );
	HRESULT GetCurrentThreadDataOffset([out]  unsigned __int64* Offset );
	HRESULT GetThreadIdByDataOffset([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentThreadTeb([out]  unsigned __int64* Offset );
	HRESULT GetThreadIdByTeb([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentThreadSystemId([out]  unsigned long* SysId );
	HRESULT GetThreadIdBySystemId([in]  unsigned long SysId,[out] unsigned long* Id );
	HRESULT GetCurrentThreadHandle([out]  unsigned __int64* Handle );
	HRESULT GetThreadIdByHandle([in]  unsigned __int64 Handle,[out] unsigned long* Id );
	HRESULT GetNumberProcesses([out]  unsigned long* Number );
	HRESULT GetProcessIdsByIndex([in]  unsigned long Start,[in] unsigned long Count,[out,optional] unsigned long* Ids,[out,optional] unsigned long* SysIds );
	HRESULT GetCurrentProcessDataOffset([out]  unsigned __int64* Offset );
	HRESULT GetProcessIdByDataOffset([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentProcessPeb([out]  unsigned __int64* Offset );
	HRESULT GetProcessIdByPeb([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentProcessSystemId([out]  unsigned long* SysId );
	HRESULT GetProcessIdBySystemId([in]  unsigned long SysId,[out] unsigned long* Id );
	HRESULT GetCurrentProcessHandle([out]  unsigned __int64* Handle );
	HRESULT GetProcessIdByHandle([in]  unsigned __int64 Handle,[out] unsigned long* Id );
	HRESULT GetCurrentProcessExecutableName([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ExeSize );
	HRESULT GetCurrentProcessUpTime([out]  unsigned long* UpTime );
	HRESULT GetImplicitThreadDataOffset([out]  unsigned __int64* Offset );
	HRESULT SetImplicitThreadDataOffset([in]  unsigned __int64 Offset );
	HRESULT GetImplicitProcessDataOffset([out]  unsigned __int64* Offset );
	HRESULT SetImplicitProcessDataOffset([in]  unsigned __int64 Offset );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(e9676e2f-e286-4ea3-b0f9-dfe5d9fc330e),
	helpstring("IDebugSystemObjects3")
]
interface IDebugSystemObjects3 : IUnknown {
	HRESULT GetEventThread([out]  unsigned long* Id );
	HRESULT GetEventProcess([out]  unsigned long* Id );
	HRESULT GetCurrentThreadId([out]  unsigned long* Id );
	HRESULT SetCurrentThreadId([in]  unsigned long Id );
	HRESULT GetCurrentProcessId([out]  unsigned long* Id );
	HRESULT SetCurrentProcessId([in]  unsigned long Id );
	HRESULT GetNumberThreads([out]  unsigned long* Number );
	HRESULT GetTotalNumberThreads([out]  unsigned long* Total,[out] unsigned long* LargestProcess );
	HRESULT GetThreadIdsByIndex([in]  unsigned long Start,[in] unsigned long Count,[out,optional] unsigned long* Ids,[out,optional] unsigned long* SysIds );
	HRESULT GetThreadIdByProcessor([in]  unsigned long Processor,[out] unsigned long* Id );
	HRESULT GetCurrentThreadDataOffset([out]  unsigned __int64* Offset );
	HRESULT GetThreadIdByDataOffset([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentThreadTeb([out]  unsigned __int64* Offset );
	HRESULT GetThreadIdByTeb([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentThreadSystemId([out]  unsigned long* SysId );
	HRESULT GetThreadIdBySystemId([in]  unsigned long SysId,[out] unsigned long* Id );
	HRESULT GetCurrentThreadHandle([out]  unsigned __int64* Handle );
	HRESULT GetThreadIdByHandle([in]  unsigned __int64 Handle,[out] unsigned long* Id );
	HRESULT GetNumberProcesses([out]  unsigned long* Number );
	HRESULT GetProcessIdsByIndex([in]  unsigned long Start,[in] unsigned long Count,[out,optional] unsigned long* Ids,[out,optional] unsigned long* SysIds );
	HRESULT GetCurrentProcessDataOffset([out]  unsigned __int64* Offset );
	HRESULT GetProcessIdByDataOffset([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentProcessPeb([out]  unsigned __int64* Offset );
	HRESULT GetProcessIdByPeb([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentProcessSystemId([out]  unsigned long* SysId );
	HRESULT GetProcessIdBySystemId([in]  unsigned long SysId,[out] unsigned long* Id );
	HRESULT GetCurrentProcessHandle([out]  unsigned __int64* Handle );
	HRESULT GetProcessIdByHandle([in]  unsigned __int64 Handle,[out] unsigned long* Id );
	HRESULT GetCurrentProcessExecutableName([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ExeSize );
	HRESULT GetCurrentProcessUpTime([out]  unsigned long* UpTime );
	HRESULT GetImplicitThreadDataOffset([out]  unsigned __int64* Offset );
	HRESULT SetImplicitThreadDataOffset([in]  unsigned __int64 Offset );
	HRESULT GetImplicitProcessDataOffset([out]  unsigned __int64* Offset );
	HRESULT SetImplicitProcessDataOffset([in]  unsigned __int64 Offset );
	HRESULT GetEventSystem([out]  unsigned long* Id );
	HRESULT GetCurrentSystemId([out]  unsigned long* Id );
	HRESULT SetCurrentSystemId([in]  unsigned long Id );
	HRESULT GetNumberSystems([out]  unsigned long* Number );
	HRESULT GetSystemIdsByIndex([in]  unsigned long Start,[in] unsigned long Count,[out] unsigned long* Ids );
	HRESULT GetTotalNumberThreadsAndProcesses([out]  unsigned long* TotalThreads,[out] unsigned long* TotalProcesses,[out] unsigned long* LargestProcessThreads,[out] unsigned long* LargestSystemThreads,[out] unsigned long* LargestSystemProcesses );
	HRESULT GetCurrentSystemServer([out]  unsigned __int64* Server );
	HRESULT GetSystemByServer([in]  unsigned __int64 Server,[out] unsigned long* Id );
	HRESULT GetCurrentSystemServerName([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
};

///////////////////////////////////////////////////////////
[
	object,
	uuid(489468e6-7d0f-4af5-87ab-25207454d553),
	helpstring("IDebugSystemObjects4")
]
interface IDebugSystemObjects4 : IUnknown {
	HRESULT GetEventThread([out]  unsigned long* Id );
	HRESULT GetEventProcess([out]  unsigned long* Id );
	HRESULT GetCurrentThreadId([out]  unsigned long* Id );
	HRESULT SetCurrentThreadId([in]  unsigned long Id );
	HRESULT GetCurrentProcessId([out]  unsigned long* Id );
	HRESULT SetCurrentProcessId([in]  unsigned long Id );
	HRESULT GetNumberThreads([out]  unsigned long* Number );
	HRESULT GetTotalNumberThreads([out]  unsigned long* Total,[out] unsigned long* LargestProcess );
	HRESULT GetThreadIdsByIndex([in]  unsigned long Start,[in] unsigned long Count,[out,optional] unsigned long* Ids,[out,optional] unsigned long* SysIds );
	HRESULT GetThreadIdByProcessor([in]  unsigned long Processor,[out] unsigned long* Id );
	HRESULT GetCurrentThreadDataOffset([out]  unsigned __int64* Offset );
	HRESULT GetThreadIdByDataOffset([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentThreadTeb([out]  unsigned __int64* Offset );
	HRESULT GetThreadIdByTeb([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentThreadSystemId([out]  unsigned long* SysId );
	HRESULT GetThreadIdBySystemId([in]  unsigned long SysId,[out] unsigned long* Id );
	HRESULT GetCurrentThreadHandle([out]  unsigned __int64* Handle );
	HRESULT GetThreadIdByHandle([in]  unsigned __int64 Handle,[out] unsigned long* Id );
	HRESULT GetNumberProcesses([out]  unsigned long* Number );
	HRESULT GetProcessIdsByIndex([in]  unsigned long Start,[in] unsigned long Count,[out,optional] unsigned long* Ids,[out,optional] unsigned long* SysIds );
	HRESULT GetCurrentProcessDataOffset([out]  unsigned __int64* Offset );
	HRESULT GetProcessIdByDataOffset([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentProcessPeb([out]  unsigned __int64* Offset );
	HRESULT GetProcessIdByPeb([in]  unsigned __int64 Offset,[out] unsigned long* Id );
	HRESULT GetCurrentProcessSystemId([out]  unsigned long* SysId );
	HRESULT GetProcessIdBySystemId([in]  unsigned long SysId,[out] unsigned long* Id );
	HRESULT GetCurrentProcessHandle([out]  unsigned __int64* Handle );
	HRESULT GetProcessIdByHandle([in]  unsigned __int64 Handle,[out] unsigned long* Id );
	HRESULT GetCurrentProcessExecutableName([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ExeSize );
	HRESULT GetCurrentProcessUpTime([out]  unsigned long* UpTime );
	HRESULT GetImplicitThreadDataOffset([out]  unsigned __int64* Offset );
	HRESULT SetImplicitThreadDataOffset([in]  unsigned __int64 Offset );
	HRESULT GetImplicitProcessDataOffset([out]  unsigned __int64* Offset );
	HRESULT SetImplicitProcessDataOffset([in]  unsigned __int64 Offset );
	HRESULT GetEventSystem([out]  unsigned long* Id );
	HRESULT GetCurrentSystemId([out]  unsigned long* Id );
	HRESULT SetCurrentSystemId([in]  unsigned long Id );
	HRESULT GetNumberSystems([out]  unsigned long* Number );
	HRESULT GetSystemIdsByIndex([in]  unsigned long Start,[in] unsigned long Count,[out] unsigned long* Ids );
	HRESULT GetTotalNumberThreadsAndProcesses([out]  unsigned long* TotalThreads,[out] unsigned long* TotalProcesses,[out] unsigned long* LargestProcessThreads,[out] unsigned long* LargestSystemThreads,[out] unsigned long* LargestSystemProcesses );
	HRESULT GetCurrentSystemServer([out]  unsigned __int64* Server );
	HRESULT GetSystemByServer([in]  unsigned __int64 Server,[out] unsigned long* Id );
	HRESULT GetCurrentSystemServerName([out,optional]  char* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
	HRESULT GetCurrentProcessExecutableNameWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* ExeSize );
	HRESULT GetCurrentSystemServerNameWide([out,optional]  wchar_t* Buffer,[in,optional] unsigned long BufferSize,[out,optional] unsigned long* NameSize );
};

enum {DEBUG_COMMAND_EXCEPTION_ID = 0xdbe00dbe};
enum {DEBUG_CMDEX_INVALID             = 0x00000000};
enum {DEBUG_CMDEX_ADD_EVENT_STRING    = 0x00000001};
enum {DEBUG_CMDEX_RESET_EVENT_STRINGS = 0x00000002};
enum {DEBUG_EXTINIT_HAS_COMMAND_HELP = 0x00000001};
enum {DEBUG_NOTIFY_SESSION_ACTIVE       = 0x00000000};
enum {DEBUG_NOTIFY_SESSION_INACTIVE     = 0x00000001};
enum {DEBUG_NOTIFY_SESSION_ACCESSIBLE   = 0x00000002};
enum {DEBUG_NOTIFY_SESSION_INACCESSIBLE = 0x00000003};
enum {DEBUG_KNOWN_STRUCT_GET_NAMES              = 1};
enum {DEBUG_KNOWN_STRUCT_GET_SINGLE_LINE_OUTPUT = 2};
enum {DEBUG_KNOWN_STRUCT_SUPPRESS_TYPE_NAME     = 3};
enum {DEBUG_EXT_QVALUE_DEFAULT = 0x00000000};
enum {DEBUG_EXT_PVALUE_DEFAULT = 0x00000000};
enum {DEBUG_EXT_PVTYPE_IS_VALUE   = 0x00000000};
enum {DEBUG_EXT_PVTYPE_IS_POINTER = 0x00000001};
