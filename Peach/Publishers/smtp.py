
'''
SMTP/Email publishers

@author: Michael Eddington
@version: $Id$
'''

#
# Copyright (c) 2009 Michael Eddington
#
# Permission is hereby granted, free of charge, to any person obtaining a copy 
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights 
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
# copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in	
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# Authors:
#   Michael Eddington (mike@phed.org)

# $Id$

import string,time,sys,os,smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.Utils import COMMASPACE, formatdate
from email import Encoders

from Peach.publisher import Publisher

# Imports to make py2exe happy
import email.iterators
import email.generator
#

class EmailAttachment(Publisher):
	'''
	Send fuzzed data as email attachment.
	'''
	
	def __init__(self, server, fileName, msgTo, msgFrom = "peach@peach.org",
				 msgSubject = "Fuzzing Test",
				 msgText = "Message generated by Peach Fuzzing Platform.\n\nhttp://peachfuzzer.com\n\n - Peach\n"):
		
		Publisher.__init__(self)
		
		self.server = server
		self.fileName = fileName
		self.msgFrom = msgFrom
		self.msgTo = msgTo
		self.msgSubject = msgSubject
		self.msgText = msgText
		
	def send(self, data):
		'''
		Publish some data
		
		@type	data: string
		@param	data: Data to publish
		'''
		
		# Build Message Body
		msg = MIMEMultipart()
		msg['From'] = self.msgFrom
		msg['To'] = self.msgTo
		msg['Date'] = formatdate(localtime=True)
		msg['Subject'] = self.msgSubject
		
		msg.attach(MIMEText(self.msgText))
		
		# Attach file
		part = MIMEBase('application', 'pdf')
		part.set_payload(data)
		Encoders.encode_base64(part)
		part.add_header('Content-Disposition', 'attachment; filename="%s"' % self.fileName)
		msg.attach(part)
		
		# Send email
		smtp = smtplib.SMTP(self.server)
		smtp.sendmail(self.msgFrom, self.msgTo, msg.as_string())
		smtp.close()
	
	def connect(self):
		'''
		Called to connect or open a connection/file.
		'''
		
		pass
	
	def close(self):
		'''
		Close current stream/connection.
		'''
		pass

class _OleStorage(object):
	'''
	This class wraps OLE Storage APIs
	'''
	pass

# end

